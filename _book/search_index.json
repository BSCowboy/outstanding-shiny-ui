[
["index.html", "Advanced Shiny Chapter 1 Prerequisites", " Advanced Shiny David Granjon 2019-02-05 Chapter 1 Prerequisites This book requires to be already familiar with R and Shiny. If not, we strongly recommand to read … "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2018) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["advance-design.html", "Chapter 3 Advance Design 3.1 Selecting a good template 3.2 About htmltools 3.3 Template Skeleton 3.4 Example", " Chapter 3 Advance Design In this chapter, you will learn how to build your own html templates taken from the web and package them, so that they can be re-used at any time by anybody. 3.1 Selecting a good template There exists tons of HTML templates over the web. However, only a few part will be suitable for shiny, mainly because of what follows: shiny is built on top of bootstrap 3 (HTML, CSS and Javascript framework), meaning that going for another framework might not be straightforward. However, shinymaterial and shiny.semantic are examples showing this can be possible. shiny relies on jQuery (currently v 1.12.4 for shiny, whereas the latest version is 3.3.1). Consequently, all templates based upon React, Vue and other Javascript framework will not be natively supported. Again, there exist some examples for React with shiny and more generally, the reactR package developed by Kent Russell ((???) on Twitter) and Alan Dipert from RStudio. See the github repository for more details about all dependencies related to the shiny package. Therefore in the following, we will restict ourself to Bootstrap (3 and 4) together with jQuery. Don’t be disapointed since there is still a lot to say. Notes: As shiny depends on Bootstrap 3.3.7, we recommand the user who would like to experiment Boostrap 4 features to be particularly careful about potential incompatibilies. See a working example here with bs4Dash. A good source of open source HTML templates is Colorlib and Creative Tim. You might also buy your template, but forget about the packaging option, which would be illegal in this particular case, unless you have a legal agreement with the author (very unlikely however). 3.2 About htmltools While building a custom html template, you will need to know more about the wonderful htmltools developed by Winston Chang, member of the shiny core team. It has the same spirit as devtools, that is, making your web developer life easier. What follows does not have the pretention to be an exhaustive guide about this package. Yet, it will provide you yith the main tools to be more efficient. 3.2.1 HTML Tags Both shiny and htmltools contain tags. However, by experience, htmltools contains more exported tags than shiny. For instance, the HTML &lt;nav&gt;&lt;/nav&gt; tag, namely tags$nav() in R is not included in the shiny package but in htmltools. Within your package code, your tags will be like: # we use htmltools tags instead of shiny htmltools::tags$div(...) If you had to gather multiple tags together, prefer tagList() as list(), although the HTML output is the same. The first has the shiny.tag.list class in addition to list. 3.2.1.1 Notations Whether to use tags$div or div is the tag is exported by default. For instance, you could use htmltools::div but not htmltools::nav since nav does not have a dedicated function (only for p, h1, h2, h3, h4, h5, h6, a, br, div, span, pre, code, img, strong, em, hr). Rather use htmltools::tags$nav. Alternatively, there exists a function (in shiny and htmltools) called withTags(). Wrapping your code in this function enables you to use withTags(nav(), ...) instead of tags$nav(). 3.2.1.2 Alternative way to write tags htmltools and shiny come with the HTML() function that you can feed with raw HTML: HTML(&#39;&lt;div&gt;Blabla&lt;/div&gt;&#39;) # will render exactly like div(&quot;Blabla&quot;) # but there class is different class(HTML(&#39;&lt;div&gt;Blabla&lt;/div&gt;&#39;)) class(div(&quot;Blabla&quot;)) You will not be able to use tag related functions, as in the following parts. Therefore, I strongly recommand using R and not mixing HTML in R. 3.2.1.3 Tags structure According to the htmltools tag() function, a tag has: - a name such as span, div, h1 … - attributes, which you can access with tag$attribs - children, which you can access with tag$children - a class, namely “shiny.tag” For instance: # create the tag myTag &lt;- div( class = &quot;divclass&quot;, id = &quot;first&quot;, h1(&quot;Here comes your baby&quot;), span(class = &quot;child&quot;, id = &quot;baby&quot;, &quot;Ouinnnnn&quot;) ) # access its name myTag$name # access its attributes (id and class) myTag$attribs # access children (returns a list of 2 elements) myTag$children How to modify the class of the second child? second_children &lt;- myTag$children[[2]] second_children$attribs$class &lt;- &quot;adult&quot; myTag # Hummm, this is not working ... The code above is wrong. Indeed, by assigning myTag$children[[2]] to second_children, second_children$attribs$class &lt;- &quot;adult&quot; modifies the class of the copy and not the original object. Only one way: myTag$children[[2]]$attribs$class &lt;- &quot;adult&quot; myTag For strongly nested tags, you will see that the following section contains amazing functions, such as tagAppenChild(). 3.2.1.4 Useful functions for Tags htmltools and shiny have powerful functions to easily add attributes to tags, check for existing attributes, get attributes and add other tags to a list of tags. tagAppendAttributes(): this function allow you to add a new attribute to the current tag. For instance, assuming you created a div for which you forgot to add and id attribute: mydiv &lt;- div(&quot;Where is my brain&quot;) mydiv &lt;- tagAppendAttributes(mydiv, id = &quot;here_it_is&quot;) You can pass as many attributes as you want, including non standard attributes such as data-toggle (see Bootstrap 3 tabs for instance): mydiv &lt;- tagAppendAttributes(mydiv, `data-toggle` = &quot;tabs&quot;) # even though you could proceed as follows mydiv$attribs[[&quot;aria-controls&quot;]] &lt;- &quot;home&quot; tagHasAttribute(): to check if a tag has a specific attribute # I want to know if div has a class mydiv &lt;- div(class = &quot;myclass&quot;) has_class &lt;- tagHasAttribute(mydiv, &quot;class&quot;) has_class # if you are familiar with %&gt;% has_class &lt;- mydiv %&gt;% tagHasAttribute(&quot;class&quot;) has_class tagGetAttribute(): to get the value of the targeted attributes, if it exists, otherwise NULL. mydiv &lt;- div(class = &quot;test&quot;) # returns the class tagGetAttribute(mydiv, &quot;class&quot;) # returns NULL tagGetAttribute(mydiv, &quot;id&quot;) tagAppendChild() and tagAppendChildren(): add other tags to an existing tag. Whereas tagAppendChild() only takes on tag, you can pass a list of tags to tagAppendChildren(). mydiv &lt;- div(class = &quot;parent&quot;, id = &quot;mother&quot;, &quot;Not the mama!!!&quot;) otherTag &lt;- span(&quot;I am your child&quot;) mydiv &lt;- tagAppendChild(mydiv, otherTag) You might wonder why there is no tagRemoveChild() or tagRemoveAttributes(). 3.2.1.5 Other interesting functions The brighter package written by Colin Fay contains very neat functions to edit your tags. Particularly, the tagRemoveAttributes() remotes::install_github(&quot;Thinkr-open/brighter&quot;) library(brighter) mydiv &lt;- div(class = &quot;test&quot;, id = &quot;coucou&quot;, &quot;Prout&quot;) tagRemoveAttributes(mydiv, &quot;class&quot;, &quot;id&quot;) Up to you to create new functions to add in this package and do a nice PR. 3.2.2 Dependency utilities When creating a new template, you sometimes need to import custom HTML dependencies that do not come along with shiny. No problem, htmltools is here for you (shiny also contains these functions). 3.2.2.1 The dirty approach 3.2.2.2 The clean approach 3.3 Template Skeleton 3.4 Example "],
["references.html", "References", " References "]
]
