[
["index.html", "Outstanding User Interfaces with Shiny Prerequisites Disclaimer Is this book for me? Related content", " Outstanding User Interfaces with Shiny David Granjon 2020-04-13 Prerequisites Be familiar with Shiny, the concept of modules Basic knowledge in HTML and JavaScript is a plus but not mandatory. Disclaimer This book is not an HTML/Javascript/CSS course! It provides a survival kit to be able to customize Shiny. I am sure however that readers will want to explore more about these topics. Is this book for me? You should read this book if you answer yes to at least 2 of the following questions: Do you want to know how to develop outstanding shiny apps? Have you ever wondered how to develop new input widgets? Related content See the RStudio Cloud dedicated project. "],
["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction In the past two years, there were various Shiny focused resources introducing basic as well as advanced topics such as modules and Javascript/R interactions. However, handling advanced user interfaces was never an emphasis. Clients often desire custom designs, yet this generally exceeds core features of Shiny. We recognized that R App developers lacking a significant background in web development may have found this requirement to be overwhelming. Consequently, the aim of this book is to provide readers the necessary knowledge to extend Shiny’s layout, input widgets and output elements. Thi book is organized into four parts. We first go through the basics of HTML, JavaScript and jQuery. In part 2, we dive into the {htmltools} package, providing functions to create and manipulate shiny tags as well as manage dependencies. Part 3 homes in on the development of a new template on top of Shiny by demonstrating examples from the {bs4Dash} and {shinyMobile} packages, part of the RinteRface project. "],
["survival-kit-html.html", "Chapter 2 HTML", " Chapter 2 HTML "],
["survival-kit-javascript.html", "Chapter 3 JavaScript", " Chapter 3 JavaScript "],
["htmltools-overview.html", "Chapter 4 htmltools overview 4.1 HTML Tags 4.2 Notations 4.3 Adding new tags 4.4 Alternative way to write tags 4.5 Playing with tags", " Chapter 4 htmltools overview 4.1 HTML Tags htmltools contains tools to write HTML tags we saw in Chapter 2. Within your package code, your tags will be like: # we use htmltools tags instead of shiny htmltools::tags$div(...) If you had to gather multiple tags together, prefer tagList() as list(), although the HTML output is the same. The first has the shiny.tag.list class in addition to list. (The Golem package allows to test if a R object is a tag list, therefore using list would make the test fail). 4.2 Notations Whether to use tags$div or div depends if the tag is exported by default. For instance, you could use htmltools::div but not htmltools::nav since nav does not have a dedicated function (only for p, h1, h2, h3, h4, h5, h6, a, br, div, span, pre, code, img, strong, em, hr). Rather use htmltools::tags$nav. Alternatively, there exists a function (in shiny and htmltools) called withTags(). Wrapping your code in this function enables you to use withTags(nav(), ...) instead of tags$nav(). 4.3 Adding new tags The tag function allows to add extra HTML tags not already defined. You may use it as follows: tag(&quot;test&quot;, list(class = &quot;test&quot;, p(&quot;Custom Tag&quot;))) # structure below █─tag ├─&quot;test&quot; └─█─list ├─class = &quot;test&quot; └─█─p └─&quot;Custom Tag&quot; 4.4 Alternative way to write tags htmltools comes with the HTML() function that you can feed with raw HTML: HTML(&#39;&lt;div&gt;Blabla&lt;/div&gt;&#39;) # will render exactly like div(&quot;Blabla&quot;) # but there class is different class(HTML(&#39;&lt;div&gt;Blabla&lt;/div&gt;&#39;)) class(div(&quot;Blabla&quot;)) You will not be able to use tag related functions, as in the following parts. Therefore, I strongly recommand using R and not mixing HTML in R. Interestingly, if you want to convert HTML to R code, there is a Shiny App developed by Alan Dipert from RStudio, namely html2R. There are some issues, non standard attributes (like data-toggle) are not correctly processed but there are fixes. This will save you precious time! 4.5 Playing with tags 4.5.1 Tags structure According to the tag function, a tag has: - a name such as span, div, h1 … tag$name - some attributes, which you can access with tag$attribs - children, which you can access with tag$children - a class, namely “shiny.tag” For instance: # create the tag myTag &lt;- div( class = &quot;divclass&quot;, id = &quot;first&quot;, h1(&quot;Here comes your baby&quot;), span(class = &quot;child&quot;, id = &quot;baby&quot;, &quot;Crying&quot;) ) # access its name myTag$name # access its attributes (id and class) myTag$attribs # access children (returns a list of 2 elements) myTag$children # access its class class(myTag) How to modify the class of the second child, namely span? second_children &lt;- myTag$children[[2]] second_children$attribs$class &lt;- &quot;adult&quot; myTag # Hummm, this is not working ... Why is this not working? By assigning myTag$children[[2]] to second_children, second_children$attribs$class &lt;- &quot;adult&quot; modifies the class of the copy and not the original object. Thus we do: myTag$children[[2]]$attribs$class &lt;- &quot;adult&quot; myTag In the following section we explore helper functions, such as tagAppendChild from htmltools. 4.5.2 Useful functions for tags htmltools and Shiny have powerful functions to easily add attributes to tags, check for existing attributes, get attributes and add other siblings to a list of tags. 4.5.2.1 Add attributes tagAppendAttributes: this function allow you to add a new attribute to the current tag. For instance, assuming you created a div for which you forgot to add an id attribute: mydiv &lt;- div(&quot;Where is my brain&quot;) mydiv &lt;- tagAppendAttributes(mydiv, id = &quot;here_it_is&quot;) You can pass as many attributes as you want, including non standard attributes such as data-toggle (see Bootstrap 3 tabs for instance): mydiv &lt;- tagAppendAttributes(mydiv, `data-toggle` = &quot;tabs&quot;) # even though you could proceed as follows mydiv$attribs[[&quot;aria-controls&quot;]] &lt;- &quot;home&quot; 4.5.2.2 Check if tag has specific attribute tagHasAttribute: to check if a tag has a specific attribute # I want to know if div has a class mydiv &lt;- div(class = &quot;myclass&quot;) has_class &lt;- tagHasAttribute(mydiv, &quot;class&quot;) has_class # if you are familiar with %&gt;% has_class &lt;- mydiv %&gt;% tagHasAttribute(&quot;class&quot;) has_class 4.5.2.3 Get all attributes tagGetAttribute: to get the value of the targeted attributes, if it exists, otherwise NULL. mydiv &lt;- div(class = &quot;test&quot;) # returns the class tagGetAttribute(mydiv, &quot;class&quot;) # returns NULL tagGetAttribute(mydiv, &quot;id&quot;) 4.5.2.4 Set child/children tagSetChildren allows to create children for a given tag. For instance: mydiv &lt;- div(class = &quot;parent&quot;, id = &quot;mother&quot;, &quot;Not the mama!!!&quot;) # mydiv has 1 child &quot;Not the mama!!!&quot; mydiv children &lt;- lapply(1:3, span) mydiv &lt;- tagSetChildren(mydiv, children) # mydiv has 3 children, the first one was removed mydiv Notice that tagSetChildren removes all existing children. Below we see another set of functions to add children while conserving existing ones. 4.5.2.5 Add child or children tagAppendChild and tagAppendChildren: add other tags to an existing tag. Whereas tagAppendChild only takes one tag, you can pass a list of tags to tagAppendChildren. mydiv &lt;- div(class = &quot;parent&quot;, id = &quot;mother&quot;, &quot;Not the mama!!!&quot;) otherTag &lt;- span(&quot;I am your child&quot;) mydiv &lt;- tagAppendChild(mydiv, otherTag) You might wonder why there is no tagRemoveChild or tagRemoveAttributes. Let’s look at the tagAppendChild tagAppendChild &lt;- function (tag, child) { tag$children[[length(tag$children) + 1]] &lt;- child tag } Below we write the tagRemoveChild, where tag is the target and n is the position to remove in the list of children: mydiv &lt;- div(class = &quot;parent&quot;, id = &quot;mother&quot;, &quot;Not the mama!!!&quot;, span(&quot;Hey!&quot;)) # we create the tagRemoveChild function tagRemoveChild &lt;- function(tag, n) { # check if the list is empty if (rlang::is_empty(tag$children)) { stop(paste(tag$name, &quot;does not have any children&quot;)) } tag$children[n] &lt;- NULL tag } mydiv &lt;- tagRemoveChild(mydiv, 1) mydiv When defining the tagRemoveChild, we choose [ instead of [[ to allow to select multiple list elements: mydiv &lt;- div(class = &quot;parent&quot;, id = &quot;mother&quot;, &quot;Not the mama!!!&quot;, &quot;Hey!&quot;) # fails `[[`(mydiv$children, c(1, 2)) # works `[`(mydiv$children, c(1, 2)) Alternatively, we could also create a tagRemoveChildren function. Also notice that the function raises an error if the provided tag does not have children. 4.5.3 Other interesting functions The brighter package written by Colin Fay contains neat functions to edit your tags. Particularly, the tagRemoveAttributes remotes::install_github(&quot;Thinkr-open/brighter&quot;) library(brighter) mydiv &lt;- div(class = &quot;test&quot;, id = &quot;coucou&quot;, &quot;Hello&quot;) tagRemoveAttributes(mydiv, &quot;class&quot;, &quot;id&quot;) "],
["htmltools-dependencies.html", "Chapter 5 Dependency utilities 5.1 The dirty approach 5.2 The clean approach 5.3 Another example: Importing HTML dependencies from other packages", " Chapter 5 Dependency utilities When creating a new template, you sometimes need to import custom HTML dependencies that do not come along with shiny. No problem, htmltools is here for you (shiny also contains these functions). library(shiny) library(shinydashboard) ## ## Attaching package: &#39;shinydashboard&#39; ## The following object is masked from &#39;package:graphics&#39;: ## ## box 5.1 The dirty approach Let’s consider the following example. I want to include a bootstrap 4 card in a shiny app. This example is taken from an interesting question here. The naive approach would be to include the HTML code directly in the app code # we create the card function before my_card &lt;- function(...) { htmltools::withTags( div( class = &quot;card border-success mb-3&quot;, div(class = &quot;card-header bg-transparent border-success&quot;), div( class = &quot;card-body text-success&quot;, h3(class = &quot;card-title&quot;, &quot;title&quot;), p(class = &quot;card-text&quot;, ...) ), div(class = &quot;card-footer bg-transparent border-success&quot;, &quot;footer&quot;) ) ) } # we build our app shinyApp( ui = fluidPage( fluidRow( column( width = 6, align = &quot;center&quot;, br(), my_card(&quot;blablabla. PouetPouet Pouet.&quot;) ) ) ), server = function(input, output) {} ) and desesperately see that nothing is displayed. If you remember, this was expected since shiny does not contain bootstrap 4 dependencies and this card is unfortunately a bootstrap 4 object. Don’t panic! We just need to tell shiny to load the css we need to display this card (if required, we could include the javascript as well). We could use either includeCSS(), tags$head(tags$link(rel = &quot;stylesheet&quot;, type = &quot;text/css&quot;, href = &quot;custom.css&quot;)). See more here. shinyApp( ui = fluidPage( # load the css code includeCSS(path = &quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&quot;), fluidRow( column( width = 6, align = &quot;center&quot;, br(), my_card(&quot;blablabla. PouetPouet Pouet.&quot;) ) ) ), server = function(input, output) {} ) The card is ugly (which is another problem we will fix later) but at least displayed. When I say this approach is dirty, it is because it will not be easily re-usable by others. Instead, we prefer a packaging approach, like in the next section. 5.2 The clean approach We will use the htmlDependency and attachDependencies functions from htmltools. The htmlDependency takes several arguments: the name of your dependency the version (useful to remember on which version it is built upon) a path to the dependency (can be a CDN or a local folder) script and stylesheet to respectively pass css and scripts # handle dependency card_css &lt;- &quot;bootstrap.min.css&quot; bs4_card_dep &lt;- function() { htmltools::htmlDependency( name = &quot;bs4_card&quot;, version = &quot;1.0&quot;, src = c(href = &quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/&quot;), stylesheet = card_css ) } We create the card tag and give it the bootstrap 4 dependency through the attachDependencies() function. # create the card my_card &lt;- function(...) { cardTag &lt;- htmltools::withTags( div( class = &quot;card border-success mb-3&quot;, div(class = &quot;card-header bg-transparent border-success&quot;), div( class = &quot;card-body text-success&quot;, h3(class = &quot;card-title&quot;, &quot;title&quot;), p(class = &quot;card-text&quot;, ...) ), div(class = &quot;card-footer bg-transparent border-success&quot;, &quot;footer&quot;) ) ) # attach dependencies htmltools::attachDependencies(cardTag, bs4_card_dep()) } We finally run our app: # run shiny app ui &lt;- fluidPage( title = &quot;Hello Shiny!&quot;, fluidRow( column( width = 6, align = &quot;center&quot;, br(), my_card(&quot;blablabla. PouetPouet Pouet.&quot;) ) ) ) shinyApp(ui, server = function(input, output) { }) With this approach, you could develop a package of custom dependencies that people could use when they need to add custom elements in shiny. 5.3 Another example: Importing HTML dependencies from other packages You may know shinydashboard, a package to design dashboards with shiny. In the following, we would like to integrate the box component in a classic Shiny App (without the dashboard layout). However, if you try to include the Shinydashboard box tag, you will notice that nothing is displayed since Shiny does not have shinydashboard dependencies. Fortunately htmltools contains a function, namely findDependencies that looks for all dependencies attached to a tag. How about extracting shinydashboard dependencies? Before going futher, let’s define the basic skeleton of a shinydashboard: shinyApp( ui = dashboardPage( dashboardHeader(), dashboardSidebar(), dashboardBody(), title = &quot;Dashboard example&quot; ), server = function(input, output) { } ) We don’t need to understand shinydashboard details. However, if you are interested to dig in, help yourself. What is important here is the main wrapper function dashboardPage. (You should already be familiar with fluidPage, another wrapper function). We apply findDependencies on dashboardPage. deps &lt;- findDependencies( shinydashboard::dashboardPage( header = shinydashboard::dashboardHeader(), sidebar = shinydashboard::dashboardSidebar(), body = shinydashboard::dashboardBody() ) ) deps deps is a list containg 4 dependencies: Font Awesome handles icons Bootstrap is the main HTML/CSS/JS template. Importantly, please note the version 3.3.7, whereas the current is 4.3.1 AdminLTE is the dependency containg HTML/CSS/JS related to the admin template. It is closely linked to Bootstrap 3. shinydashboard, the CSS and javascript necessary for shinydashboard to work properly. In practice, integrating custom HTML templates to shiny does not usually work out of the box for many reasons (Explain why!) and some modifications are necessary. [[1]] List of 10 $ name : chr &quot;font-awesome&quot; $ version : chr &quot;5.3.1&quot; $ src :List of 1 ..$ file: chr &quot;www/shared/fontawesome&quot; $ meta : NULL $ script : NULL $ stylesheet: chr [1:2] &quot;css/all.min.css&quot; &quot;css/v4-shims.min.css&quot; $ head : NULL $ attachment: NULL $ package : chr &quot;shiny&quot; $ all_files : logi TRUE - attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; [[2]] List of 10 $ name : chr &quot;bootstrap&quot; $ version : chr &quot;3.3.7&quot; $ src :List of 2 ..$ href: chr &quot;shared/bootstrap&quot; ..$ file: chr &quot;/Library/Frameworks/R.framework/Versions/3.5/Resources/library/shiny/www/shared/bootstrap&quot; $ meta :List of 1 ..$ viewport: chr &quot;width=device-width, initial-scale=1&quot; $ script : chr [1:3] &quot;js/bootstrap.min.js&quot; &quot;shim/html5shiv.min.js&quot; &quot;shim/respond.min.js&quot; $ stylesheet: chr &quot;css/bootstrap.min.css&quot; $ head : NULL $ attachment: NULL $ package : NULL $ all_files : logi TRUE - attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; [[3]] List of 10 $ name : chr &quot;AdminLTE&quot; $ version : chr &quot;2.0.6&quot; $ src :List of 1 ..$ file: chr &quot;/Library/Frameworks/R.framework/Versions/3.5/Resources/library/shinydashboard/AdminLTE&quot; $ meta : NULL $ script : chr &quot;app.min.js&quot; $ stylesheet: chr [1:2] &quot;AdminLTE.min.css&quot; &quot;_all-skins.min.css&quot; $ head : NULL $ attachment: NULL $ package : NULL $ all_files : logi TRUE - attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; [[4]] List of 10 $ name : chr &quot;shinydashboard&quot; $ version : chr &quot;0.7.1&quot; $ src :List of 1 ..$ file: chr &quot;/Library/Frameworks/R.framework/Versions/3.5/Resources/library/shinydashboard&quot; $ meta : NULL $ script : chr &quot;shinydashboard.min.js&quot; $ stylesheet: chr &quot;shinydashboard.css&quot; $ head : NULL $ attachment: NULL $ package : NULL $ all_files : logi TRUE - attr(*, &quot;class&quot;)= chr &quot;html_dependency&quot; Below, we attach the dependencies to the box with attachDependencies. For that we wrap it in a function. Notice that our custom box does not contain all original features from shinydashboard but this is not what matters in this example. my_box &lt;- function(title, status) { attachDependencies(box(title = title, status = status), deps) } ui &lt;- fluidPage( titlePanel(&quot;Shiny with a box&quot;), my_box(title = &quot;My box&quot;, status = &quot;danger&quot;), ) server &lt;- function(input, output) {} shinyApp(ui, server) Now, you may imagine the possibilities are almost unlimited! and package them, so that they can be re-used at any time by anybody. "],
["practice-template.html", "Chapter 6 Selecting a good template", " Chapter 6 Selecting a good template There exists tons of HTML templates over the web. However, only a few part will be suitable for shiny, mainly because of what follows: shiny is built on top of bootstrap 3 (HTML, CSS and Javascript framework), meaning that going for another framework might not be straightforward. However, shinymaterial and shiny.semantic are examples showing this can be possible. shiny relies on jQuery (currently v 1.12.4 for shiny, whereas the latest version is 3.3.1). Consequently, all templates based upon React, Vue and other Javascript framework will not be natively supported. Again, there exist some examples for React with shiny and more generally, the reactR package developed by Kent Russell and Alan Dipert from RStudio. See the github repository for more details about all dependencies related to the shiny package. Therefore in the following, we will restict ourself to Bootstrap (3 and 4) together with jQuery. Don’t be disapointed since there is still a lot to say. Notes: As shiny depends on Bootstrap 3.3.7, we recommand the user who would like to experiment Boostrap 4 features to be particularly careful about potential incompatibilies. See a working example here with bs4Dash. A good source of open source HTML templates is Colorlib and Creative Tim. You might also buy your template, but forget about the packaging option, which would be illegal in this particular case, unless you have a legal agreement with the author (very unlikely however). "],
["custom-templates-dependencies.html", "Chapter 7 Define dependencies", " Chapter 7 Define dependencies "],
["custom-templates-skeleton.html", "Chapter 8 Template skeleton", " Chapter 8 Template skeleton "],
["custom-templates-inputs.html", "Chapter 9 Develop custom input widgets 9.1 How does Shiny handle inputs? 9.2 How to add new input to Shiny?", " Chapter 9 Develop custom input widgets 9.1 How does Shiny handle inputs? 9.2 How to add new input to Shiny? "],
["custom-templates-testing.html", "Chapter 10 Testing templates elements", " Chapter 10 Testing templates elements "]
]
