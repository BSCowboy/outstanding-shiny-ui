[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"book still active development intended 2021 Q2 release R Series Chapman\n& Hall.","code":""},{"path":"index.html","id":"is-this-book-for-me","chapter":"Welcome","heading":"Is this book for me?","text":"going , reader must:comfortable basic R structures concepts, functional object oriented programming (R6)solid knowledge ShinyBasic knowledge HTML JavaScript plus mandatory.fulfill prerequisites, read book answer yes following questions:want know develop shiny apps professional look feel?ever wondered design new input widgets unleash interactivity?simply curious happens hood?","code":""},{"path":"index.html","id":"learning-objectives","chapter":"Welcome","heading":"Learning objectives","text":"book help :Manipulate Shiny tags R create custom layoutsHarness power CSS JavaScript quickly design apps standing packDiscover steps import convert existing web frameworks like Bootstrap 4, framework7Learn Shiny internally deals inputsLearn less documented Shiny mechanisms (websockets, sessions, …)","code":""},{"path":"index.html","id":"why-this-book","chapter":"Welcome","heading":"0.1 Why another Shiny related book?","text":"various Shiny focused resources introducing basic well advanced topics modules Javascript/R interactions, however, handling advanced user interfaces design never emphasis. Clients often desire custom templates, yet generally exceeds core features Shiny (box).Generally, R App developers lack significant background web development often find requirement overwhelming. sentiment motivated writing book, namely provide readers necessary knowledge extend Shiny’s layout, input widgets output elements. project officially started end 2018 stopped Joe Cheng revealed upcoming Mastering Shiny Book. Fortunately, later, cover lot customization Shiny user interfaces. Besides, book may constitute good complement work progress Engineering Production-Grade Shiny Apps ThinkR team, link Shiny CSS/JavaScript covered. deep dive JavaScript R interactions, upcoming book John Coene covers topics like htmlWidgets, interactive documents computations.","code":""},{"path":"index.html","id":"book-structure","chapter":"Welcome","heading":"Book structure","text":"book organized eight parts.Part 1 demonstrates link Shiny classic web languages like HTML, CSS JavaScript. gradually introduce\nnecessary web development knowledge able read book. finish exploring web dependencies behind Shiny Bootstrap jQuery.part 2, dive htmltools (Cheng et al. 2021) package, providing functions create manipulate HTML tags R well manage web dependencies.Part 3 focuses CSS Sass. provide reader basic CSS knowledge get Sass, powerful tool seamlessly alter Shiny apps style, reproducible manner. along part, showcase examples R community like fresh (Perrier Meyer 2020b) bslib (Sievert Cheng 2021), significantly beautify apps lines code.Part 4 contains chapters dedicated Shiny input system. part starts JavaScript hands , exposes Shiny works hood introducing websockets allows communication R JavaScript. explore Shiny input life cycle, created updated. expose JS techniques get rid unnecessary renderUI patterns may speed Shiny apps. part contains many hidden gems significantly quickly enhance apps.Part 5 focuses development new template Shiny demonstrating examples tablerDash (Granjon 2020c) package. , may explored part RinteRface project. case study mobilizes knowledge acquired previous parts.Part 6 introduces new opinionated package, charpente (Granjon Coene 2021), substantially reduce burden JavaScript management development Shiny extensions.Part 7 dives mobile web development practical study involving rework shinyMobile (Granjon, Perrier, Rudolf 2020). give brief introduction progressive web application world patterns get started like service workers, web manifests,\noffline pages.Part 8 exposes alternatives like React, taking examples reactR (Inc et al. 2020) package.Parts sorted difficulty level, last one technical. However, mean reader\nmust read chapters. Given heterogeneous background community, people may focus JavaScript section, \nothers read Sass part mobile development examples. patterns exposed book may apply\nclassic Shiny apps projects, necessarily meant extend Shiny per se, may need highly customized experience.\nBeyond aesthetic aspect, book tries expose best practices develop optimized shiny apps!end book, reader able entirely customize Shiny reasonable amount time.","code":""},{"path":"index.html","id":"welcome-code-structure","chapter":"Welcome","heading":"0.2 Code structure","text":"book side package containing necessary material run code without reload previous snippet.covers Chapters 11, 14 whole Practice section.another good reason package: provide robust method bundle JavaScript/CSS code along side shiny app. Indeed, quite tempting proceed :fine app purpose simple demonstration. case, since aim providing reusable template elements, need better approach, described later.","code":"\nremotes::install_github(\"DivadNojnarg/outstanding-shiny-ui-code\n\")\nui <- fluidPage(\n  tags$script(\n    \"$(function() {\n      Shiny.addCustomMessageHandler('hello', function(message) {     \n        alert(message); \n      });\n    });\n    \"\n  ),\n  actionButton(\"go\", \"Send\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$go, {\n    session$sendCustomMessage(\"hello\", message = \"plop\")\n  })\n}\n\nshinyApp(ui, server)"},{"path":"index.html","id":"preliminary-exercices","chapter":"Welcome","heading":"Preliminary exercices","text":"starting technical details, propose play little game. Among images shown, ones corresponding shiny apps?","code":""},{"path":"index.html","id":"extra-material","chapter":"Welcome","heading":"Extra material","text":"book may serve material workshops. See list recent events.","code":""},{"path":"index.html","id":"e-rum-2020","chapter":"Welcome","heading":"e-Rum 2020","text":"Novartis associates Mustapha Larbaoui David Granjon gave workshop entitled “Advanced User Interfaces Shiny Developers” latest 2020 virtual e-Rum conference whose detailed agenda available . two hours workshop takes lot inspiration book. RStudio Cloud dedicated project deployed slides located .","code":""},{"path":"index.html","id":"rpharma-2020","chapter":"Welcome","heading":"R/Pharma 2020","text":"books served resource 2020 R/Pharma Unleash Shiny workshop held John Coene, Colin Fay David Granjon. Slides available exercises accessible . workshop expects higher level e-Rum one.","code":""},{"path":"index.html","id":"about-rinterface","chapter":"Welcome","heading":"About RinteRface","text":"RinteRface project initiative aiming provide one famous HTML templates Shiny. Everything started collaboration John Coene David Granjon early 2018 shinybulma (Coene Granjon 2020) officially release RinteRface November 2018 shinydashboardPlus (Granjon 2020b), bs4Dash (Granjon 2021) line-packages.\nFIGURE 0.1: Official release RinteRface, November 28 2018\nbiggest RinteRface accomplishment probably work progress shinyMobile package, initially called {shinyF7}, collaboration dreamRs team.Since 2019, RinteRface involved various R related events like local R meetups conferences (Zurich R User Group, baselR, useR2019, satRdayNeuchatel2020, e-Rum2020, RPharma2020).RinteRface contributor Shiny Developers Series, hosted Eric Nantz, also known theRcast.RinteRface work awarded several times 2 latest shiny contests (2019 2020), contributions like:virtual lab teaching physiology (2019), Apps.Physiol plateform, fuelled bs4Dash hosted {CaPO4Sim} (Granjon 2020a)\nFIGURE 0.2: virtual patient simulator {CaPO4Sim}\n{deminR} (Devaux Granjon 2020), minesweeper R (2020), powered shinyMobile\nFIGURE 0.3: {deminR}, minesweeper R\nRinteRface grateful R community book sort acknowledgment!","code":""},{"path":"index.html","id":"acknowledgements","chapter":"Welcome","heading":"Acknowledgements","text":"grateful Douglas Robinson proof reading book fixing many typos containedA special thanks friends John Victor contributing RinteRfaceThanks eRum organizers inviting virtual e-Rum2020 conferenceRinteRface book won’t exist without amazing R community. Thanks valuable feedback","code":""},{"path":"index.html","id":"packages","chapter":"Welcome","heading":"Packages","text":"book built R version 3.6.1 (2019-07-05) following packages:","code":""},{"path":"foreword.html","id":"foreword","chapter":"Foreword","heading":"Foreword","text":"Kenton Russel aka @timelyportfolioSince initial commit (https://github.com/rstudio/shiny/commit/e28b3da1badfecb34235e74a43aac4e8da1641bc) Shiny June 2012, project grown rapidly users around world across nearly every domain. Strangely though nearly zero comprehensive resources collecting scattered wisdom experience thousands Shiny users developers single definitive resource. Fortunately, book addresses gap offering detailed --date compilation Shiny benefit users skill levels beginner advanced. read early drafts, kept saying smile, “Yes, finally”. book fills void covering topics Internet search might yield useful results.Successful open source requires skillful developers, active engaged users, helpful supporters. R/Shiny community, David Granjon, PhD fulfills three roles prolific R package creator, educated thoughtful user domain expertise, educator (workshops, posts, forum responses). think anyone qualified write book Shiny, happy David spent time generously share wisdom experience excellent resource.","code":""},{"path":"web-intro.html","id":"web-intro","chapter":"1 Shiny and the Web","heading":"1 Shiny and the Web","text":"shiny (Chang et al. 2021) allows development web applications R minutes. Let’s face : quite mind blowing! may production ready app, still fully functional, working prototype. Believe , web application pure HTML/CSS JavaScript difficult, especially someone non-web developer background.first load shiny:","code":"\nlibrary(shiny)"},{"path":"web-intro.html","id":"shiny-generates-html-code-from-r","chapter":"1 Shiny and the Web","heading":"1.1 Shiny generates HTML code from R","text":"Let’s start little exercise:Run following code:Copy paste code R console. observe?Notice output format example HTML tag. p function generates HTML (see chapter 3). main difference HTML tags Shiny tags absence closing tag Shiny. instance, raw HTML, expect <p> closed <\/p>. Shiny, call p(...), ... may attributes like class/id children tags. R developer, able generate HTML code R allows remain focused main task instead web development burdens.\nstated general introduction 0.1, production app sometimes needs custom elements contained hidden Shiny’s core.Shiny app less customizable classic web app? ! hood, Shiny engine build HTML tags, R, meaning HTML elements available. may also include custom JavaScript code.","code":"\np(\"Hello World\")"},{"path":"web-intro.html","id":"web-intro-html","chapter":"1 Shiny and the Web","heading":"1.2 HTML 101","text":"chapter provides short introduction 3 main web languages, namely HTML, CSS JavaScript.\nfollowing content crucial understand part 3 HTML generation R.","code":""},{"path":"web-intro.html","id":"html-basics","chapter":"1 Shiny and the Web","heading":"1.2.1 HTML Basics","text":"HTML (Hypertext Markup Language) derived SGML (Standard Generalized markup Language). HTML file contains tags may divided 2 categories:paired-tags: text inserted opening closing tagclosing-tagsTags may divided 3 categories, based role:structure tags: constitute skeleton HTML page (<title><\/title>, <head><\/head>, <body><\/body>)control tags: script, inputs buttons (). role include external resources, provide interactivity userformatting tags: control size, font wrapped textFinally, distinguish block inline elements:block elements may contain tags take full width (block inline). <div><\/div> commonly used block element. elements block printed top othersinline elements (instance <span><\/span>, <><\/>) printed line. can contain block tags may contain nested inline tags. practice, often see <><span><\/span><\/>inline-block elements allow insert block element inlineConsider following example. clearly bad use HTML conventions since inline tag can host block elements.Importantly, <div> <span> don’t semantic meaning, contrary <header> <footer>, allow structure HTML page.","code":"<!-- paired-tags -->\n<p><\/p>\n<div><\/div>\n\n<!-- self-closing tags -->\n<iframe/>\n<img/>\n<input/>\n<br/><span>\n  <div><p>Hello World<\/p><\/div>\n  <div><\/div>\n<\/span>"},{"path":"web-intro.html","id":"tag-attributes","chapter":"1 Shiny and the Web","heading":"1.2.2 Tag attributes","text":"Attributes text elements allowing specify properties tag. instance link tag (<><\/>), actually expect just tag : target url open new page … previous examples, tags don’t attributes. Yet, exist large range attributes see 2 now (reason commonly used CSS JavaScript):class: may shared multiple tagsid: must uniqueBoth attributes widely used CSS JavaScript (see Chapter 9 jQuery selectors) apply custom style web page. Class attributes apply multiple elements, however id attribute restricted one item.Interestingly, exists another attribute category, know non-standard attributes like data-toggle. see later book (see Chapter 17).","code":"<div class=\"awesome-item\" id=\"myitem\"><\/div>\n<!-- the class awesome-item may be applied to multiple tags -->\n<span class=\"awesome-item\"><\/span>"},{"path":"web-intro.html","id":"the-simplest-html-skeleton","chapter":"1 Shiny and the Web","heading":"1.2.3 The simplest HTML skeleton","text":"HTML page collection tags interpreted web browser step step. simplest HTML page may defined follows:<html> may wrapper<head> <body> 2 main children\n<head> contains dependencies like styles JavaScript files (),\n<body> contains page content displayed screen. see later JavaScript files often added just end <body>.\n<head> contains dependencies like styles JavaScript files (),<body> contains page content displayed screen. see later JavaScript files often added just end <body>.body content displayed screen! W3C validation imposes list title tag head section lang attribute html tag!Let’s write famous Hello World HTML:order preview page web browser, need save snippet script hello-world.html double-click . open default web browser.Shiny app, demonstration purpose (static HTML enough user interaction required).outside, looks identical even though ’ll see Chapter 2 simple app actually contains much HTML previous example.","code":"<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n  <!-- head content here -->\n    <title>A title<\/title>\n  <\/head>\n  <body>\n  <!-- body content here -->\n  <\/body>\n<\/html><!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <!-- head content here -->\n    <title>A title<\/title>\n  <\/head>\n  <body>\n    <p>Hello World<\/p>\n  <\/body>\n<\/html>\nui <- fluidPage(p(\"Hello World\"))\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"web-intro.html","id":"about-the-document-object-model-dom","chapter":"1 Shiny and the Web","heading":"1.2.4 About the Document Object Model (DOM)","text":"DOM stands “Document Object Model” convenient representation html document. actually exists multiple DOM types, namely DOM-XML DOM-HTML focus latter. consider last example (Hello World), associated DOM tree may inspected Figure 1.1.","code":""},{"path":"web-intro.html","id":"visualizing-the-dom-with-the-html-inspector","chapter":"1 Shiny and the Web","heading":"1.2.4.1 Visualizing the DOM with the HTML inspector","text":", introduce tool facilitate exploration beautiful shiny user interfaces. section, restrict description first panel HTML inspector.1 feature available web browsers, however demonstration purposes, focus Chrome DevTools. may opened:right click selecting inspectAfter clicking F12 (windows), fn + F12 Mac (Command+Option+C)following:Open hello-world.html example ChromeRight-click open HTML inspector (developer tools must enabled case)HTML inspector convenient tool explore structure current HTML page. left-hand side, DOM tree displayed clearly see <html> parent <head> <body>. <body> also 1 child, <p>. may preview style (CSS) associated selected element right panel well Event Listeners (JavaScript), discussed later book.\nFIGURE 1.1: Inspection DOM Hello World example\n","code":""},{"path":"web-intro.html","id":"html-inspector-101","chapter":"1 Shiny and the Web","heading":"1.2.4.2 HTML Inspector 101","text":"following, enumerate key features inspector Elements tab. addition explore HTML structure, inspector allows :Dynamically change CSS run timeDebug JavaScript code (put break points, …)Run JavaScript code console.Monitor error warning may prevent app website properly workingAnother important feature ability switch different devices, especially mobile platforms global performance audit Google LightHouse. book Colin Fay et al. details relevant elements Shiny app development.propose set quick exercises review important HTML inspector capabilities commonly needed Shiny app customization. consider app already defined :","code":"\nui <- fluidPage(p(\"Hello World\"))\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"web-intro.html","id":"exercise-altering-the-dom-structure","chapter":"1 Shiny and the Web","heading":"1.2.4.2.1 Exercise: Altering the DOM structure","text":"Run Hello World app, right click text element click inspectNotice done similarly clicking top left corner Inspect icon (Command + maj + C Mac) hovering Hello World textYou see result similar Figure 1.2, Inspect icon blue. selected element highlighted white box displays main CSS properties like text-color, font-size, margins, well accessibility parameters.\nFIGURE 1.2: Inspection p element Hello World example\nElements panel, double click <p> <\/p> tags edit current text. Press enter finishedLet’s add children p tag. Right click select Edit HTML option. may enter valid HTML code inside. Don’t forget rules relative inline block tags (inline tags contain block tags!!!)depicted Figure 1.3, done right click p tag display options like:Add/edit attribute. may try add class class=\"awesome-text\" id id=\"-text\"Delete current tag (return key well)Copy element nested elementsOnly copy outside HTML (ignore nested elements)Extract CSS selector JavaScript path (code select element): body > div > p document.querySelector(\"body > div > p\"), respectively. 2 features extremely powerful save time. Try copy paste document.querySelector(\"body > div > p\") JavaScript console bottom inspector window. returns selected HTML element, shown Figure 1.4! Amazing isn’ ?Hide elementForce specific state. instance buttons may active, inactive\nFIGURE 1.3: Modifications p element Hello World example\n\nFIGURE 1.4: Extract JavaScript path select p element\nWhenever looking specific tag complex page, search tag option game changer (Ctrl + F Windows, command + F within Elements tab Mac). See Figure 1.5.\nFIGURE 1.5: Search element “awesome-text” class\nFinally, inspector toolkit allows reorder DOM elements rather intuitive drag drop feature. invite reader carefully explore features crucial next chapters.","code":""},{"path":"web-intro.html","id":"preliminary-introduction-to-css-and-javascript","chapter":"1 Shiny and the Web","heading":"1.2.5 Preliminary introduction to CSS and JavaScript","text":"introduce section, propose look first website, early 90’s (August 1991 exactly). aesthetic point view (see Figure 1.6), far can observe today shown Figure 1.7.\nFIGURE 1.6: World wide web website\n\nFIGURE 1.7: RinteRface website: https://rinterface.com\ncan explain difference? One main reason absence CSS (Cascading Style Sheet) since first CSS release appeared December 1996, 5 years later first web site publication. CSS allows deeply customize appearance web page changing colors, fonts, margins much . acknowledge, role JavaScript demonstrated previous example. Yet impact important CSS, now impossible dissociate HTML, CSS JavaScript.","code":""},{"path":"web-intro.html","id":"html-and-css","chapter":"1 Shiny and the Web","heading":"1.2.5.1 HTML and CSS","text":"CSS (Cascading Style Sheets) changes style HTML tags targeting specific classes ids. instance, want p tags red color use:include CSS HTML page, use <style> tag follows:may update hello-world.html script run web-browser see difference. example may slight, shows may control look feel display. development context, see later css files may big better include external files.Let’s build shiny app similar things. reminder, may use tags$style include small pieces CSS app:","code":"p {\n  color: red;\n}<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <style type=\"text/css\">\n      p {\n        color: red;\n      }\n    <\/style>\n    <title>A title<\/title>\n  <\/head>\n  <body>\n    <p>Hello World<\/p>\n  <\/body>\n<\/html>\nui <- fluidPage(\n  tags$style(\"p { color: red;}\"),\n  p(\"Hello World\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"web-intro.html","id":"html-and-javascript","chapter":"1 Shiny and the Web","heading":"1.2.5.2 HTML and JavaScript","text":"see quickly/seamlessly may add awesome features shiny app.following example, defined changeColor function targets element\nhello id change color property green. HTML element onClick attribute\ntriggers changeColor function time button clicked.lines code, can change color text. beginning!see process dramatically different Shiny app. wrap custom JavaScript tags$script function (prefer external scripts add code), :demonstrated , developing shiny app basically building website R completely compatible web languages, CSS JavaScript. Sections 4 11 present robust tools concepts extend Shiny.","code":"<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <style type=\"text/css\">\n      p {\n        color: red;\n      }\n    <\/style>\n    <script language=\"javascript\">\n      // displays an alert \n      alert('Click on the Hello World text!');\n      // change text color\n      function changeColor(color){\n        document.getElementById('hello').style.color = \"green\";\n      }\n    <\/script>\n    <title>A title<\/title>\n  <\/head>\n  <body>\n    <!-- onclick attributes applies the JavaScript function changeColor define above -->\n    <p id=\"hello\" onclick=\"changeColor('green')\">Hello World<\/p>\n  <\/body>\n<\/html>\nui <- fluidPage(\n  tags$script(\n    \"alert('Click on the Hello World text!');\n     // change text color\n     function changeColor(color){\n       document.getElementById('hello').style.color = 'green';\n     }\n    \"\n  ),\n  p(id = \"hello\", onclick=\"changeColor('green')\", \"Hello World\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"web-dependencies.html","id":"web-dependencies","chapter":"2 Discover Shiny dependencies","heading":"2 Discover Shiny dependencies","text":"","code":""},{"path":"web-dependencies.html","id":"introduction","chapter":"2 Discover Shiny dependencies","heading":"2.1 Introduction","text":"Shiny creates HTML code us, enough design beautiful working app user interactions. shown earlier, modern web sites apps lot CSS JavaScript hood. Let’s explore elements following exercise.simplest Shiny layout fluidPage. shinyapp predefined Rstudio snippet creates basic app skeleton (type shinyapp new script console RStudio IDE, Figure 2.1).\nFIGURE 2.1: shinyapp code snippet\nadd text inside remove session parameter serve function, \ndon’t use update function:first glance, page contains text. Wait … sure ? Let’s run example open HTML inspector introduced 1.2. Results displayed Figure 2.2.\nFIGURE 2.2: Shiny dependencies\nClick “Open Browser”Open HTML inspectorLocate <head> tagUncollapse search script containing application/html-dependenciesList dependenciesWe see head section (delimited <head><\/head>) Shiny four dependencies:json2jQuery 3.4.1shiny (custom JavaScript CSS)Bootstrap 3.4.1 (JavaScript CSS) + files (html5shiv, respond)","code":"\nlibrary(shiny)\nui <- fluidPage(\n  p(\"Hello World\")\n)\n\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"web-dependencies.html","id":"bootstrap","chapter":"2 Discover Shiny dependencies","heading":"2.2 Bootstrap","text":"According gitstar ranking, unofficial Github star ranking website, Bootstrap comes 7th place (144563 stars) 22th place repositories organization, respectively. first released 2011 welcome fifth version months. provides plug play layout interactive elements tabs, navigation bars, tooltips, popovers many input (forms), rather convenient since avoids writing large amount CSS/JavaScript bring complexity. first release Shiny shipped Bootstrap 2. Shiny currently relies Bootstrap 3 since v0.11, lot efforts made provide Bootstrap 4 compatibility, essentially bootstraplib R package.One great advantage using Bootstrap responsiveness design can work either desktop mobile, even though advanced user likely prefer specialized libraries like Framework7 onsenUI develop native looking apps.Bootstrap 3 relies grid layout system allows efficiently organize content row columns. instance fluidRow column Shiny functions leverage Bootstrap grid control elements displayed page.Shiny attach Bootstrap dependencies? well know fluidPage layout actually hiding lower level function, bootstrapPage. latter also called many high level layout functions instance fixedPage, fillPage navbarPage. simply attaches bootstraplib well Bootstrap compatible theme css files one can pass shinythemes package.interested reader look following script.","code":""},{"path":"web-dependencies.html","id":"jquery-dom-manipulation","chapter":"2 Discover Shiny dependencies","heading":"2.3 jQuery, DOM manipulation","text":"jQuery allows perform DOM manipulation, interacting HMTL elements, user-friendly manner pure JavaScript. step, might familiar JavaScript jQuery. Don’t worry chapter 9 expose basics. comparison select button HTML element technologies. sure ’ll notice jQuery2 intuitive JavaScript.Javascript:jQuery:Interestingly, work progress {jquerylib} provide support shiny future releases.","code":"var btn = document.getElementById('mybutton'); // select the button\nbtn.addEventListener('click', function() { // action + consequences\n  alert('You clicked me!'); // action\n});$('#mybutton').on('click', function() {\n  alert('You clicked me!');\n});"},{"path":"web-dependencies.html","id":"data-formating","chapter":"2 Discover Shiny dependencies","heading":"2.4 Data formating","text":"json2 library handle JSON data format (JavaScript Object Notation). see section 10.2 Chapter 10 R / JS communication involves data exchange given data structures R JS, must way ensure translation. done jsonlite package allows transform JSON objects R objects jsonlite::fromJSON inversely jsonlite::toJSON. Shiny automatically handles process works well time!","code":""},{"path":"web-dependencies.html","id":"custom-dependencies","chapter":"2 Discover Shiny dependencies","heading":"2.5 Custom dependencies","text":"last dependency contains custom JS CSS code necessary Shiny work, :Fine tuning layoutRegistering input/outputHandling every single input/output actionInitializing controlling R/JS communicationHandling alerts/modals/notifications…Part 10.1, 11, 14 20 showcase important elements custom files.: link CSS partThe interested reader look following script.","code":""},{"path":"web-dependencies.html","id":"exercise","chapter":"2 Discover Shiny dependencies","heading":"2.6 Exercise","text":"following exercise, consider complex app slider well plot output.Run app runExample(\"01_hello\")Open HTML inspectorDelete bootstrap.min.css ion.rangeSlider.cssConclusionsTo sump , libraries necessary make Shiny !Chapter 4, explore tools manage HTML dependencies. Chapter 20.4.1, study special case insert dependencies app runtime.Let’s move next part discover internal engine creates HTML code R!","code":""},{"path":"htmltools-overview.html","id":"htmltools-overview","chapter":"3 htmltools overview","heading":"3 htmltools overview","text":"htmltools (Cheng et al. 2021) R package designed :Generate HTML tags RHandle web dependencies (see chapter 4)Historically, htmltools extracted shiny (Chang et al. 2021) able extend , developing custom HTML tags, importing extra dependencies web. ’s , packages many common functions! moment, htmltools user guide, although key package web things!","code":""},{"path":"htmltools-overview.html","id":"writing-html-tags-from-r","chapter":"3 htmltools overview","heading":"3.1 Writing HTML Tags from R","text":"htmltools provides necessary functions write HTML tags introduced Chapter 1.2. R, even convenient raw HTML since opening/closing tag, simple function call instead:Inside function call, named elements become attributes, whereas unnamed elements become children. cases, tags may empty attributes like <input disabled>. case,\ncorresponding R code input(disabled = NA). Since tag functions produce shiny tags, HTML elements, can capture HTML output converting character .character, shown .","code":"\nlibrary(htmltools)\ntag <- div(\"Hello World\")\ntag\nas.character(tag)## [1] \"<div>Hello World<\/div>\""},{"path":"htmltools-overview.html","id":"notations","chapter":"3 htmltools overview","heading":"3.2 Notations","text":"Whether use tags$div div depends tag exported default.\ninstance, use htmltools::div htmltools::nav since nav dedicated function (p, h1, h2, h3, h4, h5, h6, , br, div, span, pre, code, img, strong, em, hr).\nRather prefer htmltools::tags$nav. Alternatively, exists function (shiny htmltools)\ncalled withTags. Wrapping code function allows code like withTags(nav(), ...) instead tags$nav(), thereby omitting tags$ prefixes.\ngather multiple tags together, choose tagList() list(), although HTML output . first shiny.tag.list class addition list. Package like golem (Fay et al. 2020) (see also http://golemverse.org) allows test R object tag list. case, using list cause test fail.","code":""},{"path":"htmltools-overview.html","id":"adding-new-tags","chapter":"3 htmltools overview","heading":"3.3 Adding new tags","text":"tag function allows add extra HTML tags already defined. may use follows:Custom TagGood practice check whether created tag line HTML validation rules.","code":"\ncustomTag <- tag(\"test\", list(class = \"test\", p(\"Custom Tag\")))\nstr(customTag)## List of 3\n##  $ name    : chr \"test\"\n##  $ attribs :List of 1\n##   ..$ class: chr \"test\"\n##  $ children:List of 1\n##   ..$ :List of 3\n##   .. ..$ name    : chr \"p\"\n##   .. ..$ attribs : Named list()\n##   .. ..$ children:List of 1\n##   .. .. ..$ : chr \"Custom Tag\"\n##   .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n##  - attr(*, \"class\")= chr \"shiny.tag\"\ncustomTag"},{"path":"htmltools-overview.html","id":"alternative-way-to-write-tags","chapter":"3 htmltools overview","heading":"3.4 Alternative way to write tags","text":"htmltools comes HTML() function can feed raw HTML:able use tag related functions, following parts.\nTherefore, strongly recommend using R mixing HTML R. Interestingly, \nwant convert raw HTML R code, Shiny App developed Alan\nDipert RStudio, namely html2R, shown Figure 3.1. \nissues, non standard attributes (like data-toggle) correctly processed solutions. save precious time! recent approach developed section 21 internally used develop RinteRface templates.\nFIGURE 3.1: Illustration html2R App\n","code":"\nHTML('<div>Blabla<\/div>')\n# will render exactly like\ndiv(\"Blabla\")\n\n# but their classes are different\nclass(HTML('<div>Blabla<\/div>'))\nclass(div(\"Blabla\"))"},{"path":"htmltools-overview.html","id":"playing-with-tags","chapter":"3 htmltools overview","heading":"3.5 Playing with tags","text":"","code":""},{"path":"htmltools-overview.html","id":"tags-structure","chapter":"3 htmltools overview","heading":"3.5.1 Tags structure","text":"tag defined :name span, div, h1 … tag$nameSome attributes, can accessed tag$attribsChildren, can accessed tag$childrenA class, namely shiny.tagFor instance:modify class second child?working? assigning myTag$children[[2]] second_children, second_children$attribs$class <- \"adult\" modifies class copy original object. Thus :","code":"\n# create the tag\nmyTag <- div(\n  class = \"divclass\", \n  id = \"first\",\n  h1(\"Here comes your baby\"),\n  span(class = \"child\", id = \"baby\", \"Crying\")\n)\n# access its name\nmyTag$name\n# access its attributes (id and class)\nmyTag$attribs\n# access children (returns a list of 2 elements)\nmyTag$children\n# access its class\nclass(myTag)\nsecond_children <- myTag$children[[2]]\nsecond_children$attribs$class <- \"adult\"\nmyTag\n# This is not working ...\nmyTag$children[[2]]$attribs$class <- \"adult\"\nmyTag"},{"path":"htmltools-overview.html","id":"useful-functions-for-tags","chapter":"3 htmltools overview","heading":"3.5.2 Useful functions for tags","text":"htmltools shiny powerful functions seamlessly manipulate tags.","code":""},{"path":"htmltools-overview.html","id":"add-attributes","chapter":"3 htmltools overview","heading":"3.5.2.1 Add attributes","text":"tagAppendAttributes: function allows add new attribute current tag.instance, assuming created div without id attribute:can pass many attributes want, including non standard attributes data-toggle (see Bootstrap 3 tabs instance):","code":"\nmydiv <- div(\"Where is my brain\")\nmydiv <- tagAppendAttributes(mydiv, id = \"here_it_is\")\nmydiv <- tagAppendAttributes(mydiv, list(`data-toggle` = \"tabs\", class = \"myclass\"))\n# even though you could proceed as follows but this requires 2 steps\nmydiv$attribs[[\"data-toggle\"]] <- \"tabs\"\nmydiv$attribs$class <- \"myclass\""},{"path":"htmltools-overview.html","id":"check-if-tag-has-specific-attribute","chapter":"3 htmltools overview","heading":"3.5.2.2 Check if tag has specific attribute","text":"tagHasAttribute: check tag specific attributeIn practice, function useful testing tag elements shown chapter 18.","code":"\n# I want to know if div has a class\nmydiv <- div(class = \"myclass\")\nhas_class <- tagHasAttribute(mydiv, \"class\")\nhas_class\n# if you are familiar with %>%\nhas_class <- mydiv %>% tagHasAttribute(\"class\")\nhas_class"},{"path":"htmltools-overview.html","id":"get-all-attributes","chapter":"3 htmltools overview","heading":"3.5.2.3 Get all attributes","text":"tagGetAttribute: get value targeted attributes, exists, otherwise NULL.","code":"\nmydiv <- div(class = \"test\")\n# returns the class\ntagGetAttribute(mydiv, \"class\")\n# returns NULL\ntagGetAttribute(mydiv, \"id\")"},{"path":"htmltools-overview.html","id":"set-childchildren","chapter":"3 htmltools overview","heading":"3.5.2.4 Set child/children","text":"tagSetChildren allows create children given tag. instance:Notice tagSetChildren removes existing children. see another set functions add children conserving existing ones.","code":"\nmydiv <- div(class = \"parent\", id = \"mother\", \"Not the mama!!!\")\n# mydiv has 1 child \"Not the mama!!!\"\nmydiv \nchildren <- lapply(1:3, span)\nmydiv <- tagSetChildren(mydiv, children)\n# mydiv has 3 children, the first one was removed\nmydiv "},{"path":"htmltools-overview.html","id":"add-child-or-children","chapter":"3 htmltools overview","heading":"3.5.2.5 Add child or children","text":"tagAppendChild tagAppendChildren: add tags existing tag.\nWhereas tagAppendChild takes one tag, can pass list tags tagAppendChildren.","code":"\nmydiv <- div(class = \"parent\", id = \"mother\", \"Not the mama!!!\")\notherTag <- span(\"I am your child\")\nmydiv <- tagAppendChild(mydiv, otherTag)"},{"path":"htmltools-overview.html","id":"build-your-own-functions","chapter":"3 htmltools overview","heading":"3.5.2.6 Build your own functions","text":"might wonder tagRemoveChild tagRemoveAttributes.\nLet’s look tagAppendChildBelow write tagRemoveChild, tag target n position remove list children:defining tagRemoveChild, choose [ instead [[ allow select multiple list elements:Alternatively, also create tagRemoveChildren function. Also notice function raises error provided tag children.tagAppendChild able insert specific position. draft tagInsertChild building top base R append function:","code":"\ntagAppendChild <- function (tag, child) {\n  tag$children[[length(tag$children) + 1]] <- child\n  tag\n}\nmydiv <- div(class = \"parent\", id = \"mother\", \"Not the mama!!!\", span(\"Hey!\"))\n\n# we create the tagRemoveChild function\ntagRemoveChild <- function(tag, n) {\n  # check if the list is empty\n  if (length(tag$children) == 0) {\n    stop(paste(tag$name, \"does not have any children!\"))\n  }\n  tag$children[n] <- NULL\n  tag\n}\nmydiv <- tagRemoveChild(mydiv, 1)\nmydiv\nmydiv <- div(class = \"parent\", id = \"mother\", \"Not the mama!!!\", \"Hey!\")\n# fails\n`[[`(mydiv$children, c(1, 2))\n# works\n`[`(mydiv$children, c(1, 2))\ntagInsertChild <- function(tag, child, position) {\n  tag$children <- append(tag$children, list(child), position - 1)\n  tag\n}\n\ntagInsertChild(p(span(\"hello\")), a(), 1)\ntagInsertChild(p(span(\"hello\")), a(), 2)"},{"path":"htmltools-overview.html","id":"other-functions","chapter":"3 htmltools overview","heading":"3.5.3 Other functions","text":"golem package written thinkr contains neat functions edit tags.Particularly, tagRemoveAttributes:","code":"\ntagRemoveAttributes <- function(tag, ...) {\n  attrs <- as.character(list(...))\n  for (i in seq_along(attrs)) {\n    tag$attribs[[ attrs[i] ]] <- NULL\n  }\n  tag\n}\nmydiv <- div(class = \"test\", id = \"coucou\", \"Hello\")\ntagRemoveAttributes(mydiv, \"class\", \"id\")"},{"path":"htmltools-overview.html","id":"conditionally-set-attributes","chapter":"3 htmltools overview","heading":"3.5.4 Conditionally set attributes","text":"Sometimes, want set attributes specific conditions.example fail style=\"color: \" clean. may use conditions:example, style won’t available color specified.","code":"\nmy_button <- function(color = NULL) {\n  tags$button( \n    style = paste(\"color:\", color),\n    p(\"Hello\")\n  )\n}\n\nmy_button()\nmy_button <- function(color = NULL) {\n  tags$button( \n    style = if (!is.null(color)) paste(\"color:\", color),\n    p(\"Hello\")\n  )\n}\n\nmy_button(\"blue\")\nmy_button()"},{"path":"htmltools-overview.html","id":"using","chapter":"3 htmltools overview","heading":"3.5.5 Using %>%","text":"lot manipulation tag, don’t need create intermediate\nobjects, good idea use %>% magrittr:pipe syntax overall easier follow read.","code":"\ndiv(class = \"cl\", h1(\"Hello\")) %>% \n  tagAppendAttributes(id = \"myid\") %>%\n  tagAppendChild(p(\"some extra text here!\"))"},{"path":"htmltools-overview.html","id":"programmatically-create-children-elements","chapter":"3 htmltools overview","heading":"3.5.6 Programmatically create children elements","text":"Assume want create tag three children inside:structure correct imagine create 1000 span fancier tag. previous approach consistent DRY programming. lapply function useful (purrr map family):","code":"\ndiv(\n  span(1),\n  span(2),\n  span(3),\n  span(4),\n  span(5)\n)\n# base R\ndiv(lapply(1:5, function(i) span(i)))\n# purrr + %>%\nmap(1:5, function(i) span(i)) %>% div()"},{"path":"htmltools-overview.html","id":"practical-examples","chapter":"3 htmltools overview","heading":"3.6 Practical examples","text":"give concrete example customize tags real life. exists \nnice RPG HTML template, rpgui. provides\nnecessary elements get started developing nice RPG looking user interfaces, depicted Figure 3.2.\nFIGURE 3.2: rpgui select input\nfollowing, consider select input, exactly \nstructure original shiny tag. However, convenient reuse shiny function\nlimit amount work. therefore start write custom input:According rpgui documentation, select tag composed following HTML elements:Adding label tag top slider, like get:compare rpgSelect function:shown output, exactly matching:outer div class.label class.input tag wrapped inside div container. .input tag rpgui-dropdown rpgui-list class,\ndepending size value.fix first problem target outer tag (selectTag), tag returned rpgSelect function. second row cleans label class. third row removes extra outer div keeps children, corresponding input tag. last instruction ensure set appropriate class, depending size value:final version shown :","code":"\nrpgSelect <- function(inputId, label, choices, selected = NULL,\n                      multiple = FALSE, size = NULL) {\n  shiny::selectInput(\n    inputId,\n    label,\n    choices,\n    selected,\n    multiple,\n    selectize = FALSE,\n    width = NULL,\n    size\n  )\n}<select class=\"rpgui-dropdown\">\n    <option value=\"option1\">option1<\/option>\n    <option value=\"option2\">option2<\/option>\n    ...\n<\/select><div>\n  <label id=\"variable-label\" for=\"variable\">Variable:<\/label>\n  <select id=\"variable\" class=\"rpgui-dropdown\"><option value=\"cyl\" selected>Cylinders<\/option>\n    <option value=\"am\">Transmission<\/option>\n    <option value=\"gear\">Gears<\/option>\n  <\/select>\n<\/div>\nrpgSelect(\n  \"variable\", \n  \"Variable:\",\n  c(\"Cylinders\" = \"cyl\",\n    \"Transmission\" = \"am\",\n    \"Gears\" = \"gear\")\n) %>% as.character()## [1] \"<div class=\\\"form-group shiny-input-container\\\">\\n  <label class=\\\"control-label\\\" id=\\\"variable-label\\\" for=\\\"variable\\\">Variable:<\/label>\\n  <div>\\n    <select id=\\\"variable\\\" class=\\\"form-control\\\"><option value=\\\"cyl\\\" selected>Cylinders<\/option>\\n<option value=\\\"am\\\">Transmission<\/option>\\n<option value=\\\"gear\\\">Gears<\/option><\/select>\\n  <\/div>\\n<\/div>\"\n# Modify tag\nselectTag$attribs$class <- NULL\n# Clean extra label class\nselectTag$children[[1]]$attribs$class <- NULL\n# Remove extra outer div\nselectTag$children[[2]] <- selectTag$children[[2]]$children[[1]]\n\n# Add good class for rppgui binding\nselectTag$children[[2]]$attribs$class <- if (is.null(size)) {\n  \"rpgui-dropdown\"\n} else {\n  \"rpgui-list\"\n}\nrpgSelect <- function(inputId, label, choices, selected = NULL,\n                      multiple = FALSE, size = NULL) {\n  selectTag <- shiny::selectInput(\n    inputId,\n    label,\n    choices,\n    selected,\n    multiple,\n    selectize = FALSE,\n    width = NULL,\n    size\n  )\n\n  # Modify tag\n  selectTag$attribs$class <- NULL\n  # Clean extra label class\n  selectTag$children[[1]]$attribs$class <- NULL\n  # Remove extra outer div\n  selectTag$children[[2]] <- selectTag$children[[2]]$children[[1]]\n\n  # Add good class for rppgui binding\n  selectTag$children[[2]]$attribs$class <- if (is.null(size)) {\n    \"rpgui-dropdown\"\n  } else {\n    \"rpgui-list\"\n  }\n\n  selectTag\n}\n\nrpgSelect(\n  \"variable\", \n  \"Variable:\",\n  c(\"Cylinders\" = \"cyl\",\n    \"Transmission\" = \"am\",\n    \"Gears\" = \"gear\")\n) %>% as.character()## [1] \"<div>\\n  <label id=\\\"variable-label\\\" for=\\\"variable\\\">Variable:<\/label>\\n  <select id=\\\"variable\\\" class=\\\"rpgui-dropdown\\\"><option value=\\\"cyl\\\" selected>Cylinders<\/option>\\n<option value=\\\"am\\\">Transmission<\/option>\\n<option value=\\\"gear\\\">Gears<\/option><\/select>\\n<\/div>\""},{"path":"htmltools-overview.html","id":"exercises","chapter":"3 htmltools overview","heading":"3.7 Exercises","text":"","code":""},{"path":"htmltools-overview.html","id":"exercise-1-tags-structure-5-minutes","chapter":"3 htmltools overview","heading":"3.7.1 Exercise 1: tags structure (5 minutes)","text":"Consider following shiny tag:Inspect structure. Hint: may use str.Access class using tagGetAttribute another method choice.Modify first child class custom class.","code":"\nmyTag <- a(\n  class = \"btn btn-large\",\n  type = \"button\",\n  span(class = \"child1\", id = \"super-span\", 1),\n  span(class = \"child2\", 2)\n)\n\nmyTag"},{"path":"htmltools-overview.html","id":"exercise-2-modifiying-tags-5-minutes","chapter":"3 htmltools overview","heading":"3.7.2 Exercise 2: modifiying tags (5 minutes)","text":"Let us consider following tag:(may chain functions %>%)Replace unique child (href = \"http://www.google.com\", \"click !\"). Hint: tagSetChildren friend.Add 10 span. Hint: tags may programmatically generated lapply purrr::map.","code":"\ntemp <- div(\"Hello World\")"},{"path":"htmltools-dependencies.html","id":"htmltools-dependencies","chapter":"4 Dependency utilities","heading":"4 Dependency utilities","text":"creating new template, import custom HTML dependencies available shiny. Fortunately, problem htmltools (Cheng et al. 2021)!","code":""},{"path":"htmltools-dependencies.html","id":"the-dirty-approach","chapter":"4 Dependency utilities","heading":"4.1 The dirty approach","text":"Let’s consider following example. Since Bootstrap one popular HTML/CSS/JS framework develop websites web apps, want include bootstrap 4 card shiny app. case study taken RStudio Community question. naive approach include HTML code directly app code. approach dirty since easily re-usable others.\nFIGURE 4.1: Attempt display Bootstrap 4 card without dependencies\ndepicted Figure 4.1, nothing displayed expected since shiny (Chang et al. 2021) contain Bootstrap 4 dependencies card bootstrap 4 element. Don’t panic! load necessary css display card (required, include javascript well). use either includeCSS(), tags$head(tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"custom.css\")), described shiny documentation . Web development best practice recommend point external file rather including CSS head directly tag (inline CSS). example, use CDN (content delivery network) local file located www/ folder:card may seem ugly least displayed shown Figure 4.2.\nFIGURE 4.2: Bootstrap 4 card within simple app\n","code":"\nlibrary(shiny)\n# we create the card function before\nmy_card <- function(...) {\n  withTags(\n    div(\n      class = \"card border-success mb-3\",\n      div(class = \"card-header bg-transparent border-success\"),\n      div(\n        class = \"card-body text-success\",\n        h3(class = \"card-title\", \"title\"),\n        p(class = \"card-text\", ...)\n      ),\n      div(class = \"card-footer bg-transparent border-success\", \"footer\")\n    )\n  )\n}\n\n# we build our app\nshinyApp(\n  ui = fluidPage(\n    fluidRow(\n      column(\n        width = 6,\n        align = \"center\",\n        br(),\n        my_card(\"Card Content\")\n      )\n    )\n  ),\n  server = function(input, output) {}\n)\nshinyApp(\n  ui = fluidPage(\n    # load the css code\n    tags$head(\n      tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\")\n    ),\n    fluidRow(\n      column(\n        width = 6,\n        align = \"center\",\n        br(),\n        my_card(\"Card Content\")\n      )\n    )\n  ),\n  server = function(input, output) {}\n)"},{"path":"htmltools-dependencies.html","id":"the-clean-approach","chapter":"4 Dependency utilities","heading":"4.2 The clean approach","text":"best approach consists leveraging htmlDependency attachDependencies functions htmltools.\nhtmlDependency function takes following main parameters:dependency namethe version (useful remember version built upon)path dependency (can CDN local folder)script stylesheet respectively pass css scriptsIf pointing CDN use local files, crucial wrap htmlDependency function since path determined run time package builds. means developing package dependencies, forgetting step might prevent users get dependency working machine (differences Unix Windows OS paths clearly good example).create card tag give bootstrap 4 dependency attachDependencies function. recent version htmltools, may simply use tagList(tag, deps) instead. Importantly, attachDependencies append parameter FALSE default. Ensure set TRUE want keep already attached dependencies!finally run app:approach, can develop package custom dependencies people\nuse need add custom elements shiny.","code":"\n# handle dependency\ncard_css <- \"bootstrap.min.css\"\nbs4_card_dep <- function() {\n  htmlDependency(\n    name = \"bs4_card\",\n    version = \"1.0\",\n    src = c(href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/\"),\n    stylesheet = card_css\n  )\n}\n# create the card\nmy_card <- function(...) {\n  cardTag <- withTags(\n    div(\n      class = \"card border-success mb-3\",\n      div(class = \"card-header bg-transparent border-success\"),\n      div(\n        class = \"card-body text-success\",\n        h3(class = \"card-title\", \"title\"),\n        p(class = \"card-text\", ...)\n      ),\n      div(class = \"card-footer bg-transparent border-success\", \"footer\")\n    )\n  )\n  \n  # attach dependencies (old way)\n  # htmltools::attachDependencies(cardTag, bs4_card_dep())\n  \n  # simpler way\n  tagList(cardTag, bs4_card_dep())\n  \n}\n# run shiny app \nui <- fluidPage(\n  title = \"Hello Shiny!\",\n  fluidRow(\n    column(\n      width = 6,\n      align = \"center\",\n      br(),\n      my_card(\"Card Content\")\n    )\n  )\n)\n\nshinyApp(ui, server = function(input, output) { })"},{"path":"htmltools-dependencies.html","id":"htmldeps-import","chapter":"4 Dependency utilities","heading":"4.3 Importing HTML dependencies from other packages","text":"shinydashboard (Chang Borges Ribeiro 2018) package helps design dashboards shiny. following, like integrate box component classic Shiny App (without dashboard layout). However, try include box tag, notice nothing displayed since shiny shinydashboard dependencies. htmltools contains function, namely findDependencies looks dependencies attached tag. going , let’s define basic skeleton dashboard:numerous details associated shinydashboard go . interested learning , please help . key point main wrapper function dashboardPage. fluidPage another wrapper function already familiar . apply findDependencies dashboardPage:deps list containing four dependencies:Font Awesome handles icons. Interestingly, dependency provided dashboardHeader, especially shiny::icon(\"bars\") collapses left sidebarBootstrap main HTML/CSS/JS template. Importantly,\nplease note version 3.3.7, whereas current 4.5.2AdminLTE dependency containing HTML/CSS/JS related admin template.\nclosely linked Bootstrap 3shinydashboard, CSS javascript necessary dashboard work properly. practice,\nintegrating custom HTML templates shiny usually work box many reasons modifications necessary. instance, list changes optimize adminLTE shiny. major consequences template maintenance upgrading another AdminLTE version require modify elements hand. may understand template maintainers quite often reluctant upgrade dependencies might brake whole package, quite easily., attach dependencies box tagList, shown . Notice custom box contain parameters official shinydashboard version, actually ok time. better contrast body,\nadd custom color background, depicted Figure 4.3:\nFIGURE 4.3: AdminLTE2 box inside classic shiny app\nnow limitless possibilities! Interestingly, approach basis shinyWidgets useBs4Dash function related tools.","code":"\nlibrary(shinydashboard)\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(),\n    dashboardSidebar(),\n    dashboardBody(),\n    title = \"Dashboard example\"\n  ),\n  server = function(input, output) { }\n)\nlibrary(htmltools)\ndeps <- findDependencies(\n  dashboardPage(\n    header = dashboardHeader(), \n    sidebar = dashboardSidebar(), \n    body = dashboardBody()\n  )\n)\ndeps## [[1]]\n## List of 10\n##  $ name      : chr \"font-awesome\"\n##  $ version   : chr \"5.13.0\"\n##  $ src       :List of 1\n##   ..$ file: chr \"www/shared/fontawesome\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: chr [1:2] \"css/all.min.css\" \"css/v4-shims.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : chr \"shiny\"\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[2]]\n## List of 10\n##  $ name      : chr \"font-awesome\"\n##  $ version   : chr \"5.13.0\"\n##  $ src       :List of 1\n##   ..$ file: chr \"www/shared/fontawesome\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: chr [1:2] \"css/all.min.css\" \"css/v4-shims.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : chr \"shiny\"\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[3]]\n## List of 10\n##  $ name      : chr \"bootstrap\"\n##  $ version   : chr \"3.4.1\"\n##  $ src       :List of 2\n##   ..$ href: chr \"shared/bootstrap\"\n##   ..$ file: chr \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shiny/www/shared/bootstrap\"\n##  $ meta      :List of 1\n##   ..$ viewport: chr \"width=device-width, initial-scale=1\"\n##  $ script    : chr [1:2] \"js/bootstrap.min.js\" \"accessibility/js/bootstrap-accessibility.min.js\"\n##  $ stylesheet: chr [1:2] \"css/bootstrap.min.css\" \"accessibility/css/bootstrap-accessibility.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[4]]\n## List of 10\n##  $ name      : chr \"options\"\n##  $ version   : chr \"2.0.0.9000\"\n##  $ src       :List of 1\n##   ..$ file: chr \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shinydashboardPlus/shinydashboardPlus-2.0.0\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: NULL\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[5]]\n## List of 10\n##  $ name      : chr \"shinydashboardPlus\"\n##  $ version   : chr \"2.0.0.9000\"\n##  $ src       :List of 1\n##   ..$ file: chr \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shinydashboardPlus/shinydashboardPlus-2.0.0\"\n##  $ meta      : NULL\n##  $ script    : chr [1:2] \"js/app.min.js\" \"js/shinydashboardPlus.min.js\"\n##  $ stylesheet: chr [1:3] \"css/AdminLTE.min.css\" \"css/_all-skins.min.css\" \"css/custom.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[6]]\n## List of 10\n##  $ name      : chr \"shinydashboard\"\n##  $ version   : chr \"0.7.1\"\n##  $ src       :List of 1\n##   ..$ file: chr \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shinydashboard\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: chr \"shinydashboard.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\nmy_box <- function(title, status) {\n  tagList(box(title = title, status = status), deps)\n}\nui <- fluidPage(\n  tags$style(\"body { background-color: gainsboro; }\"),\n  titlePanel(\"Shiny with a box\"),\n  my_box(title = \"My box\", status = \"danger\"),\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"htmltools-dependencies.html","id":"suppress-dependencies","chapter":"4 Dependency utilities","heading":"4.4 Suppress dependencies","text":"rare cases, may need remove existing conflicting dependency. suppressDependencies function allows users perform . instance, shiny.semantic built top \nsemantic ui compatible Bootstrap, illustrated Figure 4.4.\nFIGURE 4.4: Deletion Bootstrap inside semanticPage\n, remove AdminLTE2 dependency\nshinydashboard page nothing displayed (expected):","code":"\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(),\n    dashboardSidebar(),\n    dashboardBody(suppressDependencies(\"AdminLTE\")),\n    title = \"Dashboard example\"\n  ),\n  server = function(input, output) { }\n)"},{"path":"htmltools-dependencies.html","id":"resolve-dependencies","chapter":"4 Dependency utilities","heading":"4.5 Resolve dependencies","text":"Imagine situation like use last version fontawesome icons, currently 5.15.1 according jsdelivr. recall shiny already provides version 5.13.0 icon function. Including another version probably cause conflicts like avoid case. htmltools resolveDependencies tool consists removing redundant element, taking last version dependencies names identical.Combining findDependencies, suppressDependencies resolveDependencies gives great power successfully manage dependencies!","code":"\nnew_icon_dep <- htmlDependency(\n  name = \"font-awesome\", \n  version = \"5.15.1\", \n  src = c(href = \"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.1/\"),\n  stylesheet = \"css/all.min.css\"\n)\n\nicon_deps <- list(new_icon_dep, findDependencies(shiny::icon(\"th\"))[[1]])\n\nresolveDependencies(icon_deps)## [[1]]\n## List of 10\n##  $ name      : chr \"font-awesome\"\n##  $ version   : chr \"5.15.1\"\n##  $ src       :List of 1\n##   ..$ href: chr \"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.1/\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: chr \"css/all.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\""},{"path":"htmltools-dependencies.html","id":"insert-custom-script-in-the-head","chapter":"4 Dependency utilities","heading":"4.6 Insert Custom script in the head","text":"shinydashboardPlus, users can fine tune dashboard behavior simple option parameter passed dashboardPagePlus. sidebarExpandOnHover capability consists expanding sidebar hovering part options, yet exposed shinydashboard. hood, options gathered (nested) list, converted JSON eventually generate JavaScript configuration file. now, saw two ways include scripts stylesheets. include arbitrary script (defined fly user app starts) dependency?htmlDependency head parameter allowing pass lines HTML insert document head. can easily imagine passing string containing script. , first construct options list. , create dependency: notice since src mandatory, give value use script stylesheet arguments.invite reader run example involving shinydashboardPlus, open HTML inspector look head.According AdminLTE documentation, global options must passed loading app.min.js script. Creating “dummy” dependency allowed us isolate script insert app.min.js script (contained another dependency), shown Figure 4.5.\nFIGURE 4.5: Insert arbitrary script head\n","code":"\noptions <- list(\n  sidebarExpandOnHover = TRUE, \n  boxWidgetSelectors = list(\n    remove = '[data-widget=\"remove\"]'\n  )\n)\n\nconfig_script <- function() {\n  htmlDependency(\n    \"options\",\n    as.character(utils::packageVersion(\"shinydashboardPlus\")),\n    src = c(file = system.file(\"shinydashboardPlus-0.6.0\", package = \"shinydashboardPlus\")),\n    head = if (!is.null(options)) {\n      paste0(\n        \"<script>var AdminLTEOptions = \", \n        jsonlite::toJSON(\n          options, \n          auto_unbox = TRUE,\n          pretty = TRUE\n        ),\n        \";<\/script>\"\n      )\n    }\n  )\n}\n\n# show the script\nprint(HTML(config_script()$head))## <script>var AdminLTEOptions = {\n##   \"sidebarExpandOnHover\": true,\n##   \"boxWidgetSelectors\": {\n##     \"remove\": \"[data-widget=\\\"remove\\\"]\"\n##   }\n## };<\/script>\n shinyApp(\n   ui = dashboardPagePlus(\n     collapse_sidebar = TRUE,\n     options = options,\n     header = dashboardHeaderPlus(\n      enable_rightsidebar = TRUE,\n      rightSidebarIcon = \"gears\"\n     ),\n     sidebar = dashboardSidebar(),\n     body = dashboardBody(),\n     rightsidebar = rightSidebar(),\n     title = \"DashboardPage\"\n   ),\n   server = function(input, output) { }\n )"},{"path":"beautify-css.html","id":"beautify-css","chapter":"5 CSS for Shiny","heading":"5 CSS for Shiny","text":"first CSS version released 1996, 5 years later HTML. CSS appeared, developers styled pages specific tags like font, eventually made HTML code hard maintain. current version CSS 3. nowadays web browsers support CSS, case beginning!","code":""},{"path":"beautify-css.html","id":"how-to-include-css","chapter":"5 CSS for Shiny","heading":"5.1 How to include CSS?","text":"3 ways include CSS web page:Point external file <link rel=\"stylesheet\" href=\"style.css\"/>Insert style headInsert style tag level, style attributeI recommend follow first method much can modify CSS one place!end day, CSS script look like example:methods apply shiny:External CSS file tags$link(rel = \"stylesheet\", type=\"text/css\", href=\"www/style.css\").Internal CSS tags$head(tags$style(\"p {color: red;}\")).Inline CSS p(style = \"color:red;\", \"Red text\").However, correctly followed previous part HTML dependencies, best way Shiny create dependency, attach tag:Following method, make file accessible server, thereby easing debugging process. apply method? Well, make lot sense tiny CSS modifications, use one 3 methods listed .","code":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" />\n<link rel=\"stylesheet\" href=\"style.css\" />\n<title>CSS<\/title>\n<style type=\"text/css\">\np {\ncolor: red;  \n}\n<\/style>\n<\/head>\n\n<body>\n<p style=\"color: red\">Hello World<\/p>\n<p>Some text<\/p>\n<div>Plop<\/div>\n<\/body>\n<\/html>tag1 {\nproperty1: value1;\nproperty2: value2;\n}\n\ntag2 {\nproperty1: value1;\n}\ncss_dep <- function() {\n  htmlDependency(\n    name = \"css dep\",\n    version = \"1.0\",\n    src = path_to_css,\n    stylesheet = filename\n  )\n}\n\ntagList(tag, css_dep)"},{"path":"beautify-css.html","id":"css-selectors","chapter":"5 CSS for Shiny","heading":"5.2 CSS selectors","text":"","code":""},{"path":"beautify-css.html","id":"basics","chapter":"5 CSS for Shiny","heading":"5.2.1 Basics","text":"apply CSS, select tag , choose property want change give value:instance, set color blue p tag, :Now, apply property multiple tags? separate tags comma:See example Shiny app:","code":"selector {\nproperty: value;\n}p {\ncolor: red;  \n}p, div {\ncolor: red;  \n}\nui <- fluidPage(\n  tags$style(\n    \"p, div { \n      color: red;\n    }\"\n  ),\n  p(\"Hello World\"),\n  div(\"A block\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"select-by-class-id","chapter":"5 CSS for Shiny","heading":"5.2.2 Select by class, id","text":"method shown applies selected tags. necessarily want probably like filter. first add class first p tag. Best practice give meaningful name.CSS side, prefix class ., shown :style unique elements, may use id:another example, result shown Figure 5.1:\nFIGURE 5.1: Select class id\n","code":"<p class=\"first-p\"><\/p>.first-p {\ncolor: red;  \n}#element {\ncolor: red;\n}\nui <- fluidPage(\n  tags$style(\n    \".first-p { \n      color: red;\n    }\n    #element {\n      color: red;\n    }\n    \"\n  ),\n  p(class = \"first-p\", \"Hello World\"),\n  p(\"Another text\"),\n  div(id = \"element\", \"A block\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"apply-css-to-single-elements","chapter":"5 CSS for Shiny","heading":"5.2.3 Apply CSS to single elements","text":"Let’s consider following example:change color World word? select whole p element.\nexist specific tags like div span can apply. stated @chapter(web-intro-html), span may used inside containers surround words:","code":"<p>Hello World! What's up?<\/p><p>Hello <span class=\"custom\">World<\/span>! What's up?<\/p>.custom {\ncolor: red;\n}"},{"path":"beautify-css.html","id":"advanced-selectors","chapter":"5 CSS for Shiny","heading":"5.2.4 Advanced selectors","text":"now, ’ seen select element tag name, class id. Yet, enough. select tag?","code":"<a data-toggle=\"dropdown\">Tag<\/a>"},{"path":"beautify-css.html","id":"select-nested-tags","chapter":"5 CSS for Shiny","heading":"5.2.4.1 Select nested tags","text":"consider 2 HTML tags. want first element red text.\ncan’t select class .nav-link also style second element!idea select first tag, li, select ’s child :Shiny navbarPage template composed navigation items li , may easily modify:\nFIGURE 5.2: Style nav link elements\n’ll notice tabsetPanel tabs also modified, exactly wanted, shown Figure 5.2. main difference navbarPage tabsetPanel class held menu wrapper ul:nav navbar-nav navbarPage nav nav-tabs tabsetPanel.\nisolate navbarPage tabs, improve previous selector:, ’ll look link elements inside container navbar-nav class.final result depicted Figure 5.3.\nFIGURE 5.3: Style specific navbar nav link elements\n","code":"<li class=\"nav-item\">\n<a class=\"nav-link\" href=\"#\">Link<\/a>\n<\/li>\n\n<a class=\"nav-link\" href=\"#\">Link<\/a>li a {\ncolor: red;\n}\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      \"li a {\n        font-size: 20px;\n        font-weight: bold;\n      }\n    \"\n    ),\n    tabsetPanel(\n      tabPanel(\"Plot\"),\n      tabPanel(\"Summary\"),\n      tabPanel(\"Table\")\n    )\n  ),\n  tabPanel(\"Summary\"),\n  tabPanel(\"Table\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)\nas.character(navbarPage(tabPanel(\"test\")))## [1] \"<nav class=\\\"navbar navbar-default navbar-static-top\\\" role=\\\"navigation\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"navbar-header\\\">\\n      <span class=\\\"navbar-brand\\\">\\n        <div class=\\\"tab-pane\\\" title=\\\"test\\\" data-value=\\\"test\\\"><\/div>\\n      <\/span>\\n    <\/div>\\n    <ul class=\\\"nav navbar-nav\\\" data-tabsetid=\\\"2165\\\"><\/ul>\\n  <\/div>\\n<\/nav>\\n<div class=\\\"container-fluid\\\">\\n  <div class=\\\"tab-content\\\" data-tabsetid=\\\"2165\\\"><\/div>\\n<\/div>\"\nas.character(tabsetPanel(tabPanel(\"test\")))## [1] \"<div class=\\\"tabbable\\\">\\n  <ul class=\\\"nav nav-tabs\\\" data-tabsetid=\\\"7524\\\">\\n    <li class=\\\"nav-item\\\">\\n      <a href=\\\"#\\\" data-toggle=\\\"tab\\\" data-value=\\\"test\\\" class=\\\"nav-link active\\\" data-target=\\\"#tab-7524-1\\\">test<\/a>\\n    <\/li>\\n  <\/ul>\\n  <div class=\\\"tab-content\\\" data-tabsetid=\\\"7524\\\">\\n    <div class=\\\"tab-pane active\\\" data-value=\\\"test\\\" id=\\\"tab-7524-1\\\"><\/div>\\n  <\/div>\\n<\/div>\".navbar-nav li a {\nfont-size: 20px;\nfont-weight: bold;\n}\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      \".navbar-nav li a {\n        font-size: 20px;\n        font-weight: bold;\n      }\n    \"\n    ),\n    tabsetPanel(\n      tabPanel(\"Plot\"),\n      tabPanel(\"Summary\"),\n      tabPanel(\"Table\")\n    )\n  ),\n  tabPanel(\"Summary\"),\n  tabPanel(\"Table\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"select-by-attributes","chapter":"5 CSS for Shiny","heading":"5.2.4.2 Select by attributes","text":"select attribute, use tag[attribute]CSS code, select tags:following code, select first tag:reason exactly match dropdown value!less specific:* checks whether word dropdown position. may use ^ $ like regular expressions check value starts ends specified word, respectively.","code":"<a data-toggle=\"dropdown\">Tag<\/a>\n<a data-toggle=\"my dropdown\">Tag<\/a>\n<a data-toggle=\"whatever\">Tag<\/a>a[data-toggle] {\ncolor: red;\n}a[data-toggle=\"dropdown\"] {\ncolor: red;\n}a[data-toggle*=\"dropdown\"] {\ncolor: red;\n}"},{"path":"beautify-css.html","id":"other-selectors","chapter":"5 CSS for Shiny","heading":"5.2.4.3 Other selectors","text":"","code":""},{"path":"beautify-css.html","id":"direct-descendants","chapter":"5 CSS for Shiny","heading":"5.2.4.4 Direct descendants","text":"Let’s consider navbarPage nested navigation. accomplished navbarMenu function:resulting HTML code follow:see two ul menus multiple li inside. Applying previous CSS selector depicted Figure 5.4 selects links.\nFIGURE 5.4: Style navbar nav link elements\nwant select direct children outer menu (meaning exclude inner menu links)? Using > can select direct children descendant contain grand-children.Result displayed Figure 5.5:\nFIGURE 5.5: Style direct children navbar nav link elements\nWell, want even specific get first nav link element? ’ll introduce pseudo classes.","code":"\nnavbarPage(\"App Title\",\n           tabPanel(\"Plot\"),\n           navbarMenu(\"More\",\n                      tabPanel(\"Summary\"),\n                      \"----\",\n                      \"Section header\",\n                      tabPanel(\"Table\")\n           )\n)<ul class=\"nav navbar-nav\" data-tabsetid=\"5879\">\n<li class=\"active\">\n<a href=\"#tab-5879-1\" data-toggle=\"tab\" data-value=\"Plot\">Plot<\/a>\n<\/li>\n<li class=\"dropdown\">\n<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" data-value=\"More\">\nMore\n<b class=\"caret\"><\/b>\n<\/a>\n<ul class=\"dropdown-menu\" data-tabsetid=\"7141\">\n<li>\n<a href=\"#tab-7141-1\" data-toggle=\"tab\" data-value=\"Summary\">Summary<\/a>\n<\/li>\n<li class=\"divider\"><\/li>\n<li class=\"dropdown-header\">Section header<\/li>\n<li>\n<a href=\"#tab-7141-4\" data-toggle=\"tab\" data-value=\"Table\">Table<\/a>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>.navbar-nav > li > a {\nfont-size: 20px;\nfont-weight: bold;\n}\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      HTML(\n        \".navbar-nav > li > a {\n          font-size: 20px;\n          font-weight: bold;\n        }\n        \"\n      )\n    )\n  ),\n  navbarMenu(\"More\",\n             tabPanel(\"Summary\"),\n             \"----\",\n             \"Section header\",\n             tabPanel(\"Table\")\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"pseudo-classes","chapter":"5 CSS for Shiny","heading":"5.2.4.4.1 Pseudo-classes","text":"pseudo class starts : symbol. instance, :active styles active links, button:disabled applies disabled buttons, …exists many pseudo class types, particularly structural ones. useful select specific children like element:first-child. Going back navbarPage example, refine CSS selector adding :first-child li element want select first item:expected, first link styled, demonstrated Figure 5.6!\nFIGURE 5.6: Style first navbar nav link element\n","code":"a:active {\n\n}\n\nbutton:disabled {\n\n}\n\ncheckbox:checked {\n\n}.navbar-nav > li:first-child > a {\nfont-size: 20px;\nfont-weight: bold;\n}\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      HTML(\n        \".navbar-nav > li:first-child > a {\n          font-size: 20px;\n          font-weight: bold;\n        }\n        \"\n      )\n    )\n  ),\n  navbarMenu(\"More\",\n             tabPanel(\"Summary\"),\n             \"----\",\n             \"Section header\",\n             tabPanel(\"Table\")\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"pseudo-elements","chapter":"5 CSS for Shiny","heading":"5.2.4.4.2 Pseudo-elements","text":"Pseudo elements preceded ::. One famous ones ::::respectively apply selected element.instance .navbar-nav > li:first-child > ::insert element first navbar link.\nFIGURE 5.7: Add pseudo-element\n","code":"a::before {\n\n}\n\na::after {\n\n}\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      HTML(\n        \".navbar-nav > li:first-child > a {\n                  font-size: 20px;\n                  font-weight: bold;\n                } \n                .navbar-nav > li:first-child > a::before {\n                  content: '✌️'\n                }\n                \"\n      )\n    )\n  ),\n  navbarMenu(\n    \"More\",\n    tabPanel(\"Summary\"),\n    \"----\",\n    \"Section header\",\n    tabPanel(\"Table\")\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"modify-css-with-the-html-inspector","chapter":"5 CSS for Shiny","heading":"5.3 Modify CSS with the HTML inspector","text":"","code":""},{"path":"beautify-css.html","id":"add-inline-properties","chapter":"5 CSS for Shiny","heading":"5.3.1 Add inline properties","text":"Run following app:Right click p element open inspector. Styles tab, notice element.style section. define inline new CSS rules selected item.Right click p element open inspector. Styles tab, notice element.style section. define inline new CSS rules selected item.Let’s add 2 rules clicking inside element.style container:Let’s add 2 rules clicking inside element.style container:border-style: dashed. Indicates want box dashed borderborder-color: .... set border colorAfter typing enter, inline CSS automatically added tag element.probably noticed auto suggestion feature typing property, shown Figure 5.8.\nFIGURE 5.8: Edit CSS Chrome DevTools\n","code":"\nui <- fluidPage(\n  tags$style(\"p { color: red;}\"),\n  p(\"Hello World\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"view-local-changes","chapter":"5 CSS for Shiny","heading":"5.3.2 View local changes","text":"Whenever playing around web page style shiny app, may good overview changes satisfied new design.Run previous shiny app example open inspectorIn Styles tab, add new CSS properties first p element set rulesOnce done press enter click file name located top-right corner property boxThis opens Sources tab. left sidebar, right click file name (index) select Local ModificationsThis opens Git like diff panel called Changes can review change see previous values. refresh page, loose every local change, unless persistent authoring feature active\nFIGURE 5.9: Review CSS changes\nget deeper understanding different CSS options please refer Google documentation.","code":""},{"path":"beautify-css.html","id":"css-in-action","chapter":"5 CSS for Shiny","heading":"5.4 CSS in action","text":"review commonly used CSS properties text styling, shadows, color background color, …","code":""},{"path":"beautify-css.html","id":"text-styling","chapter":"5 CSS for Shiny","heading":"5.4.1 Text Styling","text":"","code":""},{"path":"beautify-css.html","id":"polices","chapter":"5 CSS for Shiny","heading":"5.4.1.1 Polices","text":"controls text appearance. police may changed like :practice, enter multiple police values, case end user \npolice. last values composed generic polices like serif monospace.\ninstance, Bootstrap 3 powers Shiny utilizes default sans-serif police. neat tool inspect current text polices HTML inspector CSS Overview tab, shown Figure 5.10.\nFIGURE 5.10: Overview font properties\nCustom polices may downloaded @font-face prerequisites make work properly:files format must correctly handled end user web browsers. currently .ttf (work almost web browser), .woff (work almost web browser), .svg (iPhone iPad), .eot (IE ) .otf (don’t work IE).files downloaded may take time.careful copyright! polices open source.Importantly, police files must accessible CSS file called . another example, code means fonts folder located one level CSS file:","code":"tag {\n  font-family: mypolice1, mypolice2, ..., serif;\n}@font-face {\n  font-family: 'customPolice';\n  src: url('customPolice.ttf'),\n         url('customPolice.woff');\n}@font-face {\n  font-family: 'Framework7 Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(\"../fonts/Framework7Icons-Regular.eot\");\n  src: url(\"../fonts/Framework7Icons-Regular.woff2\") format(\"woff2\"),\n       url(\"../fonts/Framework7Icons-Regular.woff\") format(\"woff\"),\n       url(\"../fonts/Framework7Icons-Regular.ttf\") format(\"truetype\");\n}"},{"path":"beautify-css.html","id":"size","chapter":"5 CSS for Shiny","heading":"5.4.1.2 Size","text":"change text size, use font-size property. , 2 choices:relative size (first choice) like small, medium, …\nmay also find notations like 1em (default size), 1.8em bigger 0.5em smaller; well percentages.absolute size: 16px, 20px, …following example, second h1 tag smaller default one, p:","code":"\nui <- fluidPage(\n  tags$style(\n    \".smaller--h1 {\n      font-size: 0.75em;\n    }\n    .smaller--p {\n      font-size: 80%;\n    }\n    \"\n  ),\n  h1(\"Default <h1>\"),\n  h1(class = \"smaller--h1\", \"Smaller <h1>\"),\n  p(\"Normal <p>\"),\n  p(class = \"smaller--p\", \"Smaller <p>\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"alignement","chapter":"5 CSS for Shiny","heading":"5.4.1.3 Alignement","text":"job text-align accepts 4 values (left, center, right justify). Importantly, work inline tags like span!","code":""},{"path":"beautify-css.html","id":"other-styling-properties","chapter":"5 CSS for Shiny","heading":"5.4.1.4 Other styling properties","text":"can also put text bold, italic using font-style: italic font-weight: bold, respectively.","code":""},{"path":"beautify-css.html","id":"colors","chapter":"5 CSS for Shiny","heading":"5.4.2 Colors","text":"already mentioned property previous examples. CSS, 4 ways apply colors text background:Using hexadecimal notation (HEX). instance #FFFFFF corresponds white color. Given color code, unless already know , result quite hard predict. guess result #4b0082?Using rgb code. ever followed art courses, classic system uses painting, mixing colors. rgb stands red, green blue. scale goes 0 255 (256 choices), gives weight color! 255? Since 256256256 gives 16 millions color, maximum number colors actual screen can display.Using hsl convention. hsl stands hue, saturation lightness. Saturation lightness expressed percentage 0 100. hue goes red (0) 360 (sort red) time incrementing 15. yellow color 60.Using color name like ghostwhite, maroon, red…rgb hsl give unlimited number possibilities, HTML color names infinite.many tools allowing get codes like, notably color pickers:https://html-color.codes/https://www.w3schools.com/colors/colors_picker.asp","code":""},{"path":"beautify-css.html","id":"text-color","chapter":"5 CSS for Shiny","heading":"5.4.2.1 Text color","text":"Given methods listed , use color property change text color. obvious colors like red, necessary use rgb convention.","code":"p {\ncolor: red;\n}"},{"path":"beautify-css.html","id":"background-color","chapter":"5 CSS for Shiny","heading":"5.4.2.2 Background color","text":"backgound-color property necessary apply given color background. change page background color, target body tag, also target tag like p.","code":""},{"path":"beautify-css.html","id":"borders-and-shadows","chapter":"5 CSS for Shiny","heading":"5.4.3 Borders and shadows","text":"effects may applied text block elements. easiest way set border leverage border propriety takes 3 parameters:border width px.border color valid CSS color like rgb(), red, …border type, corresponds border style (none, solid,\ndotted, dashed, double, groove, ridge, inset outset). practice, mostly use solid.exist properties border-radius controls shape corners top left bottom left. higher value rounded corner.reason, want fine tune border position, four properties: border-top, border-bottom, border-left border-right.Finally, shadows controlled two properties:text-shadow applies shadow text element (used).box-shadow styling blocks.instance:box-shadow property takes four main parameters:horizontal offset px.vertical offset px.blur radius value px. higher blurred.shadow color.remember shinydashboard box imported inside simple shiny app Chapter 4.3? box included {OSUICode} side package. Let’s add border shadows.box class styled follow show Figure 5.11:\nFIGURE 5.11: Shinydashboard box style\nborder-radius 3px indicates box slightly rounded corners.\ntop solid border color gray well tiny shadow.\nLet’ increase border-radius 10px, change border top border-left orange color slightly increased thickness:like increase shadow effect mouse hover, reasonable values. proceed leverage pseudo format elements like :hover:easiest way modify shadow style directly inside HTML inspector, demonstrated Figure 5.12. Next property text, button open shadow editor. click , opens box input control shadow offset, blur spread parameter. leave effect outside box, outset unchanged. change color, click color widget next rgb value opens Figure 5.13.\nFIGURE 5.12: Box shadow shape tools\n\nFIGURE 5.13: Box shadow color tools\nfinally include new CSS rule inside previous app. Optionally, may change\ncolor text header white, improve contrast box background (See Figure 5.14):\nFIGURE 5.14: Improved box shadow hover\n","code":"block {\n  box-shadow: 2px 2px 0px black;\n}\nlibrary(OSUICode)\nlibrary(shinyWidgets)\nui <- fluidPage(\n  useShinydashboard(),\n  br(),\n  box2(title = \"Box with border\", background = \"blue\", height = \"400px\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server).box {\n  border-radius: 3px;\n  border-top: 3px solid #d2d6de;\n  box-shadow: 0 1px 1px rgb(0 0 0 / 10%);\n}.box {\n  border-radius: 10px;\n  border-left: 6px solid #e28810;\n  box-shadow: 0 1px 1px rgb(0 0 0 / 10%);\n}.box:hover {\n  box-shadow: 0px 8px 8px 0px rgb(0, 0, 0, 0.2);\n}\nui <- fluidPage(\n  useShinydashboard(),\n  tags$style(\n    \".box {\n      border-top: none;\n      border-radius: 10px;\n      border-left: 6px solid #e28810;\n      box-shadow: 0 1px 1px rgb(0 0 0 / 10%);\n    }\n    .box:hover {\n      box-shadow: 0px 8px 8px 0px rgb(0, 0, 0, 0.2);\n    }\n    .box-header {\n      color: #fff;\n    }\n    \"\n  ),\n  br(),\n  box2(title = \"Box with border\", background = \"blue\", height = \"400px\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"layout","chapter":"5 CSS for Shiny","heading":"5.4.4 Layout","text":"mentioned section 1.2, exist block inline tags. block elements displayed , inline elements added next others, shown Figure 5.15.\nFIGURE 5.15: Inline block elements\nCSS allows deep customization block elements like setting width, height margin. Let’s review .","code":""},{"path":"beautify-css.html","id":"style-blocks","chapter":"5 CSS for Shiny","heading":"5.4.4.1 Style blocks","text":"shown Figure 5.16, block tag may seen box. CSS allows set internal external margins. Internal margins, also called padding, space block border content, directions. External margins also known margin spaces blocks directions. block also defined width height well optional minimal width height. Width height may set either using absolute unites (px) relative unites(%) minimal values always absolute. Minimal values useful case end user resizes windows.corresponding CSS properties found :Padding margins called CSS super properties. Indeed, setting padding: 10px guarantees 10px directions. need custom values, specify directions follows:exists shortcut margin: 5px 0 5px 2 means 5px top, 0 px right, 5 px bottom 2px left. remember good order, clockwise (top, right, bottom, left). Specifying 2 values margin: 5px 2.5px means 5px top bottom, 2.5px left right. obviously applies padding!\nFIGURE 5.16: Blocks layout\nUsing margin allows center block margin: auto applied combination given width.happens content inside block bigger block ?\napply overflow super property acts either horizontally vertically. vertical overflow, choose overflow-y. overflow property 4 possible values:visible shows content.hidden hides content goes outside block.scroll shows scrolling bars directions see hidden content.auto let web browser decide.Let’s apply newly acquired knowledge simple shiny app.Well, ? better combining fluidRow column! Indeed, 2 functions part grid system built top flexbox. Let’s talk next section.","code":".block {\nwidth: 50%; /* % also work and will be relative size*/\nheight: 200px;\nmin-width: 200px;\n}.block {\npadding: 10px;\nmargin-top: 10px;\nmargin-left: 5px;\n}\nui <- fluidPage(\n  tags$style(\n    \".block {\n      border-color: #00000;\n      border-style: solid;\n      background-color: lightblue;\n      text-align: center;\n      margin: 10px;\n      min-height: 200px;\n      width: 200px;\n    }\n    \n    span, a {\n      background-color: orange;\n    }\n    \"\n  ),\n  div(\n    class = \"block\",\n    \"Block 1\",\n    br(),\n    span(\"Inline text 1\"), span(\"Inline text 2\")\n  ),\n  div(\n    class = \"block\",\n    \"Block 2\",\n    br(),\n    lapply(1:2, a, href = \"https://www.google.com/\", \"Link\")\n  ),\n  div(\n    class = \"block\",\n    \"Block 3\",\n    lapply(1:5, span, \"Inline text\")\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"flexbox","chapter":"5 CSS for Shiny","heading":"5.4.4.2 Flexbox","text":"flexbox (“flexible boxes”) model game changer layout development allows seamlessly:align items container.ensure items fill space.…first step define main container give flex value display property:done, define direction 4 choices, shown Figure 5.17:rowrow-reversecolumncolumn-reverse\nFIGURE 5.17: Flexbox directions\nexample involving shiny. first define container CSS display: flex flex-direction: row set flexbox display. also add border better see container limits:, define style container elements, p tags. give width height better see blocks. child given background color :nth-child(n) pseudo class. exercise, may try replace flex-direction 4 values see blocks move main container.flex-wrap property may useful control blocks arranged:nowrap (default) put items row.wrap put items multiple lines top bottom.wrap-reverse put items multiple lines bottom top.Interestingly, flex-wrap flex-direction may merged flex-flow: direction wrap mode.Items may aligned either principal axis defined container CSS secondary axis, called cross-axis:justify-content may take following values flex-start (default), flex-end, center, space-, space-around space-evenlyalign-items whose values can stretch (default), flex-start, flex-end, center baselinejustify-content align-items applied container level individual items! Whenever container multiple line, result flex-wrap: wrap flex-flow: ... wrap, use align-content align cross-axis (flex-start, flex-end, center, stretch default, space-, space-around).flexbox mono dimensional system. following, review CSS grid system…","code":".container {\ndisplay: flex;\n}.container {\ndisplay: flex;\nflex-direction: row;\nborder: red dashed 2px;\n}\nui <- fluidPage(\n  tags$style(\n    \".container {\n      display: flex;\n      flex-direction: row-reverse;\n      border: red dashed 2px;\n    }\n    \n    p {\n      width: 200px;\n      height: 200px;\n      text-align: center;\n      color: white;\n      font-size: 50px;\n    }\n    \n    .container  :nth-child(1) {\n      background-color: green;\n    }\n    .container  :nth-child(2) {\n      background-color: orange;\n    }\n    .container  :nth-child(3) {\n      background-color: purple;\n    }\n    \"\n  ),\n  div(\n    class = \"container\",\n    p(\"A\"),\n    p(\"B\"),\n    p(\"C\")\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"grid-model","chapter":"5 CSS for Shiny","heading":"5.4.4.3 Grid model","text":"mentioned , fluidRow column leverage Bootstrap grid system, uses flexbox. unfortunately rather complex scope book.","code":""},{"path":"beautify-css.html","id":"responsive-design-media-queries","chapter":"5 CSS for Shiny","heading":"5.4.5 Responsive design: media queries","text":"beginning web, smartphones tablets. websites\nmostly designed display fix computer screens. Everything changed now, leads several problems non responsive sites.Media queries convenient solve issue. allow setup rules depending\nvarious conditions. structure defined follows:instance, assuming want increase text size, mobile devices:stands screen sizes second request target devices width\n480px, .shiny app give:shown Figure 5.18, developer tools responsive mode,\ncan enable clicking blue button next Elements tabs.\nresponsive mode let define viewport dimensions, height width web browser page test media queries. set width 480 text size appears increased. may try 481px see text becomes smaller. careful, responsive mode tool display web browser navigation bars, status bar (bar containing battery icon various indicators). sure select ... icon enable show media queries show rulers options. media query option provides better visualization media query range versus current screen width, ruler helps fine tune design.\nFIGURE 5.18: HTML inspector responsive mode\nLet’s consider another example, involving shiny::modalDialog. function displays\nBootstrap 3 modal, whose design partly controlled media queries. run app open developer tools:corresponding CSS rules located Bootstrap (3) CSS file:first query fixes width 600px modals .modal-dialog class (default), long screen size least 768px. Moreover, modal modal-sm class, width set 300px. Finally, soon screen width higher equal 992 px, modals .modal-lg class width set 900px.Figure 5.19 illustrates modal responsiveness.\nFIGURE 5.19: Responsive modal. Left: first media query fullfilled, width 600px. Right: First media query met, width set auto\nFigure 5.20, changed modal size s l (left right, respectively).\nFIGURE 5.20: Changed modal size. Left: small modal screensize least 768px. Right: large modal screen size least 992px.\nstrong implications modal size mobiles. long screen size \nlower 768px, size parameter ignored!","code":"@media rule1 {\n  /* CSS */\n}\n\n/* We may combine rules */\n\n@media rule1 and rule 2 and ... {\n  /* CSS */\n}@media all and (max-device-width: 480px) {\np {\nfont-size: 1.5em;\n}\n}\nui <- fluidPage(\n  tags$style(\n    \"@media all and (max-device-width: 480px) {\n      p {\n        font-size: 1.5em;\n      }\n    }\n    \"\n  ),\n  p(\"Hello World\")\n)\n\nserver <- function(input, output) {}\nshinyApp(ui, server)\nshinyApp(\n  ui = fluidPage(\n    actionButton(\"show\", \"Show modal dialog\")\n  ),\n  server = function(input, output) {\n    observeEvent(input$show, {\n      showModal(\n        modalDialog(\n          title = \"Important message\",\n          \"This is an important message!\"\n        )\n      )\n    })\n  }\n)@media (min-width: 768px) {\n  .modal-dialog {\n    width: 600px;\n    margin: 30px auto;\n  }\n  .modal-content {\n    -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n  }\n  .modal-sm {\n    width: 300px;\n  }\n}\n@media (min-width: 992px) {\n  .modal-lg {\n    width: 900px;\n  }\n}"},{"path":"beautify-css.html","id":"best-practice","chapter":"5 CSS for Shiny","heading":"5.5 Best practice","text":"","code":""},{"path":"beautify-css.html","id":"dry-principles","chapter":"5 CSS for Shiny","heading":"5.5.1 DRY principles","text":"DRY stands “Don’t repeat ”. methodology applies structural languages like R JavaScript also declarative languages like CSS.\nexample badly managed CSS code. .class-1 .class-2 color border radius. padding font size change. type code follow DRY rule increases risk contradictory CSS properties.gather common properties one generic class:HTML side, add classes generic specific like:even concrete example, take look bulma button:Notice easy predict style button. large take maximum width. sure meaningful .class1!","code":".class-1{\ncolor: #33BEFF;\npadding: 10px 16px;\nfont-size: 12px;\nborder-radius: 3px;\n}\n\n.class-2{\ncolor: #33BEFF;\npadding: 5px 10px;\nfont-size: 12px;\nborder-radius: 3px;\n}.generic {\ncolor: #33BEFF;\nborder-radius: 3px;\n}\n\n.specific-1 {\npadding: 10px 16px;\nfont-size: 18px;\n}\n\n.specific2 {\npadding: 5px 10px;\nfont-size: 12px;\n}<div class=\"generic specific-1\">My element<\/div>\n<div class=\"generic specific-2\">My element<\/div><button class=\"button is-large is-fullwidth\">Large<\/button>"},{"path":"beautify-css.html","id":"selector-specificity","chapter":"5 CSS for Shiny","heading":"5.5.2 Selector specificity","text":"happens case multiple different selectors target element? style really applied? Consider following example:following CSS rules:Can guess element text color? Well, obvious. must understand web browsers apply rules select specific rules:Inline style specific. style directly attached HTML tag.id apply unique objects.class, pseudoclasses, attributes.elements pseudo-elements.Going back previous example, specific selector #element, therefore text color red. happens case equality? last written selector applied:second selector applied tag. apply class1, must move class2 style definition.Best practice keep lowest specificity possible, thereby making .class first choice.","code":"<div id=\"element\" class=\"myclass\">Some text<\/div>#element {\ncolor: red;\n}\n\n.myclass {\ncolor: blue;\n}\n\ndiv {\ncolor: green;\n}<div class=\"class1 class2\">Some text<\/div>.class1 {\ncolor: blue;\n}\n\n.class2 {\ncolor: red;\n}"},{"path":"beautify-css.html","id":"block-element-modified-bem","chapter":"5 CSS for Shiny","heading":"5.5.3 Block element modified (BEM)","text":"BEM methodology help write meaningful CSS, easier manage.\nblock standalone entity self explanatory name like header, checkbox. elements part block standalone like menu items.\nmodifier indicates specific state element, instance button disabled, active, … general scheme defined :Following methodology guaranties documented meaningful classes.","code":".block__element--modifier {\n/* rules */\n}"},{"path":"beautify-css.html","id":"exercises-1","chapter":"5 CSS for Shiny","heading":"5.6 Exercises","text":"","code":""},{"path":"beautify-sass.html","id":"beautify-sass","chapter":"6 Introduction to SASS","heading":"6 Introduction to SASS","text":"One main problem CSS handle growing number files code repetition. Nowadays, web developers mainly use CSS preprocessors like Sass, stands “Syntactically Awesome Style Sheets”, providing access variables, mathematical operators, nesting, thereby reducing code complexity extending possibilities. Rstudio developed {sass} package, makes possible use Sass Shiny apps Rmarkdown documents.","code":""},{"path":"beautify-sass.html","id":"getting-started-with-sass","chapter":"6 Introduction to SASS","heading":"6.1 Getting started with Sass","text":"use Sass terminal, leverage sass package features stay R.\ninstall sass, run:use sass() function whose input parameter accepts:R string like { color: pink}.named list().file passed sass_file(), imports sass_import().complex structures.","code":"\ninstall.packages(\"sass\")\n# OR\nremotes::install_github(\"rstudio/sass\")\nlibrary(sass)\nsass(input = \".element-class { color: pink;}\")"},{"path":"beautify-sass.html","id":"variables","chapter":"6 Introduction to SASS","heading":"6.1.1 Variables","text":"Let us consider following example:Shouldn’t easier? Imagine hundreds elements color.\nhappens case color changes? update properties hand?let Sass variable $-color:can quickly solve problem. sass, obtain:Note: good practice add default! tag variable definition, want\nlet others modify : \"$-color: purple !default;\"","code":".class-1{\n  color: #33BEFF;\n}\n\n.class-2{\n  background-color: #33BEFF;\n}$my-color: purple;\n.class-1{\n  color: $my-color;\n}\n.class-2{\n  background-color: $my-color;\n}\nvar <- \"$my-color: purple;\"\nrule1 <- \".class-1{ color: $my-color; }\"\nrule2 <- \".class-2{ background-color: $my-color; }\"\nsass(input = list(var, rule1, rule2))"},{"path":"beautify-sass.html","id":"partials-and-modules","chapter":"6 Introduction to SASS","heading":"6.1.2 Partials and Modules","text":"best practice save useful code snippets one place, reuse \nanytime anywhere. Sass allows define partials, like _partial.css, leading\nunderscore, avoids converted CSS. Partials subsequently called\n@import <PARTIAL_NAME> (may also find @use, latter handled\nLibSass, fuelssass), thereby significantly reducing code duplication.Modules pieces Sass files later converted CSS, reducing file size minimum.\nexample bootstrap.scss file:better read easier maintain original bootstrap.css 10717 lines code!practice, often end main Sass file compile follows:","code":"/*!\n * Bootstrap v5.0.0-beta1 (https://getbootstrap.com/)\n * Copyright 2011-2021 The Bootstrap Authors\n * Copyright 2011-2021 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n */\n\n// scss-docs-start import-stack\n// Configuration\n@import \"functions\";\n@import \"variables\";\n@import \"mixins\";\n@import \"utilities\";\n\n// Layout & components\n@import \"root\";\n@import \"reboot\";\n@import \"type\";\n@import \"images\";\n@import \"containers\";\n@import \"grid\";\n@import \"tables\";\n@import \"forms\";\n@import \"buttons\";\n@import \"transitions\";\n@import \"dropdown\";\n@import \"button-group\";\n@import \"nav\";\n@import \"navbar\";\n@import \"card\";\n@import \"accordion\";\n@import \"breadcrumb\";\n@import \"pagination\";\n@import \"badge\";\n@import \"alert\";\n@import \"progress\";\n@import \"list-group\";\n@import \"close\";\n@import \"toasts\";\n@import \"modal\";\n@import \"tooltip\";\n@import \"popover\";\n@import \"carousel\";\n@import \"spinners\";\n\n// Helpers\n@import \"helpers\";\n\n// Utilities\n@import \"utilities/api\";\n// scss-docs-end import-stack\nsass(sass_file(\"main.scss\"))"},{"path":"beautify-sass.html","id":"mixins-and-functions","chapter":"6 Introduction to SASS","heading":"6.1.3 Mixins and Functions","text":"","code":""},{"path":"beautify-sass.html","id":"mixins","chapter":"6 Introduction to SASS","heading":"6.1.3.1 Mixins","text":"make 90 degrees rotation CSS, write:tedious. Mixins allow encapsulate logic reusable unit:mixin starts @mixin keyword followed name parameters.\ncalled @include <MIXIN_NAME(PARMS)>, similar function declaration, excepts \nmust return CSS rule.","code":".element {\n  -webkit-transform: rotate(90deg);\n  -ms-transform: rotate(90deg);\n  transform: rotate(90deg);\n}@mixin transform($property, ...) {\n  -webkit-transform: $property;\n  -ms-transform: $property;\n  transform: $property;\n}\n\n.element1 { @include transform(rotate(90deg)); }\nmixin <- \"@mixin transform($property) {\n  -webkit-transform: $property;\n  -ms-transform: $property;\n  transform: $property;\n}\"\nrule <- \".element1 { @include transform(rotate(90deg)); }\"\nsass(input = list(mixin, rule))"},{"path":"beautify-sass.html","id":"functions","chapter":"6 Introduction to SASS","heading":"6.1.3.2 Functions","text":"Sass offers many built-modules containing\nready use functions colors, numbers, strings, lists, maps, …functions like\nrgb global, don’t import corresponding module.definitely possible design custom functions @function,\nwhose syntax close mixins:debugging functions, might useful capture intermediate elements.\n@debug allows :","code":"\nsass(\".pouet { color: rgb(0, 255, 0); }\")@function name($parm1, $parm2) {\n  /* logic */\n  @return value;\n}$my-var: 1;\n@debug myvar;\nsass(\"\n  $myvar: 1;\n  @debug '$myvar is #{$myvar};'\n\")"},{"path":"beautify-sass.html","id":"extendinheritance","chapter":"6 Introduction to SASS","heading":"6.1.4 Extend/Inheritance","text":"consider 2 alerts color difference. can’t capture multiple properties\ninside one single Sass variable, introduce extend concept, permits import\nCSS properties inside multiple rules. first define generic alerts-common rule,\nprefixed % symbol. contains several rules variables:Let’s translate R:method avoids multiply classes elements .alert-common .alert-red ....\nYet, still duplication programmatically generated two alert\nclasses loop.","code":"%alerts-common {\n  position: relative;\n  padding: $alert-padding-y $alert-padding-x;\n  margin-bottom: $alert-margin-bottom;\n}\n\n\n.alert-red {\n  @extend %alerts-common;\n  color: red;\n}\n\n.alert-green {\n  @extend %alerts-common;\n  color: green;\n}\n\ny_padding <- \"$alert-padding-y: 5px;\"\nx_padding <- \"$alert-padding-x: 10px;\"\nb_margin <- \"$alert-margin-bottom: 2px;\"\ncommon <- \"%alerts-common {\n  position: relative;\n  padding: $alert-padding-y $alert-padding-x;\n  margin-bottom: $alert-margin-bottom;\n}\"\nalert_red <- \".alert-red {\n  @extend %alerts-common;\n  color: red;\n}\n\"\nalert_green <- \".alert-green {\n  @extend %alerts-common;\n  color: green;\n}\n\"\nsass(input = list(y_padding, x_padding, b_margin, common, alert_red, alert_green))"},{"path":"beautify-sass.html","id":"flow-controls","chapter":"6 Introduction to SASS","heading":"6.1.5 Flow Controls","text":"elements aiming fine tuning mixins functions behavior.\n#### else\nLike every programming language else control execution code block, depending\nconditions.\n, want conditionally control shadow property, depending alert color:","code":"@mixin add-shadow($box-color) {\n  @if box-color == red {\n    box-shadow: \n      0 4px 10px 0 rgb(255, 0, 0), \n      0 4px 20px 0 rgb(255, 0, 0);\n  } @else if $box-color == green {\n    box-shadow: \n      0 4px 10px 0 rgb(0, 255, 0), \n      0 4px 20px 0 rgb(0, 255, 0);\n  }\n}\n\n.alert-red {\n  @extend %alerts-common;\n  color: red;\n  @include add-shadow($box-color: red);\n}\n\n.alert-green {\n  @extend %alerts-common;\n  color: green;\n  @include add-shadow($box-color: green);\n}\nadd_shadow <- \"@mixin add-shadow($box-color) {\n  @if $box-color == red {\n    box-shadow: \n      0 4px 10px 0 rgb(255, 0, 0), \n      0 4px 20px 0 rgb(255, 0, 0);\n  } @else if $box-color == green {\n    box-shadow: \n      0 4px 10px 0 rgb(0, 255, 0), \n      0 4px 20px 0 rgb(0, 255, 0);\n  }\n}\n\"\ny_padding <- \"$alert-padding-y: 5px;\"\nx_padding <- \"$alert-padding-x: 10px;\"\nb_margin <- \"$alert-margin-bottom: 2px;\"\ncommon <- \"%alerts-common {\n  position: relative;\n  padding: $alert-padding-y $alert-padding-x;\n  margin-bottom: $alert-margin-bottom;\n}\"\nalert_red <- \".alert-red {\n  @extend %alerts-common;\n  color: red;\n  @include add-shadow($box-color: red);\n}\n\"\nalert_green <- \".alert-green {\n  @extend %alerts-common;\n  color: green;\n  @include add-shadow($box-color: green);\n}\n\"\nsass(input = list(y_padding, x_padding, b_margin, common, add_shadow, alert_red, alert_green))"},{"path":"beautify-sass.html","id":"loops","chapter":"6 Introduction to SASS","heading":"6.1.5.1 Loops","text":"","code":""},{"path":"beautify-sass.html","id":"each","chapter":"6 Introduction to SASS","heading":"6.1.5.1.1 Each","text":"like create alert class one rule. first define list colors Sass \ncall @:structure JavaScript loop. ’ll also notice #{...} \ncalled interpolation allows \ninsert Sass expression string. another example, want create background-image property\nwithin mixin, background-image: url(\"/some_path/#{$name}.svg\"), #{$name} holds file name.becomes even powerful working maps like $font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);, ie key/value pairs.\n@convenient lapply map functions chain repetitive rules creation.","code":"$colors: red, green;\n\n@each $color in $colors {\n  .alert-#{$color} {\n    color: green;\n    @include add-shadow($box-color: $color);\n  }\n}\nadd_shadow <- \"@mixin add-shadow($box-color) {\n  @if $box-color == red {\n    box-shadow: \n      0 4px 10px 0 rgb(255, 0, 0), \n      0 4px 20px 0 rgb(255, 0, 0);\n  } @else if $box-color == green {\n    box-shadow: \n      0 4px 10px 0 rgb(0, 255, 0), \n      0 4px 20px 0 rgb(0, 255, 0);\n  }\n}\n\"\ny_padding <- \"$alert-padding-y: 5px;\"\nx_padding <- \"$alert-padding-x: 10px;\"\nb_margin <- \"$alert-margin-bottom: 2px;\"\ncommon <- \"%alerts-common {\n  position: relative;\n  padding: $alert-padding-y $alert-padding-x;\n  margin-bottom: $alert-margin-bottom;\n}\"\nalerts_rule <- \"$colors: red, green;\n@each $color in $colors {\n  .alert-#{$color} {\n    @extend %alerts-common;\n    color: green;\n    @include add-shadow($box-color: $color);\n  }\n}\n\"\nsass(input = list(y_padding, x_padding, b_margin, common, add_shadow, alerts_rule))"},{"path":"beautify-sass.html","id":"for","chapter":"6 Introduction to SASS","heading":"6.1.5.1.2 For","text":"However, straightforward count @. precisely \n@fills gap. generic scheme :excludes last number includes .","code":"@for <variable> from <expression> to <expression> { ... } \n@for <variable> from <expression> through <expression> { ... }"},{"path":"beautify-sass.html","id":"sass-best-practices","chapter":"6 Introduction to SASS","heading":"6.2 {sass} best practices","text":"’s best practice, especially debugging purposes, include assets HTML\ndependencies, good idea organize Sass variable definition, function/mixins layers, leveraging sass_layer function:Besides, sass_layer provide options like:declarations containing function, mixin elements, sass_file instance.html_deps attaches single list HTML dependencies provided Sass code. (See )Ultimately, multiple layers may bundled sass_bundle:sass_bundle_remove\nremoves given layer bundle, provided passed named list sass_bundle.\nallows developers reuse modify predefined layers:","code":"\nvar <- \"$my-color: purple !default\"\nrule1 <- \".class-1{ color: $my-color; }\"\nrule2 <- \".class-2{ background-color: $my-color; }\"\nlayer1 <- sass_layer(\n  default = var,\n  rules = c(rule1, rule2)\n)## Warning in sass_layer(default = var, rules = c(rule1, rule2)): partial argument\n## match of 'default' to 'defaults'\nsass_layer(\n  html_deps = htmltools::htmlDependency(\n    name = \"my-dep\", \n    version = \"1.0.0\",\n    package = \"mypkg\",\n    src = \"path\",\n    ...\n  )\n)\nvar2 <- \"$my-color: blue !default\"\nlayer2 <- sass_layer(\n  default = var2,\n  rules = c(rule1, rule2)\n)## Warning in sass_layer(default = var2, rules = c(rule1, rule2)): partial argument\n## match of 'default' to 'defaults'\nmy_bundle <- sass_bundle(layer1 = layer1, layer2 = layer1)\nmy_bundle## /* Sass Bundle: layer1, layer2 */\n## $my-color: purple !default\n## $my-color: purple !default\n## .class-1{ color: $my-color; }\n## .class-2{ background-color: $my-color; }\n## .class-1{ color: $my-color; }\n## .class-2{ background-color: $my-color; }\n## /* *** */\nsass(my_bundle)\nmy_bundle <- sass_bundle_remove(my_bundle, \"layer2\")\nsass(my_bundle)"},{"path":"beautify-sass.html","id":"from-sass-to-css","chapter":"6 Introduction to SASS","heading":"6.3 From Sass to CSS","text":"sass can generate CSS Sass passing output parameter pointing path \ngenerate CSS file. Best practice consists enabling compression source maps. discuss\nlater book Chapter 21. Overall steps makes code faster load easier debug:","code":"\nsass(\n  list(\n   \"$color: pink;\",\n   \".a { color: $color; }\" \n  ),\n  options = sass_options(\n    output_style = \"compressed\",\n    source_map_embed = TRUE\n  )\n)\nsass(\n  sass_file(\"main.scss\"),\n  \"<OUTPUT PATH>\",\n  options = sass_options(\n    output_style = \"compressed\",\n    source_map_embed = TRUE\n  )\n)"},{"path":"beautify-sass.html","id":"sass-and-shiny","chapter":"6 Introduction to SASS","heading":"6.4 Sass and Shiny","text":"Now let’s go back Shiny! include Sass code Shiny app? multiple situations:simply want style shiny app.developed template custom JS Sass/CSS reused developers.first option rather simple since Sass code compiled sass shiny apps launched. resulting code may either string CSS file (within www folder), included head. \nmake easier test reader side, create temporary folder Sass code compiled.\ncreate simple app file run runApp:Source maps allow us see original Sass code, shown Figure 6.1.\nsass_options gives flexibility fine tune CSS output source map configuration.\nFIGURE 6.1: Inspect Sass code web browser\nsecond option requires run sass passing output file within package. , generated CSS\nincluded HTML dependency, shipped template:","code":"\npath <- file.path(tempdir(), \"myApp\")\ndir.create(sprintf(\"%s/www\", path), recursive = TRUE)\nsass(\n  list(\n   c(\"$color: pink;\", \"$size: 30px;\"),\n   c(\".awesome-link { \n        color: $color; \n        font-size: $size; \n        &:hover{\n          color: green;\n        }\n      }\"\n    )\n  ), \n  output = sprintf(\"%s/www/main.min.css\", path),\n  options = sass_options(\n    output_style = \"compressed\",\n    source_map_embed = TRUE\n  )\n)\n\nfile.create(sprintf(\"%s/app.R\", path))\n\napp_code <- 'library(shiny)\n\nui <- fluidPage(\n  tags$head(\n    tags$link(href = \"main.min.css\", rel = \"stylesheet\", type = \"text/css\")\n  ),\n  a(\"Hello Shiny!\", class = \"awesome-link\")\n)\n\nserver <- function(input, output) {}\nshinyApp(ui, server)\n'\nwriteLines(app_code, sprintf(\"%s/app.R\", path))\n\nrunApp(sprintf(\"%s\", path))\nsass(\n  sass_file(\"main.scss\"),\n  \"<OUTPUT PATH>/main.css\",\n  options = sass_options(\n    output_style = \"compressed\",\n    source_map_embed = TRUE\n  )\n)\n\nmy_css_deps <- htmltools::htmlDependency(\n  name = \"my-style\", \n  version = \"1.0.0\",\n  package = \"mypkg\",\n  src = \"<OUTPUT PATH>\",\n  stylesheet = \"main.css\"\n)"},{"path":"beautify-sass.html","id":"examples","chapter":"6 Introduction to SASS","heading":"6.5 Examples","text":"","code":""},{"path":"beautify-sass.html","id":"customize-bs4dash-colors","chapter":"6 Introduction to SASS","heading":"6.5.1 Customize {bs4Dash} colors","text":"bs4Dash Bootstrap 4 dashboard template built top AdminLTE3 HTML template. shinydashboard powered previous version, AdminLTE2, make somehow bs4Dash’s big brother!\nAdminLTE3 relies Sass files stored . Particularly,\nvariables located _variables.scss partial. Since can decompose \nSass code multiple layers thanks sass, can seamlessly customize theme color\nvariables listed :Let’s provide default custom colors:Now recompile whole AdminLTE3 Sass code account changes.\nmeans, scss assets must accessible somewhere: fresh package hoods.\nworries, ’ll come back fresh next Chapter. now, rely fresh Sass code stored \nsystem.file(\"assets/AdminLTE-3.0.4/AdminLTE.scss\", package = \"fresh\"):probably noticed potential issue. indeed rely specific version,\nnamely 3.0.4, necessarily one want. Therefore, alternative \ndownload Sass files AdminLTE3, store temp folder recompile\ncode folder new variables. AdminLTE3 depends specific version\nBootstrap 4, 4.5.3, also recover dependencies separate folder.\nfinally edit original adminlte.scss change Bootstrap Sass path:demonstration, addition change theme colors, also modified \n$sidebar-dark-bg variable $lightblue $sidebar-light-bg $lime:","code":"$blue: #0073b7 !default;\n$lightblue: #3c8dbc !default;\n$navy: #001f3f !default;\n$teal: #39cccc !default;\n$olive: #3d9970 !default;\n$lime: #01ff70 !default;\n$orange: #ff851b !default;\n$fuchsia: #f012be !default;\n$purple: #605ca8 !default;\n$maroon: #d81b60 !default;\n$black: #111 !default;\n$gray-x-light: #d2d6de !default;$blue: #136377 !default;\n$olive: #d8bc66 !default;\n$lime: #fcec0c !default;\n$orange: #978d01 !default;\n$maroon: #58482c !default;\n$gray-x-light: #d1c5c0 !default;\nlibrary(bs4Dash)\n\ncss <- sass(\n  sass_layer(\n    default = c(\n      \"$lightblue: #136377 !default;\",\n      \"$olive: #d8bc66 !default;\",\n      \"$lime: #fcec0c !default;\",\n      \"$orange: #978d01 !default;\",\n      \"$maroon: #58482c !default;\",\n      \"$gray-x-light: #d1c5c0 !default;\"\n    ),\n    rules = sass_file(\n      input = system.file(\"assets/AdminLTE-3.0.4/AdminLTE.scss\", package = \"fresh\")\n    )\n  )\n)\n\n\nui <- dashboardPage(\n  dashboardHeader(title = \"Custom colors\"),\n  dashboardSidebar(),\n  dashboardBody(\n    tags$head(tags$style(css)),\n    # Boxes need to be put in a row (or column)\n    fluidRow(\n      box(plotOutput(\"plot1\", height = 250), status = \"olive\"),\n\n      box(\n        status = \"lightblue\",\n        title = \"Controls\",\n        sliderInput(\"slider\", \"Number of observations:\", 1, 100, 50)\n      )\n    )\n  )\n)\n\nserver <- function(input, output) {\n  set.seed(122)\n  histdata <- rnorm(500)\n\n  output$plot1 <- renderPlot({\n    data <- histdata[seq_len(input$slider)]\n    hist(data)\n  })\n}\n\nshinyApp(ui, server)/*!\n *   AdminLTE v3.1.0-rc\n *   Author: Colorlib\n *   Website: AdminLTE.io <https://adminlte.io>\n *   License: Open source - MIT <https://opensource.org/licenses/MIT>\n */\n\n// Bootstrap\n// ---------------------------------------------------\n@import \"../bootstrap/scss/functions\";\n@import \"bootstrap-variables\";\n@import \"../bootstrap/scss/bootstrap\";\n\n// Variables and Mixins\n// ---------------------------------------------------\n@import \"variables\";\n@import \"mixins\";\n\n@import \"parts/core\";\n@import \"parts/components\";\n@import \"parts/extra-components\";\n@import \"parts/pages\";\n@import \"parts/plugins\";\n@import \"parts/miscellaneous\";\ntemp_path <- file.path(tempdir())\ndir.create(file.path(temp_path, \"adminlte\"))\nsetwd(file.path(temp_path, \"adminlte\"))\nsystem(\"wget -r -np -k --cut-dirs=4 -nH https://cdn.jsdelivr.net/npm/admin-lte@3.1.0-rc/build/scss/\")\ndir.create(file.path(temp_path, \"bootstrap/scss\"), recursive = TRUE)\nsetwd(file.path(temp_path, \"bootstrap/scss\"))\nsystem(\"wget -r -np -k --cut-dirs=3 -nH https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/scss/\")\nadminlte_scss <- sprintf(\"%s/adminlte/adminlte.scss\", temp_path)\n\ncss <- sass(\n  sass_layer(\n    default = c(\n      \"$lightblue: #136377 !default;\",\n      \"$olive: #d8bc66 !default;\",\n      \"$lime: #fcec0c !default;\",\n      \"$orange: #978d01 !default;\",\n      \"$maroon: #58482c !default;\",\n      \"$gray-x-light: #d1c5c0 !default;\",\n      \"$sidebar-dark-bg: $lightblue !default;\",\n      \"$sidebar-light-bg: $lime !default;\"\n    ),\n    rules = sass_file(input = adminlte_scss)\n  )\n)\n\nui <- dashboardPage(\n  dashboardHeader(title = \"Custom colors\"),\n  dashboardSidebar(),\n  dashboardBody(\n    tags$head(tags$style(css)),\n    # Boxes need to be put in a row (or column)\n    fluidRow(\n      box(plotOutput(\"plot1\", height = 250), status = \"olive\"),\n\n      box(\n        status = \"lightblue\",\n        title = \"Controls\",\n        sliderInput(\"slider\", \"Number of observations:\", 1, 100, 50)\n      )\n    )\n  )\n)\n\nshinyApp(ui, server)"},{"path":"beautify-sass.html","id":"customize-shinybulma","chapter":"6 Introduction to SASS","heading":"6.5.2 Customize {shinybulma}","text":"convenience, Sass code already included book side package.\ngoal change main color palette comprises:primaryinfosuccesswarningdangerIn total, bulma exposes 419 Sass variables!Among files, locate main variables file select relevant variables want modify.\nNotice can retrieve information: initial variables derived variables.assign new values:Particularly, target main body color hosted $scheme-main. Instead pointing\n$white, change value default $black. Compile new CSS sass:Finally, try new theme following app, shown Figure 6.2:\nFIGURE 6.2: Custom bulma theme\n","code":"$turquoise: #03a4ff;\n$cyan: #e705be;\n$green: #f3d6e9;\n$yellow: #fdaf2c;\n$red: #ff483e;\n$scheme-main: hsl(0, 0%, 4%);\ncss <- sass(\n  sass_layer(\n    default = c(\n      \"$turquoise: #03a4ff;\",\n      \"$cyan: #e705be;\",\n      \"$green: #f3d6e9;\",\n      \"$yellow: #fdaf2c;\",\n      \"$red: #ff483e;\",\n      \"$scheme-main: hsl(0, 0%, 10%);\"\n      \n    ),\n    rules = sass_file(input = system.file(\"sass/bulma/bulma.sass\", package = \"OSUICode\"))\n  )\n)## Warning in sass_layer(default = c(\"$turquoise: #03a4ff;\", \"$cyan: #e705be;\", :\n## partial argument match of 'default' to 'defaults'\n#remotes::install_github(\"RinteRface/shinybulma\")\n\nlibrary(shinybulma)\n\nshinyApp(\n  ui = bulmaPage(\n    tags$head(tags$style(css)),\n    bulmaSection(\n      bulmaTileAncestor(\n        bulmaTileParent(\n          vertical = TRUE,\n          bulmaTileChild(\n            bulmaTitle(\"Tile 1\"),\n            p(\"Put some data here\"),\n            color = \"link\"\n          ),\n          bulmaTileChild(\n            bulmaTitle(\"Tile 2\"),\n            \"Hi Bulma!\",\n            color = \"danger\"\n          )\n        ),\n        bulmaTileParent(\n          vertical = TRUE,\n          bulmaTileChild(\n            bulmaTitle(\"Tile 3\"),\n            p(\"Put some data here\"),\n            color = \"warning\"\n          ),\n          bulmaTileChild(\n            bulmaTitle(\"Tile 3\"),\n            (\"Put some data here\"),\n            color = \"info\"\n          )\n        )\n      )\n    )\n  ),\n  server = function(input, output) {}\n)"},{"path":"beautify-with-fresh.html","id":"beautify-with-fresh","chapter":"7 Beautify with fresh","heading":"7 Beautify with fresh","text":"{fresh} R package developed dreamRs team, also authors shinyWidget esquisse. dreamRs projects clearly great source inspiration design outstanding Shiny apps, recommend reader explore!","code":""},{"path":"beautify-with-fresh.html","id":"fresh-the-big-picture","chapter":"7 Beautify with fresh","heading":"7.1 {fresh}, the big picture","text":"fresh built top sass see Figures 7.1 7.2 may done minutes!","code":""},{"path":"beautify-with-fresh.html","id":"customize-bs4dash","chapter":"7 Beautify with fresh","heading":"7.1.1 Customize {bs4Dash}","text":"\nFIGURE 7.1: lines code create bs4Dash dark theme!\n","code":"\nlibrary(bs4Dash)\n# Theme -------------------------------------------------------------------\n\nbs4DashTheme <- create_theme(\n  bs4dash_vars(\n    navbar_dark_color = \"#bec5cb\",\n    navbar_dark_active_color = \"#FFF\",\n    navbar_dark_hover_color = \"#FFF\"\n  ),\n  bs4dash_yiq(contrasted_threshold = 10, text_dark = \"#FFF\", text_light = \"#272c30\"),\n  bs4dash_layout(main_bg = \"#353c42\"),\n  bs4dash_sidebar_dark(\n    bg = \"#272c30\", color = \"#bec5cb\", hover_color = \"#FFF\",\n    submenu_bg = \"#272c30\", submenu_color = \"#FFF\", submenu_hover_color = \"#FFF\"\n  ),\n  bs4dash_status(dark = \"#272c30\"),\n  bs4dash_color(gray_900 = \"#FFF\", white = \"#272c30\")\n)\n\n\n\n# App ---------------------------------------------------------------------\n\n\nui <- bs4DashPage(\n  title = \"bs4Dash Dark Mode\",\n  # sidebar_collapsed = FALSE,\n  navbar = bs4DashNavbar(skin = \"dark\"),\n  controlbar = bs4DashControlbar(\n    skin = \"dark\",\n    \"This is the control bar\"\n  ),\n  sidebar = bs4DashSidebar(\n    title = \"bs4Dash Dark Mode\",\n    skin = \"dark\",\n    bs4SidebarMenu(\n      bs4SidebarHeader(\"Menu:\"),\n      bs4SidebarMenuItem(\n        tabName = \"tab1\",\n        text = \"UI components\",\n        icon = \"home\"\n      ),\n      bs4SidebarMenuItem(\n        tabName = \"tab2\",\n        text = \"Tab 2\"\n      ),\n      bs4SidebarMenuItem(\n        text = \"Item List\",\n        icon = \"bars\",\n        startExpanded = TRUE,\n        bs4SidebarMenuSubItem(\n          text = \"Item 1\",\n          tabName = \"item1\",\n          icon = \"circle-thin\"\n        ),\n        bs4SidebarMenuSubItem(\n          text = \"Item 2\",\n          tabName = \"item2\",\n          icon = \"circle-thin\"\n        )\n      )\n    )\n  ),\n  body = bs4DashBody(\n\n    use_theme(bs4DashTheme),\n\n    bs4TabItems(\n      bs4TabItem(\n        tabName = \"tab1\",\n        tags$h2(\"UI components\"),\n        tags$h4(\"bs4ValueBox\"),\n        fluidRow(\n          bs4ValueBox(\n            value = 150,\n            subtitle = \"ValueBox with primary status\",\n            status = \"primary\",\n            icon = \"shopping-cart\",\n            href = \"#\",\n            width = 4\n          ),\n          bs4ValueBox(\n            value = 150,\n            subtitle = \"ValueBox with secondary status\",\n            status = \"secondary\",\n            icon = \"shopping-cart\",\n            href = \"#\",\n            width = 4\n          ),\n          bs4ValueBox(\n            value = \"53%\",\n            subtitle = \"ValueBox with danger status\",\n            status = \"danger\",\n            icon = \"cogs\",\n            footer = \"Hello World\",\n            width = 4\n          )\n        ),\n        tags$h4(\"bs4InfoBox\"),\n        fluidRow(\n          bs4InfoBox(\n            value = 150,\n            title = \"InfoBox with primary status\",\n            iconStatus = \"primary\",\n            icon = \"shopping-cart\",\n            href = \"#\",\n            width = 4\n          ),\n          bs4InfoBox(\n            value = 150,\n            title = \"InfoBox with secondary status\",\n            iconStatus = \"secondary\",\n            icon = \"shopping-cart\",\n            href = \"#\",\n            width = 4\n          ),\n          bs4InfoBox(\n            value = \"53%\",\n            title = \"InfoBox with danger status\",\n            iconStatus = \"danger\",\n            icon = \"cogs\",\n            footer = \"Hello World\",\n            width = 4\n          )\n        ),\n        tags$h4(\"bs4Card\"),\n        fluidRow(\n          bs4Card(\n            title = \"Card with primary status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"primary\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          ),\n          bs4Card(\n            title = \"Card with secondary status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"secondary\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          ),\n          bs4Card(\n            title = \"Card with danger status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"danger\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          ),\n          bs4Card(\n            title = \"Card with warning status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"warning\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          ),\n          bs4Card(\n            title = \"Card with info status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"info\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          ),\n          bs4Card(\n            title = \"Card with success status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"success\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          )\n        )\n      ),\n      bs4TabItem(\n        tabName = \"tab2\",\n        \"Nothing to see here\"\n      )\n    )\n  )\n)\n\n\nserver <- function(input, output) {\n\n}\n\n\nshinyApp(ui, server)"},{"path":"beautify-with-fresh.html","id":"customize-shinydashboard","chapter":"7 Beautify with fresh","heading":"7.1.2 Customize {shinydashboard}","text":"Similarly, fresh supports shinydashboard powered apps. lines code, may definitely provide cyberpunk look feel favorite dashboard (Figure 7.2). shinydashboardPlus (v2) plug play support fresh theme passed dashboardPage freshTheme parameter (also seamlessly work shinydashboard). Importantly, strongly suggest avoid setting default green blue, might become confusing. Prefer playing different color palettes.\nFIGURE 7.2: Cyberpunk shinydashboard\n","code":"\ntheme <- create_theme(\n  adminlte_color(\n    green = \"#3fff2d\",\n    blue = \"#2635ff\",\n    red = \" #ff2b2b\",\n    yellow = \"#feff6e\",\n    fuchsia = \"#ff5bf8\",\n    navy = \"#374c92\",\n    purple = \"#615cbf\",\n    maroon = \"#b659c9\",\n    light_blue = \"#5691cc\"\n  ),\n  adminlte_sidebar(\n    dark_bg = \"#D8DEE9\",\n    dark_hover_bg = \"#81A1C1\",\n    dark_color = \"#2E3440\"\n  ),\n  adminlte_global(\n    content_bg = \"#aaaaaa\"\n  )\n)\n\n# create tribble for box global config\nbox_config <- tibble::tribble(\n  ~background, ~labelStatus,\n  \"red\", \"warning\",\n  \"purple\", \"success\",\n  \"green\", \"primary\",\n  \"yellow\", \"danger\",\n  \"fuchsia\", \"info\"\n)\n\n# box factory function\nbox_factory <- function(background, labelStatus) {\n  box(\n    title = \"Cyberpunk Box\", \n    collapsible = TRUE, \n    background = background,\n    height = \"200px\",\n    label = boxLabel(1, labelStatus)\n  )\n}\n\n# pmap magic\nboxes <- purrr::pmap(box_config, box_factory)\n\nshinyApp(\n   ui = dashboardPage(\n     freshTheme = theme,\n     skin = \"blue\",\n     options = list(sidebarExpandOnHover = TRUE),\n     header = dashboardHeader(\n       dropdownMenu(\n         type = \"messages\", \n         badgeStatus = \"success\",\n         messageItem(\n           from = \"Support Team\",\n           message = \"This is the content of a message.\",\n           time = \"5 mins\"\n         ),\n         messageItem(\n           from = \"Support Team\",\n           message = \"This is the content of another message.\",\n           time = \"2 hours\"\n         )\n       )\n     ),\n     sidebar = dashboardSidebar(\n       sidebarMenu(\n         menuItem(\"Item 1\", badgeLabel = icon(\"heart\"), badgeColor = \"light-blue\"),\n         menuItem(\"Item 2\", badgeLabel = icon(\"poo\"), badgeColor = \"maroon\")\n       )\n     ),\n     body = dashboardBody(boxes),\n     controlbar = dashboardControlbar(),\n     title = \"Fresh theming\"\n   ),\n   server = function(input, output) { }\n )"},{"path":"beautify-with-bootstraplib.html","id":"beautify-with-bootstraplib","chapter":"8 Beautify with {bslib}","heading":"8 Beautify with {bslib}","text":"bslib (Sievert Cheng 2021) package developed RStudio. built top sass like fresh (Perrier Meyer 2020b).","code":""},{"path":"beautify-with-bootstraplib.html","id":"disclaimer","chapter":"8 Beautify with {bslib}","heading":"8.1 Disclaimer","text":"feature requires {shiny} >= 1.6.0.","code":""},{"path":"beautify-with-bootstraplib.html","id":"plug-and-play-customization","chapter":"8 Beautify with {bslib}","heading":"8.2 Plug and play customization","text":"Like fresh, bslib offers high level set functions allowing quickly customize shiny apps. many users, step enough. bs_theme() seamlessly modifies main CSS properties like:background color, namely bg.foreground color, namely fg.Change default theme colors, also called accents.Modify font. leverages font_google(), font_face() font_link() functions. practice, font_google() caches font resources always available user.Additionally, gives flexibility choose Bootstrap version version_default(). shown Chapter 2, Shiny primarily relies Bootstrap 3. function 3 flavors:Bootstrap 3, \"3\".Bootstrap 4 + compatibility Bootstrap 3, \"4\".Advanced users appreciate ... slot add extra variables bs_add_variables(), literally hundreds choices.bs_update_theme() able update give theme object, generated bs_theme().time, developers may preview resulting theme bs_theme_preview(), passing newly created theme main parameter. instance:gives result shown Figure 8.1.\nFIGURE 8.1: bs_theme_preview feature action\nPassing with_themer = TRUE show live theming tools modify current theme.Let’s try another example. like bring refreshment Bootstrap UI elements one modern UI kit date, namely 98.css, windows 98 CSS kit. CSS assets may accessed jsdelivr, shown . bslib exposes neat tools import extra CSS current theme, bs_add_rules(), calls sass::sass_file() hood:three theme colors #c0c0c0 background colors (except primary), #03158b primary #222222 text. also disable rounded option button borders stay squared.run demonstration, ’ll notice slider input properly\nstyled. ’s surprising since slider shaped Bootstrap Ion.RangeSlider. Therefore, want better appearance, like 98.css, need extra work. output shown Figure 8.2.\nFIGURE 8.2: Modern Windows 98 theme Shiny\n","code":"\nlibrary(bslib)\n\nbs_theme(\n  version = version_default(),\n  bootswatch = NULL,\n  ...,\n  bg = NULL,\n  fg = NULL,\n  primary = NULL,\n  secondary = NULL,\n  success = NULL,\n  info = NULL,\n  warning = NULL,\n  danger = NULL,\n  base_font = NULL,\n  code_font = NULL,\n  heading_font = NULL\n)\nlibrary(shiny)\nneon_theme <- bs_theme(\n  bg = \"#000000\", \n  fg = \"#FFFFFF\", \n  primary = \"#9600FF\", \n  secondary = \"#1900A0\",\n  success = \"#38FF12\",\n  info = \"#00F5FB\",\n  warning = \"#FFF100\",\n  danger = \"#FF00E3\",\n  base_font = \"Marker Felt\",\n  heading_font = \"Marker Felt\",\n  code_font = \"Chalkduster\"\n)\nbs_theme_preview(neon_theme, with_themer = FALSE)\ntheme %>% \n  bs_add_rules(\n    '@import \"https://cdn.jsdelivr.net/npm/98.css@0.1.16/dist/98.min.css\"'\n  )\nwindows98_theme <- bs_theme(\n  bg = \"#c0c0c0\", \n  fg = \"#222222\", \n  primary = \"#03158b\",\n  base_font = c(\"Times\", \"Arial\"), \n  secondary = \"#c0c0c0\", \n  success = \"#c0c0c0\", \n  danger = \"#c0c0c0\", \n  info = \"#c0c0c0\", \n  light = \"#c0c0c0\", \n  dark = \"#c0c0c0\", \n  warning = \"#c0c0c0\",\n  \"font-size-base\" = \"0.75rem\", \n  \"enable-rounded\" = FALSE\n) %>%\n  bs_add_rules(\n    '@import \"https://cdn.jsdelivr.net/npm/98.css@0.1.16/dist/98.min.css\"'\n  ) \n\nwindows98_theme %>% bs_theme_preview()"},{"path":"beautify-with-bootstraplib.html","id":"dynamic-theming","chapter":"8 Beautify with {bslib}","heading":"8.3 Dynamic theming","text":"Now, let’s say design app want give choice vanilla shiny design new cyberpunk theme, created previous section. leverage new session$setCurrentTheme tool allows pass bslib generated themes JavaScript session object. Shiny app contains toggle, value either TRUE FALSE. JavaScript side, first create custom shiny input Shiny.setInputValue get current mode value toggle. TRUE, custom theme applied session$setCurrentTheme observeEvent.bslib theme apply static plots (HTML element, thus part DOM), leverage {thematic}, short,\nprovides sort CSS interface base R plots, ggplot lattice. Specifically, \nShiny context, choose thematic_shiny(). default, sets appropriate background,\nforeground accent colors, like bslib.Note: issue shiny::bindCache described , shiny 1.6.","code":"\nlibrary(thematic)\n\ntheme_toggle <- function() {\n  div(\n    class = \"custom-control custom-switch\", \n    tags$input(\n      id = \"custom_mode\", type = \"checkbox\", class = \"custom-control-input\",\n      onclick = HTML(\"Shiny.setInputValue('dark_mode', document.getElementById('custom_mode').value);\")\n    ),\n    tags$label(\n      \"Custom mode?\", `for` = \"custom_mode\", class = \"custom-control-label\"\n    )\n  )\n}\n\ndefault <- bs_theme()\nui <- fluidPage(\n  theme = default, \n  theme_toggle(),\n  sliderInput(\"obs\", \"Number of observations:\",\n    min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\")\n)\nserver <- function(input, output, session) {\n  observeEvent(input$custom_mode, {\n    session$setCurrentTheme(\n      if (input$custom_mode) neon_theme else default\n    )\n  })\n  \n  output$distPlot <- renderPlot({\n    Sys.sleep(2)\n    hist(rnorm(input$obs))\n  })\n}\nthematic_shiny()\nshinyApp(ui, server)"},{"path":"beautify-with-bootstraplib.html","id":"custom-elements","chapter":"8 Beautify with {bslib}","heading":"8.4 Custom elements","text":"elements core shiny components like numericInput thematic compatible elements plotOutput,\nbslib provides tools create dynamically themeable custom components.Let’s take example simple card Sass code defined :.supercard shadow, takes half page width fixed height.\nNotice background-color takes value $primary SAAS variable,\ninherited Bootstrap 4..supercard_body adds padding card body content., convenience, put Sass code inside R string, even though best practice \nsave file compile sass::sass_file.try run sass::sass(input = sass_str),\nfail, $primary defined. Now goal link custom Sass code\nmain app theme, created bs_theme. leverage bs_dependency function :input refers list Sass rules, sass_str example.theme theme generated bs_theme.name version metadata.case bslib context, ie app pass bs_theme element,\ncreate fallback containing card CSS code.shown, Chapter 4, add dependency card\ntag. Importantly, wrap inside bs_dependency_defer enables us dynamically update theme server\nside, time session$setCurrentTheme invoked.create two simple theme, namely\nwhite dark run app:reader invited exploit run_with_themer capabilities, allows\ndynamically modify current , shown Figure 8.3.\nFIGURE 8.3: bs_theme_preview custom component\n, try without passing theme fluidPage:","code":".supercard {\n    box-shadow: 0 4px 10px 0 rgb(0, 0, 0), 0 4px 20px 0 rgb(0, 0, 0);\n    width: 50%;\n    height: 200px;\n    background-color: $primary;\n    \n    .supercard_body {\n      padding: 0.01em 16px;\n    }\n}\nsass_str <- \"\n  .supercard {\n    box-shadow: 0 4px 10px 0 rgb(0, 0, 0), 0 4px 20px 0 rgb(0, 0, 0);\n    width: 50%;\n    height: 200px;\n    \n    background-color: $primary;\n    .supercard_body {\n      padding: 0.01em 16px;\n    }\n}\"\nlibrary(htmltools)\nsuper_card_dependency <- function(theme) {\n  \n  dep_name <- \"supercard\"\n  dep_version <- \"1.0.0\"\n  \n  if (is_bs_theme(theme)) {\n    bs_dependency(\n      input = sass_str,\n      theme = theme,\n      name = dep_name,\n      version = dep_version\n    )\n  } else {\n    htmlDependency(\n      name = dep_name,\n      version = dep_version,\n      src = \"supercard-1.0.0/css\",\n      stylesheet = \"super-card.css\",\n      package = \"OSUICode\"\n    )\n  }\n}\nsuper_card <- function(...) {\n  div(\n    class = \"supercard\",\n    div(class = \"supercard_body\", ...),\n    bs_dependency_defer(super_card_dependency)\n  )\n}\nwhite_theme <- bs_theme()\ndark_theme <- white_theme %>% \n  bs_theme_update(bg = \"black\", fg = \"white\", primary = \"orange\")\n\n\nui <- fluidPage(\n  theme = white_theme,\n  theme_toggle(),\n  br(),\n  super_card(\"Hello World!\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$custom_mode, {\n    session$setCurrentTheme(\n      if (input$custom_mode) dark_theme else white_theme\n    )\n  })\n}\n\nshinyApp(ui, server)\nui <- fluidPage(super_card(\"Hello World!\"))\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"beautify-with-bootstraplib.html","id":"further-resources","chapter":"8 Beautify with {bslib}","heading":"8.5 Further resources","text":"reader refer bslib various vignettes.","code":""},{"path":"survival-kit-javascript.html","id":"survival-kit-javascript","chapter":"9 JavaScript for Shiny","heading":"9 JavaScript for Shiny","text":"understand Shiny works inside, especially inputs handled, ’ll gradually dive core contains substantial amount JavaScript (JS).chapter brief introduction JS jQuery still necessary book supposed standalone. Advanced JS users may skip part. MDN web docs Mozilla excellent resource.","code":""},{"path":"survival-kit-javascript.html","id":"shiny-javascript-sources","chapter":"9 JavaScript for Shiny","heading":"9.1 Shiny JavaScript sources","text":"Let’s look shiny (Chang et al. 2021) github project. R package, composed standard folders like R, man, tests elements. inst folder contains resources external dependencies like Bootstrap 3, jQuery, datatables, fontawesome, … mentioned Chapter 2 sorted www/shared sub-folder well whole CSS JS Shiny codes. Notice presence minified files like shiny.min.js non minified elements shiny.css. Overall, minification process reduces loading time web page removing comments, extra spaces, thereby decreasing file size. instance shiny.js 6628 lines code, shiny.min.js 4.Notice srcjs/ folder shown Figure 9.1. actually contains pieces reconstruct whole shiny.js file.\nFIGURE 9.1: Shiny JavaScript sources\n_start.js _end.js used Gruntfile.js, grunt-based tool run different tasks concatenate multiple JavaScript files, lint code, minify … See summary.Since Chapter (shiny-input-system) ’ll use script, little understanding basic underlying JavaScript concepts necessary.","code":"grunt.registerTask('default', [\n  'concat',\n  'string-replace',\n  'validateStringReplace',\n  'eslint',\n  'configureBabel',\n  'babel',\n  'uglify'\n]);"},{"path":"survival-kit-javascript.html","id":"introduction-to-javascript","chapter":"9 JavaScript for Shiny","heading":"9.2 Introduction to JavaScript","text":"JavaScript created 1995 Brendan Eich also known ECMAScript (ES). Interestingly, might heard ActionScript, implementation ES Adobe Systems. Nowadays, JavaScript centerpiece web development across websites.quick example. personal blog, probably know Hugo Jekyll, especially R interfaces like blogdown (Xie, Dervieux, Presmanes Hill 2021). tools allow one rapidly develop nice looking blog just minutes, focusing content rather technical aspects, really point! Now, open HTML inspector introduced Chapter 1.2, click elements tab, may open default, uncollapse <head> tag, see lot scripts included, shown Figure 9.2. Similarly <body> tag.\nFIGURE 9.2: website full JavaScript\nthree ways include scripts:Use <script> tag JS code insideAdd onclick attribute HTML tag (preferably button) trigger JS soon clicked (similar event listeners, see )Import external file containing JS code onlyWhether choose first, second third method depends content script. consider JS library jQuery, unfortunately contains much code making challenge understand. often makes users avoid first method.","code":"<script type=\"text/javascript\">\n// JS code here\n<\/script><button id=\"hello\" onclick=\"jsFunction()\">Hello World<\/button><!-- We use the src attribute to link the external file -->\n<script type=\"text/javascript\" src=\"file.js\">"},{"path":"survival-kit-javascript.html","id":"setup","chapter":"9 JavaScript for Shiny","heading":"9.3 Setup","text":"Like R Python, JavaScript (JS) interpreted language. executed client-side, words browser. also means JS code may run without suitable tool. following, ’ll list tools test JS code, even though JS may also run web browser developer tools, demonstrated section 9.6.","code":""},{"path":"survival-kit-javascript.html","id":"install-node","chapter":"9 JavaScript for Shiny","heading":"9.3.1 Node","text":"Node contains interpreter JS well dependencies manager, npm (Node Package Manager). install Node computer, browse website follow installation instructions. Afterwards, open terminal check ifreturns something. , Node may properly installed.prefer installing Node, exists alternatives like repl., offering Node.js online compiler environment. enough follow exercises part.","code":"$ which node\n$ node --version"},{"path":"survival-kit-javascript.html","id":"choose-a-good-ide","chapter":"9 JavaScript for Shiny","heading":"9.3.2 Choose a good IDE","text":"Personally, really like VSCode coding JS, contains Node interpreter allowing seamlessly execute JS code. side note, encourage try dracula color theme, favorite! R user, also like Rstudio IDE, provided Node installed. , explain run JS code IDE’s. section 9.6, show manipulate JS code directly web browser, HTML inspector. method mostly use remaining book since also work HTML CSS time.","code":""},{"path":"survival-kit-javascript.html","id":"first-script","chapter":"9 JavaScript for Shiny","heading":"9.3.3 First Script","text":"Let’s write first script:notice instruction end ;. can run script either Rstudio IDE VSCode.\nFIGURE 9.3: Run JS VSCode\nVSCode, clicking run arrow (top center) Figure 9.3, triggers node hello.js command, tells Node run script. see result right panel (code=0 means execution fine even compute time). run script RStudio IDE, one needs click terminal tab (also open basic terminal) type node hello.js (node mycustompath/hello.js folder containing script). see Hello World message console (see Figure 9.4).\nFIGURE 9.4: Run JS terminal\n","code":"console.log(\"Hello World\");"},{"path":"survival-kit-javascript.html","id":"programming-with-js-basis","chapter":"9 JavaScript for Shiny","heading":"9.4 Programming with JS: basis","text":"now set introduce basis JS. many languages, JS made variables instructions. instructions end ; symbol.","code":""},{"path":"survival-kit-javascript.html","id":"js-types","chapter":"9 JavaScript for Shiny","heading":"9.4.1 JS types","text":"JS defines several types:Number: distinguish integers others (R instance, numeric contains integers double)String: characters (‘blabla’)Boolean: true/falseTo check type element, may use typeof operator.JS, typeof function like R!!! Therefore don’t write typeof('string');.","code":"typeof 1; // number\ntypeof 'pouic'; // string"},{"path":"survival-kit-javascript.html","id":"variables-1","chapter":"9 JavaScript for Shiny","heading":"9.4.2 Variables","text":"Variables key elements programming languages. allow store intermediate results manipulations. JS, variable defined :typea namea valueA valid variable name:Doesn’t use reserved JS name like typeof!Doesn’t start number (123soleil)!Doesn’t include space (total price)!Besides, code style critical element programming, increasing readability, general consistence. several styles, main ones snake_case camelCase. personally use camelCase syntax write variables JS.two ways create variables JavaScript.","code":""},{"path":"survival-kit-javascript.html","id":"const","chapter":"9 JavaScript for Shiny","heading":"9.4.2.1 Const","text":"JavaScript, variable may created const:shown , variables:modifiedCannot share nameMust assigned value","code":"const n = 1;\nn = 2; // error\nconst n = 3; // error\nconst a;\na = 1; // errors"},{"path":"survival-kit-javascript.html","id":"let","chapter":"9 JavaScript for Shiny","heading":"9.4.2.2 let","text":"Another way define variable:may use mathematical operators manipulate variables.List numerical operators JS:+-*/% (modulo)++ (incrementation)-- (decrementation)concatenate two strings, use + symbol.may also know var declare variables. difference let? mainly scope reason:see later still use var shiny core many R packages.","code":"let myVariable = 'welcome';\nmyVariable = 1;\nconsole.log(myVariable);let myNumber = 1; // affectation\nmyNumber--; // decrement\nconsole.log(myNumber); // print 0var i = 1;\n{\n  var i = 2; // this will modify i globally, not locally\n}\nconsole.log(`i is ${i}`); // i is 2.\n\nlet j = 1;\n{\n  let j = 2; // j is only declared locally and not globally!\n}\nconsole.log(`j is ${j}`); // j is 1"},{"path":"survival-kit-javascript.html","id":"conditions","chapter":"9 JavaScript for Shiny","heading":"9.4.3 Conditions","text":"operators check conditions.=== (equal value, equal type B)== (equal B)!== (equal value equal type B)!= (equal B)>, >=<, <=(B) &&(B) ||Importantly, prefer === !== compare elements since 5 == \"5\" return true, generally want!test conditions exists several ways:(condition) { console.log('Test passed'); }(condition) { instruction } else { instruction B }ternary operator shortcut condition ? instruction true : instruction false may chained. complex instructions, recommend using , may affect code readability.Whenever lot possible conditions evaluated, better choose switch.","code":"switch (variable) {\n  case val1: // instruction 1\n  break; // don't forget the break!\n  case val2:  // instruction 2\n  break;\n  default: // when none of val1 and val2 are satisfied\n}"},{"path":"survival-kit-javascript.html","id":"objects","chapter":"9 JavaScript for Shiny","heading":"9.4.4 Objects","text":"JavaScript object oriented programming language (like Python). object defined :typesome propertiessome methods (manipulate properties)Let’s construct first object:comments code:access object property, use object.<propertiy_name>.print human readable version object, JSON.stringify job.introduced string interpolation ${*}. * may valid expression.Methods accessed like properties (may also pass parameters). use refer object . Take note, see lot!JavaScript, already predefined objects interact arrays, dates.","code":"const me = {\n  name : 'Divad',\n  age : 29,\n  music : '',\n  printName: function() {\n    console.log(`I am ${this.name}`);\n  }\n}\n\nme.geek = true; // works (see const variables above)\nconsole.log(JSON.stringify(me)); // print a human readable object.\n  \nconsole.log(me.name);\nconsole.log(me.age);\nconsole.log(me.music);\n// don't repeat yourself!!!\nfor (let key in me) { // here is it ok to use `in`\n console.log(`me[${key}] is ${me[key]}`);\n}\n\nme.printName();\n\nme = {\n  name: 'Paul',\n  age: 40\n} // error (see const variables above)"},{"path":"survival-kit-javascript.html","id":"arrays","chapter":"9 JavaScript for Shiny","heading":"9.4.4.1 Arrays","text":"array structure allowing store information instance:Array may nested:arrays, elements may accessed index, mentioned , first index 0 (1 like R). convenient way print array’s elements use iteration:Note length method returns size array convenient loops. table referencing principal methods arrays (use later).Quite honestly, mainly use push length next chapters.","code":"const table = [1, 'plop'];\ntable.push('hello');\ntable = [2]; // error (as explain in above in the variable part)\nconsole.log(table);const nested = [1, ['a', [1, 2, 3]], 'plop'];\nconsole.log(nested);const nested = [1, ['a', [1, 2, 3]], 'plop'];\nfor (let i of nested) {\n  console.log(i);\n}\n\n// or with the classic approach\nfor (let i = 0; i < nested.length; i++) {\n  console.log(nested[i]);\n}"},{"path":"survival-kit-javascript.html","id":"strings","chapter":"9 JavaScript for Shiny","heading":"9.4.4.2 Strings","text":"main methods related String object (character R).","code":""},{"path":"survival-kit-javascript.html","id":"math","chapter":"9 JavaScript for Shiny","heading":"9.4.4.3 Math","text":"mention useful methods handle mathematical objects.classic functions like sqrt, trigonometric functions course available. call Math.* prefix.","code":""},{"path":"survival-kit-javascript.html","id":"iterations","chapter":"9 JavaScript for Shiny","heading":"9.4.5 Iterations","text":"Iterations allow repeat instruction set instructions multiple times. Let’s assume array containing 100000 random numbers. automatically print ? going see !","code":""},{"path":"survival-kit-javascript.html","id":"for-loops","chapter":"9 JavaScript for Shiny","heading":"9.4.5.1 For loops","text":"loop multiple uses. classic case start defining index (variable). set upper bound (array length) finish incrementing index value. code curly braces executed.way created array bit special deserves explanations:Array method define new array. call way Array(arrayLength) since don’t want write 100 values 1 1. try console.log(Array(10)); get [ <10 empty items> ], meaning 10 slots available nothing inside yet.keys defines keys table index. reminder, since Array(10) object (check console.log(typeof Array(10));) may use Array(10).keys(). creates Array Iterator.... spread syntax, called iterable object (see ).Contrary R, JavaScript index starts 0 (1)! good keep mind mix R JS.Let’s look forEach method arrays (introduced ES5):another way create loop (introduced ES6):loop use? answer : depends situation! Actually, even exists ways (replace get indexes array, like first code, really recommended).","code":"const table = [...Array(100).keys()]; // create an empty array of length 100 (so from 0 to 99, not from 1 to 100 like in R!!!)\nfor (let i = 0; i < table.length; i++) {\n    console.log(table[i]); \n}const letters = [\"a\", \"b\", \"c\", \"d\"];\nletters.forEach((letter) => {\n  console.log(letter);\n});const samples = ['blabla', 1, null]; // this is an array!\nfor (let sample of samples) {\n console.log(sample);\n}"},{"path":"survival-kit-javascript.html","id":"other-iterations-while","chapter":"9 JavaScript for Shiny","heading":"9.4.5.2 Other iterations: while","text":"loops another way iterate, long condition defined TRUE. incrementation step done end instruction.","code":"const h = 3; i = 0;\nwhile (i <= h) {\n  console.log(i);\n  i++; // we need to increment to avoid infinite loop\n}"},{"path":"survival-kit-javascript.html","id":"functions-1","chapter":"9 JavaScript for Shiny","heading":"9.4.6 Functions","text":"Functions useful wrap succession instructions accomplish given task. Defining functions allows programmers save time (less copy paste, less search replace), make less errors easily share code. modern JavaScript (ES6), functions defined follows:functions computes maximum 2 provided numbers. comments scoping rules: variables defined inside function available function, available outside function definition. noted functions may use global variables defined outside .","code":"const a = 1;\nconst fun = (parm1, parm2) => {\n  console.log(a);\n  let p = 3;\n  return Math.max(parm1, parm2); // I use the Math object that contains the max method\n}\nlet res = fun(1, 2);\nconsole.log(res); // prints a and 2. a global\nconsole.log(p); // fails because p was defined inside the function"},{"path":"survival-kit-javascript.html","id":"about-js-modules","chapter":"9 JavaScript for Shiny","heading":"9.4.6.1 Export functions: about modules","text":"happens wrote 100 functions want reuse different scripts? prevent copying pasting, now introduce concept modules. Let’s save function script utils.js:create test.js script folder calls findMax function. , import corresponding module:","code":"const findMax = (parm1, parm2) => {\n  return Math.max(parm1, parm2); // I use the Math object that contains the max method\n}\n\nmodule.exports = {\n  findMax : findMax\n}const {findMax} = require('./utils.js');\nfindMax(1, 2); // prints 2"},{"path":"survival-kit-javascript.html","id":"event-listeners","chapter":"9 JavaScript for Shiny","heading":"9.4.7 Event listeners","text":"explore web application, clicking button usually triggers something like computation, modal alert. work? JavaScript, interactivity plays critical role. Indeed, want web application react user inputs like mouse clicks keyboard events. introduce DOM events.Let’s consider basic HTML button.JavaScript side, first capture button element using id selector (getElementById).apply addEventListener method. short, event listener program triggers given event occurs (can add multiple event listeners per HTML element). takes 2 main parameters:event: click, change, mouseover, …function callWe compare JavaScript events Shiny observeEvent listening specific user input:","code":"<button id=\"mybutton\">Go!<\/button>const btn = document.getElementById('mybutton');btn.addEventListener('click', function() {\n  alert('Thanks!');\n});\nobserveEvent(trigger, {\n  # instructions\n})"},{"path":"survival-kit-javascript.html","id":"jquery","chapter":"9 JavaScript for Shiny","heading":"9.5 jQuery","text":"","code":""},{"path":"survival-kit-javascript.html","id":"introduction-1","chapter":"9 JavaScript for Shiny","heading":"9.5.1 Introduction","text":"jQuery famous JavaScript library providing user friendly interface manipulate DOM present almost actual websites. slightly easier (understand convenient use) vanilla JS, even though web developers tend avoid go back vanilla JS (Bootstrap 5, next iteration Bootstrap rely jQuery anymore). use jQuery web page, must include code either downloading code putting minified JS file HTML setting link CDN:","code":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Including jQuery<\/title>\n    <!-- How to include jQuery -->\n    <script src=\"https://code.jquery.com/jquery-3.5.0.js\"><\/script>\n  <\/head>\n  <body>\n   \n    <p>Hello World<\/p>\n  \n  <script>\n    $('p').css('color', 'red');\n  <\/script>\n   \n  <\/body>\n<\/html>"},{"path":"survival-kit-javascript.html","id":"syntax","chapter":"9 JavaScript for Shiny","heading":"9.5.2 Syntax","text":"minimal jQuery code representing philosophy (“write less, .”):selector slot stands jQuery selector like class, id, element, [attribute], :input (select input elements) many . reminder, let’s consider following example:select interact element, use JavaScript jQuery:course possible chain selectors:","code":"$(selector).action();<p class=\"text\">Hello World<\/p>let inner = document.getElementsByClassName('text').innerHTML; // vanilla JS\nlet inner = $('.text').html(); // jQuery<ul class=\"list\">\n  <li class=\"item\">1<\/li>\n  <li class=\"item\">2<\/li>\n  <li class=\"item\">3<\/li>\n  <li class=\"item\" id=\"precious-item\">4<\/li>\n<\/ul>\n\n<ul class=\"list\" id=\"list2\">\n  <li class=\"item\">1<\/li>\n  <li class=\"item\">2<\/li>\n  <li class=\"item\">3<\/li>\n  <li class=\"item\">4<\/li>\n<\/ul>let items = $('.list .item'); // will return an array containing 8 li tags\nlet otherItems = $('#list2 .item'); // will select only li tags from the second ul element\nlet lists = $('ul'); // will return an array with 2 ul elements\nlet firstItem = $('#list2:first-child'); // will return the first li element of the second ul."},{"path":"survival-kit-javascript.html","id":"useful-functions","chapter":"9 JavaScript for Shiny","heading":"9.5.3 Useful functions","text":"exist filtering functions dedicated simplify item selection. list containing mostly used Shiny.","code":""},{"path":"survival-kit-javascript.html","id":"travel-in-the-dom","chapter":"9 JavaScript for Shiny","heading":"9.5.3.1 Travel in the DOM","text":"","code":""},{"path":"survival-kit-javascript.html","id":"manipulate-tags","chapter":"9 JavaScript for Shiny","heading":"9.5.3.2 Manipulate tags","text":"list main jQuery methods manipulate tags (adding class, css property…): add methods","code":""},{"path":"survival-kit-javascript.html","id":"chaining-jquery-methods","chapter":"9 JavaScript for Shiny","heading":"9.5.4 Chaining jQuery methods","text":"lot jQuery methods may chained, like pipe operations R.end chain ; step indented 2 spaces right direction:","code":"<ul>\n  <li>Item 1<\/li>\n  <li>Item 2<\/li>\n  <li>Item 3<\/li>\n  <li>Item 4<\/li>\n  <li>Item 5<\/li>\n<\/ul>$('ul')\n  .first()\n  .css('color', 'green') // add some style with css\n  .attr('id', 'myAwesomeItem') // add an id attribute\n  .addClass('amazing-ul');"},{"path":"survival-kit-javascript.html","id":"iterations-1","chapter":"9 JavaScript for Shiny","heading":"9.5.5 Iterations","text":"Like vanilla JavaScript, possible iterations jQuery. Let’s consider following HTML elements:apply method change style matched element step step:Notice following code $('li').css('visibility', 'hidden'); exactly ! explained implicit iteration process handled jQuery methods.map methods different purpose. creates new object based provided one.","code":"<ul>\n  <li>Item 1<\/li>\n  <li>Item 2<\/li>\n<\/ul>$('li').each(function() {\n  $(this).css('visibility', 'hidden'); // will hide all li items\n});const items = [0, 1, 2, 3, 4, 5];\nconst threshold = 3;\n\nlet filteredItems = $.map(items, function(i) {\n  // removes all items > threshold\n  if (i > threshold) \n    return null;\n  return i;\n});"},{"path":"survival-kit-javascript.html","id":"good-practice","chapter":"9 JavaScript for Shiny","heading":"9.5.6 Good practice","text":"recommended wrap jQuery code follows:Indeed, guess happen try modify element even exist? code make sure document ready starting jQuery manipulation.","code":"$(document).ready(function(){\n  // your code\n});\n\n// or a shortcut\n\n$(function() {\n  // your code\n});"},{"path":"survival-kit-javascript.html","id":"events","chapter":"9 JavaScript for Shiny","heading":"9.5.7 Events","text":"jQuery exists significant number methods related events. popular:.event frequently used Shiny since allows pass custom events part JS predefined events. instance shinydashboard (Chang Borges Ribeiro 2018) relies specific HTML/JavaScript/CSS template including homemade API handling dashboard events. Don’t worry section clear moment. see practical examples following chapters.","code":"$(element).click(); // click event\n$(element).change(); // trigger change on an element\n$(element).on('click', function() {\n // whatever\n}); // attach an event handler function. Here we add click for the example\n$(element).one('click', function() {\n // whatever\n}); // the difference with on is that one will trigger only once\n$(element).resize(); // useful to trigger plot resize in Shiny so that they correctly fit their container\n$(element).trigger('change') // similar to $(element).change(); You will find it in the Shiny core."},{"path":"survival-kit-javascript.html","id":"extending-objects","chapter":"9 JavaScript for Shiny","heading":"9.5.8 Extending objects","text":"last feature need mention jQuery ability extend objects additional properties /method.vanilla JS use Object.defineProperty:","code":"// jQuery way\n$(function() {\n  let object1 = { apple: 0 };\n  $.extend(object1, {\n    print: function() {\n      console.log(this);\n    }\n  });\n  object1.print();\n});// pure JavaScript\nObject.defineProperty(object1, 'print', {\n  value: function() {\n    console.log(this);\n  },\n  writable: false\n});"},{"path":"survival-kit-javascript.html","id":"shiny-js-inspector","chapter":"9 JavaScript for Shiny","heading":"9.6 Shiny, JavaScript and the HTML inspector","text":"part gave elementary JS knowledge. section comes back main point book, Shiny. describe leverage developer tools test,run debug JavaScript code related Shiny app.","code":""},{"path":"survival-kit-javascript.html","id":"the-console-panel","chapter":"9 JavaScript for Shiny","heading":"9.6.1 The console panel","text":"developing JS code, often put console.log(var) calls track content given variable check code supposed . resulting messages, errors warnings printing console, also called Read-eval-print loop (REPL) suitable experiment practice new JS/jQuery skills.","code":""},{"path":"survival-kit-javascript.html","id":"a-real-repl","chapter":"9 JavaScript for Shiny","heading":"9.6.1.1 A real REPL","text":"warm , run shiny app open Chrome DevTools. Notice 2 Console tabs (next Elements bottom), depicted Figure 9.5. prefer using bottom one still see Elements tab preview DOM modifications real time.\nFIGURE 9.5: Console panel DevTools\nInterestingly, may access element contained window. Copy paste $(\"body\").addClass(\"plop\"); prompt. Notice happens Elements tab.","code":"\nui <- fluidPage()\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"survival-kit-javascript.html","id":"track-errors-and-warnings","chapter":"9 JavaScript for Shiny","heading":"9.6.1.2 Track errors and warnings","text":"discussed earlier book, lot Shiny app issues Stack Overflow RStudio community easily solved quickly inspecting console.","code":""},{"path":"survival-kit-javascript.html","id":"broken-shiny-app-debug","chapter":"9 JavaScript for Shiny","heading":"9.6.2 Debug Shiny/JS code with the inspector","text":"debug Shiny apps inspector, scripts folder accessible app like www/ folder using shiny::addResourcePath. Moreover,\nminified files, must source maps, allow reconstruct original scripts, minification process. instance, Shiny shiny.min.js.map. practice, R packages bundling HTML templates ship files since quite large (see package size restriction CRAN). framework7 HTML template, top built shinyMobile [R-shinyMobile] source maps size can reach 5MB obviously big include R package.following, consider simple shiny app deployed shinyapps.io, notification displayed JavaScript soon user clicks action button. also made typos code goal find fix .Browse appOpen Chrome DevToolsClick action button (pretty sure clicked step 2 ;))expected shown Figure 9.6, console displays \nerror message: Uncaught TypeError: read property 'show' undefined. Sounds good isn’t ?\nFIGURE 9.6: Error console panel\nExpand error message show stack trace. see error occurred onclick event calling sendNotif function. Interestingly, can open file clicking provided link (notif.js:2). get layout similar Figure 9.7, depending screen width.\nFIGURE 9.7: Inspect source causing error\nLet’s briefly describe Figure 9.7. left side, can navigate files accessible web server, shiny internal resources, shiny external dependencies (like Bootstrap 3) well scripts. app deployed shinyapps.io, scripts located folder starting _w_, corresponds shinyapps.io workerId (detail important understand. See ). central part contains opened script like classic IDE. right side displays debugging tools may trigger clicking corresponding accordion. scope shows variables/object values break point, watch allows track specific elements Event listener Breakpoints allows stop given listener type. create new “watcher” entering typeof message clicking add icon check message type within sendNotif function. Watched expressions saved close browser.Let’s briefly describe Figure 9.7. left side, can navigate files accessible web server, shiny internal resources, shiny external dependencies (like Bootstrap 3) well scripts. app deployed shinyapps.io, scripts located folder starting _w_, corresponds shinyapps.io workerId (detail important understand. See ). central part contains opened script like classic IDE. right side displays debugging tools may trigger clicking corresponding accordion. scope shows variables/object values break point, watch allows track specific elements Event listener Breakpoints allows stop given listener type. create new “watcher” entering typeof message clicking add icon check message type within sendNotif function. Watched expressions saved close browser.Put break point line 2 clicking left side center panel click action button trigger break point. also additionally set 2 Watch Expressions (message duration) type string number, respectively, depicted Figure 9.8. According results, nothing seems wrong function arguments.Put break point line 2 clicking left side center panel click action button trigger break point. also additionally set 2 Watch Expressions (message duration) type string number, respectively, depicted Figure 9.8. According results, nothing seems wrong function arguments.\nFIGURE 9.8: Inspection scope breakpoint\nerror message Uncaught TypeError: read property 'show' undefined actually means notification exist. Try typing Shiny.notification console. ’ll get undefined. Instead, console suggests\nShiny.notifications. Let’s replace wrong code notif.js script save .\nClick “Resume script execution” blue button (top left right panel). Notice notification displayed error thrown.Congrats! ’ve just debugged first shiny app web inspector. practice, code probably much complex example workflow remains .","code":""},{"path":"survival-kit-javascript.html","id":"exercises-2","chapter":"9 JavaScript for Shiny","heading":"9.7 Exercises","text":"JavaScript console REPL, JavaScript exercises may done inside, except exercise 3 also involves HTML. case, reader may browse jsfiddle.","code":""},{"path":"survival-kit-javascript.html","id":"exercise-1-define-variables","chapter":"9 JavaScript for Shiny","heading":"9.7.1 Exercise 1: define variables","text":"Play example ","code":"let myNumber = 1; // affectation\nmyNumber--; // decrement\nconsole.log(myNumber); // print 0"},{"path":"survival-kit-javascript.html","id":"exercise-2-define-objects","chapter":"9 JavaScript for Shiny","heading":"9.7.2 Exercise 2: define objects","text":"object skeleton.Fill random values.Access name property.Create printAge method, returns age. Hint: refers object . instance .name gives name property.","code":"const me = {\n  name : ,\n  age : ,\n  music : ,\n  printName: function() {\n    console.log(`I am ${}`);\n  }\n}"},{"path":"survival-kit-javascript.html","id":"exercise-3-jquery","chapter":"9 JavaScript for Shiny","heading":"9.7.3 Exercise 3: jQuery","text":"JSFiddle allows insert HTML, CSS JavaScript test\ncode, share . also require specific configuration machine focus testing!Go JSFiddleInsert following HTML code chunk HTML sub-window.basic HTML skeletonIn JavaScript windows, select jQuery 3.4.1 dropdown menu (3.4.1? latest Shiny release relies version. therefore best practice ensure dependencies similar, least major version).Since best practice run jQuery code document ready (avoiding target non existing elements), wrap JS code following:Create event listener change third item color soon one click .\nHint 1: select specific item may use $(selector:eq()) index element. Keep mind JavaScript starts 0 1 like R!\nHint 2: reminder, create event listener jQuery, use following pattern.","code":"<!DOCTYPE HTML>\n<html>\n  <head>\n  <!-- head content here -->\n  <\/head>\n  <body>\n    <ul>\n      <li>Item 1<\/li>\n      <li>Item 2<\/li>\n      <li>Item 3<\/li>\n      <li>Item 4<\/li>\n      <li>Item 5<\/li>\n    <\/ul>\n  <\/body>\n<\/html>$(function() {\n  // your code\n});\n\n// or a more explicit syntax\n$(document).ready(function() {\n  // code\n});$(\"selector\").on(\"event_name\", function(e) {\n  // your logic\n});"},{"path":"survival-kit-javascript.html","id":"exercise-4-a-pure-js-action-button","chapter":"9 JavaScript for Shiny","heading":"9.7.4 Exercise 4: a pure JS action button","text":"another example button element attached event listener. Clicking button increment value 1. Fill blanks!","code":"<!DOCTYPE HTML>\n<html>\n  <head>\n  <!-- head content here -->\n  <\/head>\n  <body>\n    <button>click<\/button>\n  <\/body>\n<\/html>$(function() {\n    \n  // recover the button inner html\n  const btnText = ...;\n\n    // event listener for button element\n    $(...).click(function() {\n    var val = ...;\n    // (1) increment button \n    // (2) add the button value to the inner text\n    ...\n    \n    // show alert given condition\n    if (val > 3) {\n      // do whatever you want\n        ...\n    }\n  });\n  \n});"},{"path":"shiny-intro.html","id":"shiny-intro","chapter":"10 Shiny’s internal: session and websockets","heading":"10 Shiny’s internal: session and websockets","text":"chapter, answer following question:R/JavaScript communication achieved?point, users may find options(shiny.minified = FALSE) debug Shiny.js core.","code":""},{"path":"shiny-intro.html","id":"shiny-js-object","chapter":"10 Shiny’s internal: session and websockets","heading":"10.1 The Shiny JavaScript object","text":"Shiny object exported top shiny.js file.3 words, means may use object properties within HTML inspector console tab, JavaScript file shiny app :object contains many properties methods shown Figure 10.1. particular interest, like Shiny.setInputValue, Shiny.addCustomMessageHandler, Shiny.shinyapps, Shiny.bindAll, … detailed later.\nFIGURE 10.1: Shiny JavaScript object\n","code":"\nui <- fluidPage(\n  tags$script(\n    \"$(function() {\n      console.log(Shiny);\n    });\n    \"\n  )\n)\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"shiny-intro.html","id":"shiny-websocket","chapter":"10 Shiny’s internal: session and websockets","heading":"10.2 Websocket: R/JS bidirectional communication","text":"R (server) JavaScript (client) communicate? built-Shiny feature highlighted , leverages httpuv package.","code":""},{"path":"shiny-intro.html","id":"what-is-a-websocket","chapter":"10 Shiny’s internal: session and websockets","heading":"10.2.1 What is a websocket?","text":"going let’s define websocket. advanced technology allowing bidirectional communication (multiple) client(s) server. instance, chat system may built top websocket.4 server generally created using Node.js libraries like ws client JavaScript. R context, server created httpuv (Cheng Chang 2021) client either {websocket} (Chang et al. 2020) (see ) directly JavaScript, described later:server side, startServer expects host, port app. case websockets, app list containing onWSOpen function defining actions perform connection established. actions defined httpuv WebSocket R6 class:onMessage invoked whenever message received connection.onClose invoked connection closed.send sends message server (client).client, may use {websocket} WebSocket class provided websocket package. soon new socket instance created, server onWSOpen function called displays welcome message. message sent client, received server sent back client.However, Shiny use {websocket}! mentioned earlier, client built directly JS :host port must identical server client side!open file web browser, clicking button send message server, shown Figure 10.2.\nFIGURE 10.2: Server client communication\nreader must understand Shiny inputs/outputs modified client end user, lot exchanges R JS, websocket. following, briefly describe Shiny leverages technology, server client side.","code":"\nlibrary(httpuv)\n# set the server\ns <- startServer(\"127.0.0.1\", 8080,\n  list(\n    onWSOpen = function(ws) {\n      # The ws object is a WebSocket object\n      cat(\"Server connection opened.\\n\")\n      \n      ws$onMessage(function(binary, message) {\n        cat(\"Server received message:\", message, \"\\n\")\n        ws$send(\"Hello client!\")\n      })\n      ws$onClose(function() {\n        cat(\"Server connection closed.\\n\")\n      })\n    }\n  )\n)\nlibrary(websocket)\n# set the client\nws <- websocket::WebSocket$new(\"ws://127.0.0.1:8080/\")\nws$onMessage(function(event) {\n  cat(\"Client received message:\", event$data, \"\\n\")\n})\n\n# Wait for a moment before running next line\nws$send(\"Hello server!\")\n\n# Close client\nws$close()<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <script language=\"javascript\">\n      // displays an alert \n      var mySocket = new WebSocket(\"ws://127.0.0.1:8080\");\n      mySocket.onopen = function (event) {\n        // exampleSocket.send(\"Client connected!\"); \n      };\n      mySocket.onmessage = function (event) {\n        console.log(event.data);\n      };\n    <\/script>\n    <title>Websocket Example<\/title>\n  <\/head>\n  <body>\n    <!-- onclick attributes applies the JavaScript function changeColor define above -->\n    <button onclick=\"mySocket.send('Hello server!')\">Say hello to the server<\/button>\n  <\/body>\n<\/html>"},{"path":"shiny-intro.html","id":"shiny-app-life-cycle","chapter":"10 Shiny’s internal: session and websockets","heading":"10.2.2 Shiny app life-cycle","text":"Let’s first try reconstruct life cycle Shiny app. really happens one browse shiny app url?Shiny Apps usually hosted environments running different versions shiny server:Shiny server open source.Shiny server pro.RStudio Connect.shinyapps.io.Whenever user (client) accesses shiny app web browser, series events occurs (Figure 10.3):client sends HTTP CONNECT request server (Shiny server).server starts targeted app runApp.hood, latter :Call shinyApp returns shiny app object composed server function UI.\nuiHttpHandler responsible adding internal shiny dependencies like json2, jQuery shiny css/javascript files provided piece UI, discussed chapter 2.Call startApp creates HTTP websocket (WS) handlers. WS handlers responsible controlling WS behavior app starts, message received client app closes. also creates static path containing CSS, JS files may accessed browser.Call startServer httpuv, starts HTTP server opens server websocket connection.R code contain errors, server returns Shiny UI HTML code client, displayed web browser.returned HTML contains necessary JavaScript subsequently open client websocket connection.\nFIGURE 10.3: Shiny App lifecycle\n, client server free exchange information. following part, provide details server client websocket connection.","code":""},{"path":"shiny-intro.html","id":"shiny-session","chapter":"10 Shiny’s internal: session and websockets","heading":"10.2.3 The Shiny session object","text":"won’t able go anywhere without giving reminders Shiny session object. say object? session actually instance ShinySession R6 class.\nImportantly, session unique given user. means 2 different clients share session. important since contains information input, output, client data…Upon calling ShinySession$new(), initialization method takes one parameter, namely websocket. shown last section, websocket allows bidirectional exchanges R JS. session object exposes two methods communicate JavaScript:sendCustomMessage sends messages R JS. calls private sendMessage method calls write. message sent session opened, websocket private$websocket$send(json). shiny.trace option TRUE, message showing sent JSON displayed, useful debugging.sendInputMessage used update inputs server. message stored message queue ultimately sent websocket private$websocket$send(json).code extracted shiny.R file.worry clear moment. discuss elements following sections.","code":"\nsendCustomMessage = function(type, message) {\n  data <- list()\n  data[[type]] <- message\n  private$sendMessage(custom = data)\n}\n\nsendInputMessage = function(inputId, message) {\n  data <- list(id = inputId, message = message)\n  \n  # Add to input message queue\n  private$inputMessageQueue[[length(private$inputMessageQueue) + 1]] <- data\n  # Needed so that Shiny knows to actually flush the input message queue\n  self$requestFlush()\n}\n\n\nsendMessage = function(...) {\n  # This function is a wrapper for $write\n  msg <- list(...)\n  if (anyUnnamed(msg)) {\n    stop(\"All arguments to sendMessage must be named.\")\n  }\n  private$write(toJSON(msg))\n}\n\n\nwrite = function(json) {\n  if (self$closed){\n    return()\n  }\n  traceOption <- getOption('shiny.trace', FALSE)\n  if (isTRUE(traceOption) || traceOption == \"send\")\n    message('SEND ',\n            gsub('(?m)base64,[a-zA-Z0-9+/=]+','[base64 data]',json,perl=TRUE))\n  private$websocket$send(json)\n}\n# ..."},{"path":"shiny-intro.html","id":"shiny-and-websocket","chapter":"10 Shiny’s internal: session and websockets","heading":"10.2.4 Shiny and websocket","text":"","code":""},{"path":"shiny-intro.html","id":"server-websocket","chapter":"10 Shiny’s internal: session and websockets","heading":"10.2.4.1 Server websocket","text":"server, R, websocket initiated startApp function, leveraging httpuv package. Websocket handlers defined createAppHandlers:Overall, drive server websocket behavior. Shiny session initialized, message sent WS, providing sessionId, workerId user client (see Shiny.shinyapp.config section 10.1):ws$onMessage describes happen server receives message client.\napplies messageHandler function , short, :Decode received message.Process message. initialization, client send message init method tag,\ntells Shiny manage input (manageInputs(msg$data, now = TRUE)) running observer (since input don’t value yet). initialization, client messages update tag, meaning wait observers run .Finally, server connection closed, client connections also closed.handlers applied handlerManager$addWSHandler(appHandlers$ws, \"/\", tail = TRUE):Note R option options(shiny.trace = TRUE) allows websocket messages displayed directly R console.","code":"\nws = function(ws) {\n  # many things\n  \n  shinysession <- ShinySession$new(ws)\n  \n  ws$onMessage(function(binary, msg) {\n    # If unhandled errors occur, make sure they get properly logged\n    withLogErrors(messageHandler(binary, msg))\n  })\n  \n  ws$onClose(function() {\n    shinysession$wsClosed()\n    appsByToken$remove(shinysession$token)\n    appsNeedingFlush$remove(shinysession$token)\n  })\n  return(TRUE)\n}\nprivate$sendMessage(\n  config = list(\n    workerId = workerId(),\n    sessionId = self$token,\n    user = self$user\n  )\n)\n# see middleware.R\nhttpuvApp <- handlerManager$createHttpuvApp()\n\nonWSOpen = function(ws) {\n  return(wsHandlers$invoke(ws))\n}\n\naddWSHandler = function(wsHandler, key, tail = FALSE) {\n  wsHandlers$add(wsHandler, key, tail)\n}"},{"path":"shiny-intro.html","id":"websocket-client-side","chapter":"10 Shiny’s internal: session and websockets","heading":"10.2.4.2 Websocket client side","text":"JS side, socket creation occurs shinyapps.js file:WebSocket object. protocol chosen protocol (either ws wss using https). window.location.host contains host name port.\nconnection opened, events handled onopen event registry:shiny:connected event triggered, disconnected overlay (famous grayed screen) removed DOM. Initial input values sent server via send method. onmessage registry aims handling messages received server:subsequently invokes dispatchMessage method sends message handlers (_sendMessagesToHandlers), triggering shiny:message event. Shiny internal custom provided handlers (understand user-defined) stored separate arrays. time, message type matches given handler, treated. instance, dedicated internal handler input messages, bridges gap given input corresponding input binding. handler eventually triggers inputBinding.receiveMessage method input value updated client. discuss detail following section 12.2.Finally onclose method called websocket connection closed.connection opened, shiny:disconnected event triggered. , disconnect overlay added DOM (grayed screen) socket removed.error occurs R code, server sends error websocket, captured client displayed.","code":"var ws = new WebSocket(protocol + '//' + window.location.host + defaultPath);socket.onopen = function() {\n  hasOpened = true;\n\n  $(document).trigger({\n    type: 'shiny:connected',\n    socket: socket\n  });\n\n  self.onConnected(); // remove overlay\n\n  socket.send(JSON.stringify({\n    method: 'init',\n    data: self.$initialInput\n  }));\n\n  while (self.$pendingMessages.length) {\n    var msg = self.$pendingMessages.shift();\n    socket.send(msg);\n  }\n}socket.onmessage = function(e) {\n  self.dispatchMessage(e.data);\n};socket.onclose = function() {\n  // These things are needed only if we've successfully opened the\n  // websocket.\n  if (hasOpened) {\n    $(document).trigger({\n      type: 'shiny:disconnected',\n      socket: socket\n    });\n\n    self.$notifyDisconnected();\n  }\n\n  self.onDisconnected(); // Must be run before self.$removeSocket()\n  self.$removeSocket();\n}"},{"path":"shiny-intro.html","id":"example","chapter":"10 Shiny’s internal: session and websockets","heading":"10.2.5 Example","text":"following, show inspect websocket exchanges web browser. Let’s run following app (see 10.4, left panel):opening HTML inspector, select network tab search websocket list. choosing message tab, may inspect R JavaScript say others. stated , first message sent contains initial input values. Shiny recalculates table, notify recalculation done becomes idle. second message received R updating select input, triggers event cycle.Although complex, extremely useful check whether input / output communication working properly. , see error field identifying issue.Shiny.shinyapp.$socket.readyState returns state socket connection. 1 app running. instances socket closed, error raised.\nFIGURE 10.4: Shiny websocket\nsee can even bypass UI element update input value directly via websocket using Shiny.shinyapp.$sendMsg update method. captured server side triggers output recalculation. ’ll discuss next section 11.","code":"\nlibrary(shiny)\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"variable\", \"Variable:\",\n                c(\"Cylinders\" = \"cyl\",\n                  \"Transmission\" = \"am\",\n                  \"Gears\" = \"gear\")),\n    tableOutput(\"data\")\n  ),\n  server = function(input, output) {\n    output$data <- renderTable({\n      mtcars[, c(\"mpg\", input$variable), drop = FALSE]\n    }, rownames = TRUE)\n  }\n)\nupdateObsVal <- function(value) {\n  sprintf(\n    \"Shiny.shinyapp.$sendMsg(JSON.stringify({\n      method: 'update',\n      data: {obs: %s}\n    }));\",\n    value\n  )\n}\n\n# below we shunt the slider input by sending message\n# directly through the websocket\n\nui <- fluidPage(\n  tags$button(\n    \"Update obs value\",\n    onclick = updateObsVal(4)\n  ),\n  sliderInput(\"obs\", \"Number of observations:\",\n              min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\")\n)\n\nserver <- function(input, output, session) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\n\nshinyApp(ui, server)"},{"path":"shiny-intro.html","id":"recap","chapter":"10 Shiny’s internal: session and websockets","heading":"10.2.6 Recap","text":"summary server client websocket parts. Shiny app shown Figure 10.5 consists actionButton sliderInput. Clicking action button triggers observeEvent fires updateSlideInput. hood, clicking action button sends message client server. message processed corresponding input value updated server, thereby invalidating observer, reactive element. updateSlideInput sends message back client containing id input update. message received processed onMessage event manager, redirects message related message handler, thereby updating corresponding input element client. underlying mechanisms going detailed next part 11. may imagine slider updated, also sends message server, triggering cascade reactions.let imagine many messages exchanged complex apps!\nFIGURE 10.5: Websocket allows communication server client.\n","code":""},{"path":"shiny-input-system.html","id":"shiny-input-system","chapter":"11 Shiny’s input system","heading":"11 Shiny’s input system","text":"Shiny inputs key elements Shiny apps since way end-user interact app. may know sliderInput, numericInput, checkboxInput sometimes may need fancier elements like knobInput shinyWidgets, depicted Figure 11.1 even sophisticated inputs like smartSelect shinyMobile (Figure 11.1, right panel). ever wondered mechanisms behind inputs? ever dreamt develop ?goal section understand Shiny inputs work create new ones.\nFIGURE 11.1: Custom shiny inputs. left: knobInput shinyWidgets; right: smart select shinyMobile\n","code":""},{"path":"shiny-input-system.html","id":"input-bindings","chapter":"11 Shiny’s input system","heading":"11.1 Input bindings","text":"run app, time works just fine! question , inputs (outputs) handled allow happen? Upon initialization, Shiny runs several JavaScript functions. accessible programmer (see usecase ). illustrate , let’s run app .open HTML inspector run Shiny.unbindAll(document) (document scope, search). Try change slider input. notice nothing happens. Now let’s type Shiny.bindAll(document) update slider value. Moving slider successfully update plot. Magic isn’t ? simply shows inputs bound, nothing happens binding inputs necessary.consider another example multiple inputs.Let’s see input binding works.","code":"\nlibrary(shiny)\nui <- fluidPage(\n  sliderInput(\"obs\", \"Number of observations:\",\n              min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\")\n)\n\nserver <- function(input, output, session) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)\nui <- fluidPage(\n  actionButton(\"unbind\", \"Unbind inputs\", onclick = \"Shiny.unbindAll();\"),\n  actionButton(\"bind\", \"Bind inputs\", onclick = \"Shiny.bindAll();\"),\n  lapply(1:3, function(i) {\n    textInput(paste0(\"text_\", i), paste(\"Text\", i))\n  }),\n  lapply(1:3, function(i) {\n    uiOutput(paste0(\"val_\", i))\n  })\n)\n\nserver <- function(input, output, session) {\n  lapply(1:3, function(i) {\n    output[[paste0(\"val_\", i)]] <- renderPrint(input[[paste0(\"text_\", i)]])\n  })\n}\n\nshinyApp(ui, server)"},{"path":"shiny-input-system.html","id":"input-structure","chapter":"11 Shiny’s input system","heading":"11.1.1 Input structure","text":"input element given <input> tag well several attributes.id guarantees input uniqueness way shiny recover input$<id> element.type like checkbox, button,\ntext …type may also good target input binding find method, explained .class may required find element DOM. convenient \ninput binding target class (associated elements) rather id corresponds one element definition.\nalso used CSS apply styles.value holds input value.","code":"<input id = inputId type = \"text\" class = \"input-text\" value = value>"},{"path":"shiny-input-system.html","id":"binding-shiny-inputs","chapter":"11 Shiny’s input system","heading":"11.1.2 Binding Shiny inputs","text":"input binding allows Shiny identify instance given input may input. instance, slider input must update whenever range dragged left right arrows keyboard pressed. relies class defined input_binding.js file.Let’s describe method chronologically. better convenience, book side package contains step step demonstrations may found . example called customTextInputExample, takes input binding step parameter. instance customTextInputExample(1) invoke first step.","code":""},{"path":"shiny-input-system.html","id":"find-the-input","chapter":"11 Shiny’s input system","heading":"11.1.2.1 Find the input","text":"first step, critical locate input DOM. R side, define input, specific attribute serve receptor binding. inputs, may handled type attribute. cases, may class, like actionButton. JS side, need method identify receptor. Moreover, two different types inputs (instance radioButton selectInput) receptor conflict reasons, whereas two instances input type can. app contains 10 sliders, share input binding, thing powerful since bound one step. receptor identifier provided find method InputBinding class. method must applied scope, document. find accepts valid jQuery selector. Note console.log debugging purpose.Figure 11.2 summarizes important step.\nFIGURE 11.2: find inputs?\n, going create new binding textInput, two methods mentioned previous section, find getValue. , need create customized text input, customTextInput make unique. now add input-text class make input binding pointing specific class.last part code contains tagList two elements:element input bindingThe input tagBelow example managed dependency creation side package.\nConsidering multiple inputs, add script dependency passing vector script parameter.shinyMobile package, chose robust approach. bindings contained folder compressed generate one minified file containing collapsed bindings.Figure 11.3 shows main elements textInput widget. code, shinyInputLabel Shiny internal function creates numeric input label, word text displayed next . core input element wrapped tags$input. worry structure seems unclear, give details shiny tags Chapter 3.\nFIGURE 11.3: Shiny’s textInput elements\ninvite reader run full working demonstration customTextInputExample(1).\nshort example consists simple text input output showing current text input value:open developer tools inspect customTextInputBinding.js script, put breakpoints find method reload page. Upon reload, JavaScript debugger opens, shown Figure 11.4. Type $(scope).find('.input-text') console see displayed. DOM element may highlight hover JavaScript output.Building input bindings like significantly ease debugging process ’ll get chances successful!\nFIGURE 11.4: Find first method triggered\nNow, let’s see better target elements type class. run customTextInputExampleBis() example. demonstration app containing two text inputs. Moreover, binding modified looks element specific id:repeat debugging steps, $(scope).find('.input-text') targets \nfirst text input, meaning second input found bound.\nFIGURE 11.5: Find id rather bad idea\nside note, ’ll also get error binding Uncaught implemented, indicating getValue method implemented yet. Fear ! going \nadd soon.","code":"find: function(scope) {\n  console.log($(scope).find('.input-text'));\n  return $(scope).find('.input-text');\n}\ncustomTextInput <- function (inputId, label, value = \"\", width = NULL, placeholder = NULL) {\n  \n  # this external wrapper ensure to control the input width\n  div(\n    class = \"form-group shiny-input-container\", \n    style = if (!is.null(width)) {\n      paste0(\"width: \", validateCssUnit(width), \";\")\n    },\n    # input label\n    shinyInputLabel(inputId, label), \n    \n    # input element + JS dependencies\n    tagList(\n      customTextInputDeps(),\n      tags$input(\n        id = inputId,\n        type = \"text\",\n        class = \"form-control input-text\",\n        value = value,\n        placeholder = placeholder\n      )\n    )\n  )\n}\ncustomTextInputDeps <- function() {\n  htmlDependency(\n    name = \"customTextBindings\",\n    version = \"1.0.0\",\n    src = c(file = system.file(\"chapter5/input-bindings\", package = \"OSUICode\")),\n    script = \"customTextInputBinding.js\"\n  )\n}\ncustomTextInputExample <- function(binding_step) {\n  ui <- fluidPage(\n    customTextInput(\n      inputId = \"caption\",\n      label = \"Caption\",\n      value = \"Data Summary\",\n      binding_step = binding_step\n    ),\n    textOutput(\"custom_text\")\n  )\n  server <- function(input, output) {\n    output$custom_text <- renderText(input$caption)\n  }\n  shinyApp(ui, server)\n}find: function(scope) {\n  return $(scope).find('#mytextInput');\n}"},{"path":"shiny-input-system.html","id":"initialize-inputs","chapter":"11 Shiny’s input system","heading":"11.1.2.2 Initialize inputs","text":"Upon initialization, Shiny calls initializeInputs function takes input bindings call initialize method binding inputs. Note input initialized _shiny_initialized tag avoid initializing twice. initialize method always defined elements require explicitly initialized activated. instance Framework7 API, top shinyMobile built, require instantiate elements. example toggle input:el: '.toggle' means looking element(s) toggle class. app.toggle.create internal Framework7 API. corresponding shinyMobile input binding starts follows.initialized, may use specific methods provided API. Framework7 clearly gold mine, API provides many possible options many inputs / widgets.","code":"// what is expected\nlet toggle = app.toggle.create({\n  el: '.toggle',\n  on: {\n    change: function () {\n      console.log('Toggle changed')\n    }\n  }\n});var f7ToggleBinding = new Shiny.InputBinding();\n  $.extend(f7ToggleBinding, {\n    initialize: function(el) {\n      app.toggle.create({el: el});\n    },\n    // other methods\n});"},{"path":"shiny-input-system.html","id":"get-the-value","chapter":"11 Shiny’s input system","heading":"11.1.2.3 Get the value","text":"getValue(el) returns input value. way obtain value different almost inputs. instance, textInput pretty simple since value located value attribute. el refers element holding id attribute recognized find method. Figure 11.6 shows result console.log($(el));.\nFIGURE 11.6: el\nget value, apply jQuery method val $(el) element return result.time, input value returned. Notice try change text content, output value update normally expect. actually missing couple methods binding fully working. introduce following sections!Similarly find section, run customTextInputExample(2) open developer tools inspect customTextInputBinding.js script. put breakpoints getValue method reload page. Upon reload, JavaScript debugger opens starts find. may click next blue arrow jump next breakpoints getValue, shown Figure 11.7. Typing $(el).val() console shows current\ntext value.\nFIGURE 11.7: getValue\nClicking next exists debugger. Interestingly, ’ll notice text appears bottom input, meaning input$caption element exists \ninternally tracked shiny.","code":"getValue: function(el) {\n  console.log($(el));\n  return $(el).val();\n}\ncustomTextInputExample(2)"},{"path":"shiny-input-system.html","id":"set-and-update","chapter":"11 Shiny’s input system","heading":"11.1.2.4 Set and update","text":"setValue(el, value) used set value current input. method necessary input value may updated. used combination receiveMessage(el, data), JavaScript part R updateInput functions. usually call setValue method inside.Let’s create function update custom text input. Call updateCustomTextInput. requires least 3 parameters:inputId tells input update.value new value. taken setValue JS method input bindingsession Shiny session object mentioned earlier. use sendInputMessage send values R JavaScript. receiveMessage method apply setValue data received R.add setValue receiveMessage custom input binding.Figure 11.8 illustrates main mechanisms.\nFIGURE 11.8: Events following click update button. figure demonstrates R JS communicate, websocket.\npass multiple elements update, change updateCustomTextInput function :dropNulls internal function ensuring list contain NULL elements. send list R, serialized JSON object. receiveMessage method, properties like value may accessed using . notation:Similarly previous sections, run updateCustomTextInputExample(3) open developer tools inspect customTextInputBinding.js script. put breakpoints receiveMessage setValue methods reload page. Upon reload, JavaScript debugger opens starts find. may click next blue arrow reach receiveMessage, shown Figure ??. Inspecting data object, contains one property namely value. practice, may complex structure. exercise, may change data.value whatever value want.\nFIGURE 11.9: Receive message R\nClick next arrow makes us jump next call setValue, can print value check whether correct. Running $(el).val(value); debugger console instantaneously update DOM element new text, shown Figure 11.10.\nFIGURE 11.10: Set new value\nfar good! managed update text input value client. Yet, clicking button, output value change. going fix missing step next section.","code":"setValue: function(el, value) {\n  $(el).val(value);\n}\nupdateCustomTextInput <- function(inputId, value = NULL, session = getDefaultReactiveDomain()) {\n  session$sendInputMessage(inputId, message = value)\n}\nupdateCustomTextInputExample(3)\nupdateCustomTextInput <- function(inputId, value = NULL, placeholder = NULL, session = getDefaultReactiveDomain()) {\n  message <- dropNulls(\n    list(\n      value = value,\n      placeholder = placeholder\n    )\n  )\n  session$sendInputMessage(inputId, message)\n}receiveMessage: function(el, data) {\n  console.log(data);\n  if (data.hasOwnProperty('value')) {\n    this.setValue(el, data.value);\n  }\n  // other parameters to update...\n}"},{"path":"shiny-input-system.html","id":"subscribe","chapter":"11 Shiny’s input system","heading":"11.1.2.5 Subscribe","text":"subscribe(el, callback) listens events defining Shiny update input value make available app. API like Bootstrap explicitly mention events (like hide.bs.tab, shown.bs.tab, …).\nGoing back custom text input, event make change?key release keyboard. may listen keyupAfter copying pasting text input field dictating text. input event may helpfulWe may add events binding using event listener seen end Chapter 9.callback ensures new value captured Shiny. come back later callback parameter, rather complex.run example, open HTML inspector, select customTextInputBinding_4.js script put break point getValue well subscribe method. enter new text inside input field, triggers debugger inside subscribe call.\nInspecting event object, type indicate action, input action target text input element , depicted Figure 11.11.\nFIGURE 11.11: Subscribe method manual update text input\nclick next notice go back getValue method get new value.\nmay check typing $(el).val() debugger console, like Figure 11.12. Clicking next shows updated output value.\nFIGURE 11.12: Subsribe followed new getValue\nHooray! output result successfully changed input value manually updated. However, modified click update button. miss? Looking back receiveMessage method, changed input value Shiny knows step successful? check event raised, put console.log(event); subscribe method. action like removing text content adding new text triggers event clicking action button . Therefore, must trigger event add subscribe method. may choose change event, triggers element updated. Notice parameter passed callback. discuss next part!Besides, receiveMessage must trigger change event trigger subscribe method:Let’s try .put new break point second event listener, one change event. Clicking button triggers change event, shown Figure 11.13.\nFIGURE 11.13: Subsribe followed new getValue\nPerfect? exactly.","code":"$(el).on('keyup.customTextBinding input.customTextBinding', function(event) {\n  callback(true);\n});\nupdateCustomTextInputExample(4)$(el).on('change.customTextBinding', function(event) {\n  callback(false);\n});receiveMessage: function(el, data) {\n  if (data.hasOwnProperty('value')) {\n    this.setValue(el, data.value);\n    $(el).trigger('change');\n  }\n}\nupdateCustomTextInputExample(5)"},{"path":"shiny-input-system.html","id":"setting-rate-policies","chapter":"11 Shiny’s input system","heading":"11.1.2.6 Setting rate policies","text":"better change input value keyboard completely released time (time key released). call debouncing, allows delay telling Shiny read new value, achieved using getRatePolicy method. Additionally, must also pass true callback subscribe method, order apply specific rate policy (debounce, throttle). useful instance don’t want flood server useless update requests. example using slider, want send value soon range stops moving intermediate values. elements defined .Run app try manually change text input value adding couple letters fast can. notice? see output value updates release keyboard.may adjust delay according needs, caution set delay long becomes problematic .want get overview binding steps, may try following slide 2020 R Pharma workshop.","code":"\ncustomTextInputExample(6)"},{"path":"shiny-input-system.html","id":"register-an-input-binding","chapter":"11 Shiny’s input system","heading":"11.1.2.7 Register an input binding","text":"end input binding definition, register Shiny.Although Shiny documentation mentions Shiny.inputBindings.setPriority method handle conflicting bindings, case almost never happens.","code":"let myBinding = new Shiny.inputBinding();\n  $.extend(myBinding, {\n  // methods go here\n});\n\nShiny.inputBindings.register(myBinding, 'reference');"},{"path":"shiny-input-system.html","id":"other-binding-methods","chapter":"11 Shiny’s input system","heading":"11.1.2.8 Other binding methods","text":"couple methods described contained InputBinding class prototype. described since time, don’t need change can rely defaults:getId returns object id (Figure 11.14). don’t provide method, binding falls back default one provided InputBinding class. method called find. next Chapter 12 provides details.getType required handle custom data format. called getId. See section 11.4.getState ?\nFIGURE 11.14: Binding getid method\n","code":""},{"path":"shiny-input-system.html","id":"edit-input-binding","chapter":"11 Shiny’s input system","heading":"11.1.3 Edit an input binding","text":"cases, like access input binding change ’s default behavior, even though always recommended, since affect related inputs. bindings contained registry, namely Shiny.inputBindings, one may seamlessly access modify . 5 steps process:Wait shiny:connected eventUnbind inputs Shiny.unbindAll()Access binding registry, Shiny.inputBindingsExtend binding edit content $.extend(... {...})Apply new changes Shiny.bindAll()","code":"$(function() {\n  $(document).on('shiny:connected', function(event) {\n    Shiny.unbindAll();\n    $.extend(Shiny\n      .inputBindings\n      .bindingNames['shiny.actionButtonInput']\n      .binding, {\n        // do whathever you want to edit existing methods\n      });\n    Shiny.bindAll();\n  });\n});"},{"path":"shiny-input-system.html","id":"update-a-binding-from-the-client","chapter":"11 Shiny’s input system","heading":"11.1.4 Update a binding from the client","text":"interest receiveMessage setValue able update input\nserver side, R, session$sendInputMessage. Yet,\ntask might done directly client, thereby lowering load server.\nconsider following example: shiny app contains 2 actions buttons, clicking first one\nincreases value second 10. won’t possible classic approach since button click\nincreases 1. proceed?first set event listener first button.target second button get input binding $obj.data('shiny-input-binding')recover current valueWe call setValue method input binding adding 10 current valueImportantly, let Shiny update value R side, must trigger event detected subscribe method action button input binding. action button 1 event listener may added. Don’t forget triggering click event also increment button value 1! following customize subscribe method work aroundIf click second button, value increments 1 plot visible 10 clicks, 1 click necessary first button. reset button resets second action button value 0. implements feature discussed previous part, extend button binding add reset method edit subscribe method add change event listener, simply telling shiny get new value. Contrary click, change increment button value.working app.trick extensively used virtual physiology simulator trigger animations.","code":"$(function() {\n  // each time we click on #test (a button)\n  $('#button1').on('click', function() {\n    var $obj = $('#button2');\n    var inputBinding = $obj.data('shiny-input-binding');\n    var val = $obj.data('val') || 0;\n    inputBinding.setValue($obj, val + 10);\n    $obj.trigger('event');\n  });\n});$.extend(Shiny.inputBindings.bindingNames['shiny.actionButtonInput'].binding, {\n  reset: function(el) {\n   $(el).data('val', 0);\n  },\n  subscribe: function(el, callback) {\n    $(el).on('click.actionButtonInputBinding', function(e) {\n      var $el = $(this);\n      var val = $el.data('val') || 0;\n      $el.data('val', val + 1);\n\n      callback();\n    });\n            \n    // this does not trigger any click and won't change the button value            \n    $(el).on('change.actionButtonInputBinding', function(e) {\n      callback();\n    });\n  }\n});\nui <- fluidPage(\n  tags$head(\n    tags$script(\n      [1417 chars quoted with '\"']\n    )\n  ),\n  actionButton(\"button1\", icon(\"plus\")),\n  actionButton(\"button2\", uiOutput(\"val\")),\n  actionButton(\"reset\", icon(\"undo\")),\n  plotOutput(\"plot\")\n)\n\nserver <- function(input, output) {\n  output$val <- renderUI({\n    paste(\"Value: \", input$button2)\n  })\n  \n  output$plot <- renderPlot({\n    validate(need(input$button2 >= 10, message = \"Only visible after 10 clicks on the second button\"))\n    hist(rnorm(100))\n  })\n  \n  observeEvent(input$button2, {\n    if (input$button2 == 0) {\n      showNotification(\n        \"Button successfuly reset\",\n        type = \"warning\"\n      )\n    }\n  })\n}\n\nshinyApp(ui, server)"},{"path":"shiny-input-system.html","id":"secondary-inputs","chapter":"11 Shiny’s input system","heading":"11.2 Secondary inputs","text":"Shiny input binding system convenient used primary input elements like textInput, numericInput. super powerful tool unleash apps’s interactivity.\nfollowing, show add input element primarily designed user input.","code":""},{"path":"shiny-input-system.html","id":"shinydashboard-boxes-on-steroids","chapter":"11 Shiny’s input system","heading":"11.2.1 {shinydashboard} boxes on steroids","text":"{shinydashboard}, may know box function. Boxes containers title, body, footer, well optional elements. nice capture state box input, trigger actions soon input changes. Since input value unique, must add inputId parameter box function. may inspect code .Since may collapse uncollapse box, create updateBox2 function, toggle :collapsed, box gets collapsed-box class. Note: useful input binding. mentioned , also necessary know tell Shiny update value subscribe method. time, change event might sufficient, shinydashboard built top AdminLTE2, API control box behavior. identify 2 events corresponding collapsible action:expanded.boxwidget (Triggered box expanded)collapsed.boxwidget (Triggered box collapsed)Unfortunately, investigations, events possible use since AdminLTE code trigger main JS code (see collapse method line 577-612). solutions, shown click event. toggle box, use toggleBox method.comments binding:getValue returns object give list R. case add elements like remove action available AdminLTEsetValue calls plug play toggleBox methodreceiveMessage must trigger change event Shiny knows value needs updatedsubscribe listens click event [data-widget=\"collapse\"] element delays callback call value slightly higher default AdminLTE2 animation collapse box (500mx). omit part, input time properly update!!!don’t need extra listener updateBox2 function since also triggers click collapse button, thereby forwarding corresponding listenerLet’s try new toy simple dashboard:Even though animations nice, appears rather sub-optimal wait 500 ms box collapse. AdminLTE options allow change $.AdminLTE.boxWidget object. specify animationSpeed property 10 milliseconds update input binding script reduce delay subscribe method (50 ms seems reasonable). get comparison try run example .","code":"\nupdateBox2 <- function(inputId, session = getDefaultReactiveDomain()) {\n  session$sendInputMessage(inputId, message = NULL)\n}let boxBinding = new Shiny.InputBinding();\n$.extend(boxBinding, {\n  find: function(scope) {\n    return $(scope).find('.box');\n  },\n  getValue: function(el) {\n    let isCollapsed = $(el).hasClass('collapsed-box')\n    return {collapsed: isCollapsed}; // this will be a list in R\n  },\n  setValue: function(el, value) {\n    $(el).toggleBox();\n  }, \n  receiveMessage: function(el, data) {\n    this.setValue(el, data);\n    $(el).trigger('change');\n  },\n  subscribe: function(el, callback) {\n    $(el).on('click', '[data-widget=\"collapse\"]', function(event) {\n      setTimeout(function() {\n        callback();\n      }, 550);\n    }); \n    \n    $(el).on('change', function(event) {\n      setTimeout(function() {\n        callback();\n      }, 550);\n    });\n  },\n  unsubscribe: function(el) {\n    $(el).off('.boxBinding');\n  }\n});\n\nShiny.inputBindings.register(boxBinding, 'box-input');\nui <- fluidPage(\n  # import shinydashboard deps without the need of the dashboard template\n  useShinydashboard(),\n\n  tags$style(\"body { background-color: ghostwhite};\"),\n\n  br(),\n  box2(\n   title = textOutput(\"box_state\"),\n   \"Box body\",\n   inputId = \"mybox\",\n   collapsible = TRUE,\n   plotOutput(\"plot\")\n  ),\n  actionButton(\"toggle_box\", \"Toggle Box\", class = \"bg-success\")\n )\n\n server <- function(input, output, session) {\n  output$plot <- renderPlot({\n    req(!input$mybox$collapsed)\n    plot(rnorm(200))\n  })\n\n  output$box_state <- renderText({\n    state <- if (input$mybox$collapsed) \"collapsed\" else \"uncollapsed\"\n    paste(\"My box is\", state)\n  })\n\n  observeEvent(input$toggle_box, {\n    updateBox2(\"mybox\")\n  })\n\n }\n\n shinyApp(ui, server)\n# You'll need the devel version of shinydashboardPlus\n#remotes::install_github(\"RinteRface/shinydashboardPlus\")\n\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(shinydashboardPlus)\n \n ui <- dashboardPage(\n   dashboardHeader(),\n   dashboardSidebar(),\n   dashboardBody(\n     tags$style(\"body { background-color: ghostwhite}\"),\n     actionButton(\"toggle_box\", \"Toggle Box\"),\n     br(),\n     box(\n       title = textOutput(\"box_state\"),\n       \"Box body\",\n       inputId = \"mybox\",\n       collapsible = TRUE,\n       closable = TRUE,\n       plotOutput(\"plot\")\n     )\n   )\n )\n \n server <- function(input, output, session) {\n   output$plot <- renderPlot({\n     req(!input$mybox$collapsed)\n     plot(rnorm(200))\n   })\n   \n   output$box_state <- renderText({\n     state <- if (input$mybox$collapsed) \"collapsed\" else \"uncollapsed\"\n     paste(\"My box is\", state)\n   })\n   \n   observeEvent(input$toggle_box, {\n     updateBox(\"mybox\", action = \"toggle\")\n   })\n   \n   \n   observeEvent(input$mybox$collapsed, {\n     collapsed <- if (input$mybox$collapsed) \"collapsed\" else \"uncollapsed\"\n     message <- paste(\"My box is\", collapsed)\n     showNotification(message, type = \"warning\", duration = 1)\n   })\n   \n }\n \n shinyApp(ui, server)"},{"path":"shiny-input-system.html","id":"going-further","chapter":"11 Shiny’s input system","heading":"11.2.2 Going further","text":"may imagine leveraging input binding system update box property get rid classic renderUI approach. Indeed, now, one way update box server:whole piece UI re-rendered time, box class modified. much impact complex app festooned inputs/outputs, overall user experience may altered., proceed 2 steps. first part consists customizing box function gather many parameter possible option list. instance, choose extract background, width title. width background expected numeric character, respectively, title might HTML tag, justifying use .character.properties list treated JS side. , must make accessible within box2\nHTML tag. choose following approach, convert properties JSON jsonlite::toJSON embed script tag. Note data-attribute unique id parameter. guarantee uniqueness configuration script., update updateBox2 handles toggle update possibilities. options contains updatable properties like background, title width.\ndon’t describe toggle case since quite similar previous implementations. action update, enter statement options must processed. option element shiny tag list shiny tag (tagList), convert character. returned message vector containing action well option list.JS side, modify setValue method import newly defined properties. boxTag two children, box configuration script. $(el) refers box, therefore look one level able use find method (find always goes deeper DOM), namely $(el).parent(). , target script tag $(el).parent().find(\"script[data-='\" + el.id + \"']\"). captured variable, parse corresponding element convert objects can manipulate: instance config.width returns initial width. value.options.width contain new width value provided updateBox2 message output. Good practice check whether value.options.width exists value.options.hasOwnProperty(\"width\"). yes ensure whether value config.width different. always choose === compares type value (== compares value \"1\" == 1 true). call internal method _updateWidth defined input binding. 3 parameters, el, o n (o n old new values, respectively):must trigger resize event output correctly scale. internal method identified underscore since inherited Shiny.InputBinding method.finally update config value newly set value repeat process property.Don’t forget update config script attached card tag end update\ncondition, otherwise input value won’t updated:represents significant amount work, also guarantee lower load server side.careful . Indeed, called event listener, refers element triggered event input binding object!","code":"\nui <- fluidPage(\n  # import shinydashboard deps without the need of the dashboard template\n  useShinydashboard(),\n\n  tags$style(\"body { background-color: ghostwhite};\"),\n\n  br(),\n  uiOutput(\"custom_box\"),\n  selectInput(\"background\", \"Background\", choices = shinydashboard:::validColors)\n )\n\n server <- function(input, output, session) {\n  output$custom_box <- renderUI({\n    box2(\n      title = \"Box\",\n      \"Box body\",\n      background = input$background\n    )\n  })\n }\n\n shinyApp(ui, server)\nbox2 <- function(..., id = NULL, title = NULL, footer = NULL,\n                 background = NULL, width = 6, height = NULL,\n                 collapsible = FALSE, collapsed = FALSE) {\n  \n  props <- dropNulls(\n    list(\n      title = as.character(title),\n      background = background,\n      width = width\n    )\n  )\n  \n  # I removed some of the code to highlight that part\n}\nbox2 <- function(..., id = NULL, title = NULL, footer = NULL,\n                 background = NULL, width = 6, height = NULL,\n                 collapsible = FALSE, collapsed = FALSE) {\n  \n  # code not shown\n  \n  boxTag <- shiny::tags$div(\n    class = if (!is.null(width)) paste0(\"col-sm-\", width), \n    shiny::tags$div(\n      id = id,\n      class = boxClass, \n      headerTag, \n      shiny::tags$div(\n        class = \"box-body\", \n        style = style,\n        ...,\n        sidebar[c(1, 3)],\n      ), \n      if (!is.null(footer)) shiny::tags$div(\n        class = if (isTRUE(footerPadding)) \"box-footer\" else \"box-footer no-padding\", footer)\n    ),\n    \n    # this will make our props accessible from JS\n    shiny::tags$script(\n      type = \"application/json\",\n      `data-for` = id,\n      jsonlite::toJSON(\n        x = props,\n        auto_unbox = TRUE,\n        json_verbatim = TRUE\n      )\n    )\n  )\n  \n  boxTag\n  \n}\nupdateBox2 <- function(id, action = c(\"toggle\", \"update\"), options = NULL,\n                      session = getDefaultReactiveDomain()) {\n  # for update, we take a list of options\n  if (action == \"update\") {\n    # handle case whare options are shiny tag or a list of tags ...\n    options <- lapply(options, function(o) {\n      if (inherits(o, \"shiny.tag\") || inherits(o, \"shiny.tag.list\")) {\n        o <- as.character(o)\n      }\n      o\n    })\n    message <- dropNulls(c(action = action, options = options))\n    session$sendInputMessage(id, message)\n  } else {\n    session$sendInputMessage(id, message = action)\n  }\n}_updateWidth: function(el, o, n) {\n  // removes old class\n  $(el).parent().toggleClass(\"col-sm-\" + o);\n  $(el).parent().addClass(\"col-sm-\" + n); \n  // trigger resize so that output resize\n  $(el).trigger('resize');\n}setValue: function(el, value) {\n  var config = $(el).parent().find(\"script[data-for='\" + el.id + \"']\");\n  config = JSON.parse(config.html());\n  \n  // JS logic\n  if (value.action === \"update\") {\n    if (value.options.hasOwnProperty(\"width\")) {\n      if (value.options.width !== config.width) {\n        this._updateWidth(el, config.width, value.options.width)\n        config.width = value.options.width;\n      }\n    }\n    // other items to update\n    \n    // replace the old JSON config by the new one to update the input value \n    $(el)\n      .parent()\n      .find(\"script[data-for='\" + el.id + \"']\")\n      .replaceWith(\n        '<script type=\"application/json\" data-for=\"' + \n        el.id + \n        '\">' + \n        JSON.stringify(config) + \n        '<\/script>'\n      );\n    \n  } else {\n    // other tasks\n  }\n  \n}$(el)\n  .parent()\n  .find(\"script[data-for='\" + el.id + \"']\")\n  .replaceWith(\n    '<script type=\"application/json\" data-for=\"' + \n    el.id + \n    '\">' + \n    JSON.stringify(config) + \n    '<\/script>'\n  );"},{"path":"shiny-input-system.html","id":"utilities-to-quickly-define-new-inputs","chapter":"11 Shiny’s input system","heading":"11.3 Utilities to quickly define new inputs","text":"","code":""},{"path":"shiny-input-system.html","id":"introduction-2","chapter":"11 Shiny’s input system","heading":"11.3.1 Introduction","text":"ever wondered Shiny.onInputChange Shiny.setInputValue comes (see article), actually defined initShiny function.Briefly, function avoids creating input binding. faster code price pay: losing ability easily update new input. Indeed, input functions like sliderInput update function like updateSliderInput, custom input binding system (see soon)!","code":"exports.setInputValue = exports.onInputChange = function(name, value, opts) {\n  opts = addDefaultInputOpts(opts);\n  inputs.setInput(name, value, opts);\n};"},{"path":"shiny-input-system.html","id":"examples-1","chapter":"11 Shiny’s input system","heading":"11.3.2 Examples","text":"Shiny.setInputValues becomes powerful combined numerous Shiny JavaScript events listed . \nuse shinyMobile package store current device information shiny input.\nBriefly, Framework7 (top built shinyMobile) method Framework7.device, gives many details related user device.allows conditionally display elements deeply customize interface.\nexample , card show mobile devices.","code":"$(document).on('shiny:connected', function(event) {\n  Shiny.setInputValue('deviceInfo', Framework7.device);\n});\nlibrary(shinyMobile)\nshinyApp(\n  ui = f7Page(\n    title = \"My app\",\n    f7SingleLayout(\n      navbar = f7Navbar(\n        title = \"shinyMobile info\",\n        hairline = FALSE,\n        shadow = TRUE\n      ),\n      # main content\n      uiOutput(\"card\"),\n      verbatimTextOutput(\"info\"),\n    )\n  ),\n  server = function(input, output, session) {\n    \n    output$info <- renderPrint(input$shinyInfo)\n\n    # generate a card only for desktop\n    output$card <- renderUI({\n      if (!input$deviceInfo$desktop) {\n        f7Card(\n          \"This is a simple card with plain text,\n          but cards can also contain their own header,\n          footer, list view, image, or any other element.\"\n        )\n      } else {\n        f7Toast(\n          session, \n          \"You are on desktop! The card will not display\", \n          position = \"center\"\n        )\n      }\n    })\n  }\n)"},{"path":"shiny-input-system.html","id":"custom-data-format","chapter":"11 Shiny’s input system","heading":"11.4 Custom data format","text":"cases, automatic Shiny R JS data management may meet needs.","code":""},{"path":"shiny-input-system.html","id":"the-dirty-way","chapter":"11 Shiny’s input system","heading":"11.4.1 The dirty way","text":"instance, assume create date JS new Date() store shiny input Shiny.setInputValue. R side, obtain date character, convenient. input handlers useful since allow manipulate data generated JS side injecting R. handlers created shiny::registerInputHandler takes 2 parameters:type allows connect handler Shiny.setInputValue. Note id followed handler type, instance Shiny.setInputValue('test:handler', ...) connected shiny::registerInputHandler('handler', ...). recommended Shiny documentation, input handler part package, best practice name like packageName.widgetName.function transform data, data main parameterBelow exceptionally include JS code directly shiny app snippet, best practice convenient demonstration. second input give correct result.","code":"\nregisterInputHandler(\"OSUICode.textDate\", function(data, ...) {\n  if (is.null(data)) {\n    NULL\n  } else {\n    res <- try(as.Date(unlist(data)), silent = TRUE)\n    if (\"try-error\" %in% class(res)) {\n      warning(\"Failed to parse dates!\")\n      # as.Date(NA)\n      data\n    } else {\n      res\n    }\n  }\n}, force = TRUE)\n\nui <- fluidPage(\n  tags$script(\n    \"$(function(){\n      $(document).on('shiny:connected', function() {\n        var currentTime = new Date();\n        Shiny.setInputValue('time1', currentTime);\n        Shiny.setInputValue('time2:OSUICode.textDate', currentTime);\n      });\n    });\n    \"\n  ),\n  verbatimTextOutput(\"res1\"),\n  verbatimTextOutput(\"res2\")\n)\n\nserver <- function(input, output, session) {\n  output$res1 <- renderPrint(list(class(input$time1), input$time1))\n  output$res2 <- renderPrint(list(class(input$time2), input$time2))\n}\n\nshinyApp(ui, server)"},{"path":"shiny-input-system.html","id":"the-clean-way-leverage-gettype","chapter":"11 Shiny’s input system","heading":"11.4.2 The clean way: leverage getType","text":"cleanest way leverage getType method InputBinding class.\nLet’s take text input handles dates. R side, customTextInput() function, check current value’s type:add custom data attribute input tag, won’t displayed value date:define custom handler. code run package loaded usually located zzz.R script:Note: shiny already handles dates use built-input handler. current handler designed teaching purposes.JavaScript side, refer OSUICode.textDate defined input handler. recover data-type value passed R call handler type date. return false otherwise, default behavior:use shiny built-handler return \"shiny.date\" instead. run:sets value text default. opening HTML inspector setting break point getType method (Figure 11.15), check data type defined. Therefore input handler apply.\nFIGURE 11.15: Example getType call input handler\nsecond example, give date value function:illustrated Figure 11.16, date properly processed. Moreover, type valid date text field like 2020-11-12, recognized date, entering text return character element. way obtain slightly clever text input widget.\nFIGURE 11.16: Passing date text input correctly processes \nImportantly, since data-type set app startup checking class value, never change later. instance, start app text input value simple text, setting date app convert date since $(el).data(\"data-type\") always return undefined! Therefore, want able use text dates, sure wisely set initial value.finish, seamlessly make text input even clever, handling numbers. Even though shiny shiny.number input handler, simply makes sure whenever input missing value, NA returned instead \"\".\n(Figure 11.17).\nFIGURE 11.17: shiny.number input handler ensures empty numericInput returns NA instead \"\"\nwant handler recognizes string \"1\" convert number. R, converting string number gives NA:Therefore, obtain NA, return original data input returns correct type. Right previous handler, can write:also update JavaScript getType method follows:R side, don’t forget add extra else statement customTextInput() function:run:obtain desired behavior shown Figure 11.18.\nFIGURE 11.18: Passing number text input correctly processes \n","code":"\ntype <- if (inherits(value, \"Date\")) {\n  \"date\"\n} else {\n  NULL\n}\ntags$input(\n  id = inputId,\n  type = \"text\",\n  class = \"form-control input-text\",\n  value = value,\n  placeholder = placeholder,\n  `data-data-type` = type\n)\n.onLoad <- function(...) {\n  registerInputHandler(\"OSUICode.textDate\", function(data, ...) {\n    if (is.null(data)) {\n      NULL\n    } else {\n      res <- try(as.Date(unlist(data)), silent = TRUE)\n      if (\"try-error\" %in% class(res)) {\n        warning(\"Failed to parse dates!\")\n        # as.Date(NA)\n        data\n      } else {\n        res\n      }\n    }\n  }, force = TRUE)\n}getType: function getType(el) {\n  var dataType = $(el).data(\"data-type\");\n  if (dataType === \"date\") return \"OSUICode.textDate\";\n  // if (dataType === \"date\") return \"shiny.date\"\n  else return false;\n}\ncustomTextInputHandlerExample(7)\ncustomTextInputHandlerExample(7, Sys.Date())\nas.numeric(\"test\")## Warning: NAs introduced by coercion## [1] NA\nregisterInputHandler(\"OSUICode.textNumber\", function(data, ...) {\n    if (is.null(data)) {\n      NULL\n    } else {\n      res <- as.numeric(unlist(data))\n      if (is.na(res)) {\n        data\n      } else {\n        res\n      }\n    }\n  }, force = TRUE)getType: function getType(el) {\n  var dataType = $(el).data(\"data-type\");\n  if (dataType === \"date\") return \"OSUICode.textDate\";\n  else if (dataType === \"number\") return \"OSUICode.textNumber\";\n  else return false;\n}\ntype <- if (inherits(value, \"Date\")) {\n  \"date\"\n} else if (inherits(value, \"numeric\")) {\n  \"number\"\n} else {\n  NULL\n}\ncustomTextInputHandlerExample(7, 1)"},{"path":"shiny-input-lifecycle.html","id":"shiny-input-lifecycle","chapter":"12 Shiny inputs lifecycles","heading":"12 Shiny inputs lifecycles","text":"following, recap everything see chapter 10.","code":""},{"path":"shiny-input-lifecycle.html","id":"app-initialization","chapter":"12 Shiny inputs lifecycles","heading":"12.1 App initialization","text":"shiny apps starts, Shiny runs initShiny client. function 3 main tasks:Bind inputs outputs _bindAll().Initialize inputs (necessary) initializeInputs.Initialize client websocket connection mentioned previous chapter 10 send initial values server.input bindings principle bundled shiny package. may user-defined like shinyMobile even simple shiny app. case,\ncontained binding registry, namely inputBindings built top following class (apply output bindings):class method register binding. one call Shiny.inputBindings.register(myBinding, 'reference');, appends newly created binding bindings array.shiny starts, find defined bindings getBindings method.\ndone, binding, find triggered. corresponding element found DOM, nothing done. found input, following methods triggered:getId (described ) returns input id. ensures uniqueness critical!getType optionally handles registerInputHandler defined user R side.getValue gets initial input value.subscribe registers event listeners driving input behavior.data attribute shiny-input-binding added. allows shiny end-users access input binding methods client (practice, end-users ). shiny-bound-input class added, corresponding input appended boundInputs object (listing bound inputs) shiny:bound triggered client.done, shiny stores initial values variable initialInput, also containing client data pass Shinyapp.connect method. shown 10, latter opens client websocket connection, raises shiny:connected event send values server (R). time , shiny:sessioninitialized triggered.\nFIGURE 12.1: Shiny client side initialization\nchapter 10, briefly described shiny JavaScript object. exercise, let’s explore Shiny.shinyApp object contains. definition located shinyapps.js script.creates several properties, easy guess like inputValues initialInput. Let’s run example open HTML inspector. Notice sliderInput set 500 t0 (initialization).Figure 12.2 shows access Shiny’s initial input value Shiny.shinyapp.$initialInput.obs. changing slider position, value given Shiny.shinyapp.$inputValues.obs. $initialInput $inputValues contains many elements, however interested slider function example.\nFIGURE 12.2: Explore initial input values\n","code":"var BindingRegistry = function() {\n  this.bindings = [];\n  this.bindingNames = {};\n}var ShinyApp = function() {\n  this.$socket = null;\n  \n  // Cached input values\n  this.$inputValues = {};\n  \n  // Input values at initialization (and reconnect)\n  this.$initialInput = {};\n  \n  // Output bindings\n  this.$bindings = {};\n  \n  // Cached values/errors\n  this.$values = {};\n  this.$errors = {};\n  \n  // Conditional bindings (show/hide element based on expression)\n  this.$conditionals = {};\n  \n  this.$pendingMessages = [];\n  this.$activeRequests = {};\n  this.$nextRequestId = 0;\n  \n  this.$allowReconnect = false;\n};\nui <- fluidPage(\n  sliderInput(\"obs\", \"Number of observations:\",\n              min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\")\n)\n\nserver <- function(input, output, session) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)"},{"path":"shiny-input-lifecycle.html","id":"update-input-lifecycle","chapter":"12 Shiny inputs lifecycles","heading":"12.2 Update input","text":"try explain mechanisms update input server client. stated , starts update<name>Input function call, actually sends message current session. message received client websocket message manager:sends message appropriate handler, inputMessages:short, get inputId access corresponding input binding. triggers shiny:updateinput event call input binding receiveMessage method. fires setValue subscribe.\nway subscribe works really well covered official documentation.\ncallback function actually defined initialization process:valueChangeCallback ultimately calls inputs.setInput(id, value, opts). latters involves rather complex chain reactions (described ). Overall, result stored queue, namely pendingData sent server shinyapp.sendInput:message update tag sent client websocket, connection opened. , added list pending messages.Finally, current inputValues updated. server side, new value received\nserver websocket message handler, ws$onMessage(message).\nFIGURE 12.3: Shiny client side initialization\n","code":"socket.onmessage = function(e) {\n  self.dispatchMessage(e.data);\n};addMessageHandler('inputMessages', function(message) {\n  // inputMessages should be an array\n  for (var i = 0; i < message.length; i++) {\n    var $obj = $('.shiny-bound-input#' + $escape(message[i].id));\n    var inputBinding = $obj.data('shiny-input-binding');\n\n    // Dispatch the message to the appropriate input object\n    if ($obj.length > 0) {\n      var el = $obj[0];\n      var evt = jQuery.Event('shiny:updateinput');\n      evt.message = message[i].message;\n      evt.binding = inputBinding;\n      $(el).trigger(evt);\n      if (!evt.isDefaultPrevented())\n        inputBinding.receiveMessage(el, evt.message);\n    }\n  }\n});function valueChangeCallback(binding, el, allowDeferred) {\n  var id = binding.getId(el);\n  if (id) {\n    var value = binding.getValue(el);\n    var type = binding.getType(el);\n    if (type)\n      id = id + \":\" + type;\n\n    let opts = {\n      priority: allowDeferred ? \"deferred\" : \"immediate\",\n      binding: binding,\n      el: el\n    };\n    inputs.setInput(id, value, opts);\n  }\n}this.sendInput = function(values) {\n  var msg = JSON.stringify({\n    method: 'update',\n    data: values\n  });\n\n  this.$sendMsg(msg);\n    \n  $.extend(this.$inputValues, values);\n  // other things ...\n}this.$sendMsg = function(msg) {\n  if (!this.$socket.readyState) {\n    this.$pendingMessages.push(msg);\n  }\n  else {\n    this.$socket.send(msg);\n  }\n};"},{"path":"shiny-input-gems.html","id":"shiny-input-gems","chapter":"13 Hidden gems about inputs","heading":"13 Hidden gems about inputs","text":"present tools may useful…FINISH","code":""},{"path":"shiny-input-gems.html","id":"get-the-last-changed-input","chapter":"13 Hidden gems about inputs","heading":"13.1 Get the last changed input","text":"","code":""},{"path":"shiny-input-gems.html","id":"motivations","chapter":"13 Hidden gems about inputs","heading":"13.1.1 Motivations","text":"probably question one day: can get last changed input Shiny? already methods like one provided Dean Attali.Shouldn’t easier? client instead, thereby reducing server load?","code":"\nrunApp(\n  shinyApp(\n    ui = shinyUI(\n      fluidPage(\n        textInput('txt_a', 'Input Text A'),\n        textInput('txt_b', 'Input Text B'),\n        uiOutput('txt_c_out'),\n        verbatimTextOutput(\"show_last\")\n      )\n    ),\n    server = function(input, output, session) {\n      output$txt_c_out <- renderUI({\n        textInput('txt_c', 'Input Text C')\n      })\n      \n      values <- reactiveValues(\n        lastUpdated = NULL\n      )\n      \n      observe({\n        lapply(names(input), function(x) {\n          observe({\n            input[[x]]\n            values$lastUpdated <- x\n          })\n        })\n      })\n      \n      output$show_last <- renderPrint({\n        values$lastUpdated\n      })\n    }\n  )\n)"},{"path":"shiny-input-gems.html","id":"javascript-my-friend","chapter":"13 Hidden gems about inputs","heading":"13.1.2 JavaScript, my friend","text":"comes friend, JavaScript. insert snippet head app, able get last changed input (name, value type).use code custom shiny template, possible input bindings don’t name, thereby make event.binding.name.split('.')[1] crash event.binding undefined. , may remove part:","code":"$(document).on('shiny:inputchanged', function(event) {\n  Shiny.setInputValue('pleaseStayHome', {name: event.name, value: event.value, type: event.binding.name.split('.')[1]});\n});$(document).on('shiny:inputchanged', function(event) {\n  Shiny.setInputValue('pleaseStayHome', {name: event.name, value: event.value});\n});"},{"path":"shiny-input-gems.html","id":"example-1","chapter":"13 Hidden gems about inputs","heading":"13.1.3 Example","text":"shinyMobile natively implements feature may accessed input$lastInputChanged.approach advantage overload server part complex logic.","code":"\nlibrary(shinyMobile)\nshinyApp(\n  ui = f7Page(\n    title = \"My app\",\n    f7SingleLayout(\n      navbar = f7Navbar(\n        title = \"Single Layout\",\n        hairline = FALSE,\n        shadow = TRUE\n      ),\n      toolbar = f7Toolbar(\n        position = \"bottom\",\n        f7Link(label = \"Link 1\", src = \"https://www.google.com\"),\n        f7Link(label = \"Link 2\", src = \"https://www.google.com\", external = TRUE)\n      ),\n      # main content,\n      f7Card(\n        f7Text(inputId = \"text\", label = \"Text\"),\n        f7Slider(inputId = \"range1\", label = \"Range\", min = 0, max = 2, value = 1, step = 0.1),\n        f7Stepper(inputId = \"stepper1\", label = \"Stepper\", min = 0, max = 10, value = 5),\n        verbatimTextOutput(\"lastChanged\")\n      )\n    )\n  ),\n  server = function(input, output) {\n    output$lastChanged <- renderPrint(input$lastInputChanged)\n  }\n)"},{"path":"shiny-input-gems.html","id":"about-shinylogs","chapter":"13 Hidden gems about inputs","heading":"13.1.4 About {shinylogs}","text":"shinylogs package developed dreamRs contains feature much advanced options.","code":"\nlibrary(shinylogs)\n\nshinyApp(\n  ui = fluidPage(\n    numericInput(\"n\", \"n\", 1),\n    sliderInput(\"s\", \"s\", min = 0, max = 10, value = 5),\n    verbatimTextOutput(\"lastChanged\")\n  ),\n  server = function(input, output, session) {\n    # specific to shinylogs\n    track_usage(storage_mode = store_null())\n    output$lastChanged <- renderPrint(input$`.shinylogs_lastInput`)\n  }\n)"},{"path":"shiny-custom-handler.html","id":"shiny-custom-handler","chapter":"14 Dynamically manage content with handlers","heading":"14 Dynamically manage content with handlers","text":"three previous chapters largely dedicated Shiny input elements. Yet, everything input Shiny. chapter shows one may leverage internal Shiny JavaScript tools build highly interactive optimized interfaces.","code":""},{"path":"shiny-custom-handler.html","id":"introduction-3","chapter":"14 Dynamically manage content with handlers","heading":"14.1 Introduction","text":"shown Mastering Shiny book, exists tools update UI components server. can use update<INPUT_NAME> functions like updateTextInput also call secondary input related function like updateTabsetPanel. secondary input? Since inputs, strictly speaking. instance fill inscription form website, contains lot inputs like select, text, numeric, date, data ultimately stored database later use. tabsetPanel simple way spread multiple elements different panels usually gather topic. Shiny, always interesting associate input , shown previous chapter 11.2, able trigger sophisticated actions server side, whenever necessary. order confuse reader, primary inputs like actionButton id, accessible inputId, secondary inputs simply id.tools manage UI consist toggle functions like hideTab, showTab, limit number , often obliges us use packages like shinyjs (Attali 2020) write custom JavaScript code. insertUI/removeUI allows dynamically insert remove element, anywhere.","code":""},{"path":"shiny-custom-handler.html","id":"the-renderui-case","chapter":"14 Dynamically manage content with handlers","heading":"14.2 The renderUI case","text":"One may know renderUI/uiOutput allows render HTML block server. update<INPUT_NAME> toggle tools component specific, meaning target element modify, renderUI/uiOutput re-renders whole block time associated reactive dependency invalidated, even though little part re-rendered. approach usually avoid since implies poor performances. Let’s see , simulate computationally intensive task three seconds, corresponding time obtain slider value:example updateSliderInput functions:first approach’s biggest problem absence anything 3 seconds, may discourage end user. Although ideal, second approach already much better.naive dirty example renderUI makes entire dropdown menu re-render time something changes renderUI expression, may optimal. instance React, re-render needs updated! Run app , open HTML inspector click add 1 message. Notice entire block updated, whereas corresponding HTML element (Figure 14.1). doubt advanced user see place insertUI.\nFIGURE 14.1: renderUI specific\nnon specificity property justifies avoid method much possible, overloads server. Later chapter, leverage custom handlers solve problem. Overall, ’s work, maybe complex ensures specific optimized.","code":"\nlibrary(shiny)\nui <- fluidPage(\n  uiOutput(\"moreControls\")\n)\n\nserver <- function(input, output) {\n  \n  sliderValue <- reactive({\n    # computationally intensive task\n    Sys.sleep(3)\n    1\n  })\n  \n  output$moreControls <- renderUI({\n    sliderInput(\"n\", \"N\", sliderValue(), 1000, 500)\n  })\n}\nshinyApp(ui, server)\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 100, 1000, 500)\n)\n\nserver <- function(input, output, session) {\n  \n  sliderValue <- reactive({\n    # computationally intensive task\n    Sys.sleep(3)\n    50\n  })\n  \n  observeEvent(sliderValue(), {\n    updateSliderInput(\n      session,\n      \"n\",\n      value = sliderValue()\n    )\n  })\n}\nshinyApp(ui, server)\nlibrary(bs4Dash)\nlibrary(tibble)\n\nnew_message <- tibble(\n  message = \"New message\",\n  from = \"Paul\",\n  src = \"https://adminlte.io/themes/v3/dist/img/user3-128x128.jpg\",\n  time = \"yesterday\",\n  status = \"success\",\n  type = \"message\"\n)\n\nshinyApp(\n  ui = bs4DashPage(\n    navbar = bs4DashNavbar(\n      rightUi = uiOutput(\"messages\", container = tags$li)\n    ),\n    sidebar = bs4DashSidebar(),\n    controlbar = bs4DashControlbar(),\n    footer = bs4DashFooter(),\n    title = \"test\",\n    body = bs4DashBody(actionButton(\"add\", \"Add message\"))\n  ),\n  server = function(input, output) {\n    \n    messages <- reactiveValues(\n      items = tibble(\n        message = rep(\"A message\", 10),\n        from = LETTERS[1:10],\n        src = rep(\"https://adminlte.io/themes/v3/dist/img/user3-128x128.jpg\", 10),\n        time = rep(\"yesterday\", 10),\n        status = rep(\"success\", 10),\n        type = rep(\"message\", 10)\n      )\n    )\n    \n    observeEvent(input$add, {\n      messages$items <- add_row(messages$items, new_message)\n    })\n    \n    output$messages <- renderUI({\n      dropdownMenu(\n        show = FALSE,\n        status = \"danger\",\n        src = \"https://www.google.fr\",\n        lapply(seq_len(nrow(messages$items)), function(r) {\n          temp <- messages$items[r, ]\n          dropdownMenuItem(\n            message = temp$message,\n            from = temp$from, \n            time = temp$time,\n            status = temp$status,\n            type = temp$type,\n            src = temp$src\n          )\n        })\n      )\n    })\n  }\n)"},{"path":"shiny-custom-handler.html","id":"insert-ui","chapter":"14 Dynamically manage content with handlers","heading":"14.3 Other Shiny handlers","text":"mentioned Chapter 12.2, update<INPUT_NAME> functions Shiny defined messages handlers.","code":""},{"path":"shiny-custom-handler.html","id":"the-insertui-case","chapter":"14 Dynamically manage content with handlers","heading":"14.3.1 The insertUI case","text":"hood, insertUI sends R message session$sendInsertUI, via websocket:content treated shiny:::processDeps :Finds resolve HTML dependency, shown Chapter 4.dependency, makes sure corresponding files can accessed server createWebDependency addResourcePath.Returns list HTML element dependencies. HTML accessed message.content.html dependencies message.content.deps.UI side, Shiny predefined message handler:checks whether provided selector corresponds multiple DOM elements. least 1 item found, calls renderContent(html, el, dependencies) triggers renderHtml(html, el, dependencies):Processes provided HTML (treat head, body singletons).Renders given dependencies page’s head.Insert HTML page position provided insertUI parameter. Internally calls insertAdjacentHTML method.Initialize input bind scope send value server output/observers invalidated. Outputs also bound. step missed newly inserted input won’t react, related output observer.Keep renderContent renderHtml mind, ’ll use section 14.4.2.","code":"\nsession$sendInsertUI(\n  selector = selector, \n  multiple = multiple, \n  where = where, \n  content = processDeps(ui, session)\n)\n\nsendInsertUI = function(selector, multiple, where, content) {\n  private$sendMessage(\n    `shiny-insert-ui` = list(\n      selector = selector,\n      multiple = multiple,\n      where = where,\n      content = content\n    )\n  )\n}addMessageHandler('shiny-insert-ui', function(message) {\n  var targets = $(message.selector);\n  if (targets.length === 0) {\n    // render the HTML and deps to a null target, so\n    // the side-effect of rendering the deps, singletons,\n    // and <head> still occur\n    console.warn('The selector you chose (\"' + message.selector +\n                 '\") could not be found in the DOM.');\n    exports.renderHtml(message.content.html, $([]), message.content.deps);\n  } else {\n    targets.each(function (i, target) {\n      exports.renderContent(target, message.content, message.where);\n      return message.multiple;\n    });\n  }\n})"},{"path":"shiny-custom-handler.html","id":"example-2","chapter":"14 Dynamically manage content with handlers","heading":"14.3.2 Example","text":"Going back previous example, don’t just go insertUI:Well, item inserted, item counter well dropdown text , depicted Figure 14.2! can’t blame insertUI , since fault bs4Dash component actually interconnected HTML pieces. Indeed, dropdownMenu function generates HTML, detecting number dropdownMenuItem. works well app fires component able maintain date state.\nFIGURE 14.2: insertUI enough specific\nmay fix adding extra insertUI() removeUI() replace parts (insertUI() update targeted item). Moreover, must set correct priority observeEvent (try remove , fail) ensure remove happens insert.many observeEvent simple action! Imagine 10 similar tasks… Isn’t way , thereby reducing server code? general setting priorities observeEvent rather bad smell poorly designed shiny app.seems create message handler!","code":"\nshinyApp(\n  ui = bs4DashPage(\n    navbar = bs4DashNavbar(\n      rightUi = dropdownMenu(\n        show = FALSE,\n        status = \"danger\",\n        src = \"https://www.google.fr\"\n      )\n    ),\n    sidebar = bs4DashSidebar(),\n    controlbar = bs4DashControlbar(),\n    footer = bs4DashFooter(),\n    title = \"test\",\n    body = bs4DashBody(actionButton(\"add\", \"Add dropdown item\"))\n  ),\n  server = function(input, output, session) {\n    \n    observeEvent(input$add, {\n      insertUI(\n        selector = \".dropdown-menu > .dropdown-item.dropdown-footer\",\n        where = \"beforeBegin\",\n        ui = dropdownMenuItem(\n          inputId = paste0(\"triggerAction_\", input$add),\n          message = paste(\"message\", input$add),\n          from = \"Divad Nojnarg\",\n          src = \"https://adminlte.io/themes/v3/dist/img/user3-128x128.jpg\",\n          time = \"today\",\n          status = \"danger\",\n          type = \"message\"\n        )\n      )\n    })\n  }\n)\nshinyApp(\n  ui = bs4DashPage(\n    navbar = bs4DashNavbar(\n      rightUi = dropdownMenu(\n        show = FALSE,\n        status = \"danger\",\n        src = \"https://www.google.fr\"\n      )\n    ),\n    sidebar = bs4DashSidebar(),\n    controlbar = bs4DashControlbar(),\n    footer = bs4DashFooter(),\n    title = \"test\",\n    body = bs4DashBody(actionButton(\"add\", \"Add dropdown item\"))\n  ),\n  server = function(input, output, session) {\n    \n    observeEvent(input$add, {\n      insertUI(\n        selector = \".dropdown-menu > .dropdown-item.dropdown-footer\",\n        where = \"beforeBegin\",\n        ui = dropdownMenuItem(\n          inputId = paste0(\"triggerAction_\", input$add),\n          message = paste(\"message\", input$add),\n          from = \"Divad Nojnarg\",\n          src = \"https://adminlte.io/themes/v3/dist/img/user3-128x128.jpg\",\n          time = \"today\",\n          status = \"danger\",\n          type = \"message\"\n        )\n      )\n    })\n    \n    # remove old badge\n    observeEvent(input$add, {\n      removeUI(selector = \".badge-danger.navbar-badge\")\n    }, priority = 1)\n    \n    # insert new badge\n    observeEvent(input$add, {\n      insertUI(\n        selector = \"[data-toggle=\\\"dropdown\\\"]\",\n        where = \"beforeEnd\",\n        ui = tags$span(class = \"badge badge-danger navbar-badge\", input$add)\n      )\n    })\n    \n    \n    # remove old text counter\n    observeEvent(input$add, {\n      removeUI(selector = \".dropdown-item.dropdown-header\")\n    }, priority = 1)\n    \n    # insert new text counter\n    observeEvent(input$add, {\n      insertUI(\n        selector = \".dropdown-menu\",\n        where = \"afterBegin\",\n        ui = tags$span(class=\"dropdown-item dropdown-header\", sprintf(\"%s Items\", input$add))\n      )\n    })\n    \n  }\n)"},{"path":"shiny-custom-handler.html","id":"custom-handlers","chapter":"14 Dynamically manage content with handlers","heading":"14.4 Custom handlers","text":"Custom handlers specific category message handlers, user defined.","code":""},{"path":"shiny-custom-handler.html","id":"theory","chapter":"14 Dynamically manage content with handlers","heading":"14.4.1 Theory","text":"Shiny provides tools ease communication R JavaScript, illustrated section 10.2. already discussed usage sendInputMessage() input binding section 11. important method sendCustomMessage(type, message). works pair JS method Shiny.AddCustomMessageHandler, linked type parameter.JavaScript part defined :shiny app simply print welcome message every 5 seconds. obviously set options(shiny.trace = TRUE) capture messages sent R JS. Figure 14.3 summarizes main mechanisms involved R JS communication. corresponding code may found .\nFIGURE 14.3: R JavaScript\nCombining Shiny.setInputValue Shiny.addCustomMessageHandler, fun example\nsets body background result simple button click.\ndefined 3 JS pieces:getPokemon whose script adapted Colin Fay et al. (see ). function fetch pokeapi\ndata successful set input value, available R sideAn event listener set button page time click,\ncall getPokemon select random background imageinput$pokeData actually quite complex list (deeply nested JSON) manipulation done R observeEvent block. done, send data\nback JS websocket (session object sends message).JS side, last block custom message handler add inline\nCSS properties body elementA whole chapter dedicated custom handlers, practical example 20.","code":"\nsay_hello_to_js <- function(text, session = getDefaultReactiveDomain()) {\n  session$sendCustomMessage(type = 'say-hello', message = text)\n}$(function() {\n  Shiny.AddCustomMessageHandler('say-hello', function(message) {\n    alert(`R says ${message} to you!`)\n  });\n});\nshinyAppDir(system.file(\"chapter6/say_hello\", package = \"OSUICode\"))\nlibrary(shiny)\n\nui <- fluidPage(\n  tags$script(\n    HTML(\n      [1165 chars quoted with '\"']\n    )\n  ),\n  tags$button(id = \"button\", \"Go!\", class = \"btn-success\")\n)\n\nserver <- function(input, output, session) {\n  \n  observeEvent(input$pokeData, {\n    background <- input$pokeData$sprites$other$`official-artwork`$front_default\n    message(background)\n    session$sendCustomMessage(type = \"update_background\", message = background)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"shiny-custom-handler.html","id":"custom-ui-functions","chapter":"14 Dynamically manage content with handlers","heading":"14.4.2 Toward custom UI management functions","text":"","code":""},{"path":"shiny-custom-handler.html","id":"an-insertdropdownitem-function","chapter":"14 Dynamically manage content with handlers","heading":"14.4.2.1 An insertDropdownItem function","text":"example, go back bs4Dash dropdownMenu issue, discussed earlier\nchapter. propose method involving custom message handlers.create insertDropdownItem function 2 parameters:item, HTML element want insert DOM.session, used send message JavaScript session$sendCustomMessage.don’t use processDeps unlikely dropdownMenuItem contains extra dependency. item converted character (important) sent JavaScript shiny session R6 object. give type, ‘add-dropdown-item’, able identify JavaScript Shiny.addCustomMessageHandler.recover sent message JS side Shiny.addCustomMessageHandler, parse string HTML $.parseHTML insert footer (next UI element dropdown body). also update dropdown menu item counter well icon text since dropdown menu re-rendered. two extra JS steps save us create extra observeEvent server, shown . dropdownMenu modified dependencies attached:may run example . Note load {OSUICode} overwrite bs4Dash function:solution significantly lightens server code since everything may done JS side one step.","code":"\ninsertDropdownItem <- function(item, session = shiny::getDefaultReactiveDomain()) {\n  session$sendCustomMessage(\"add-dropdown-item\", message = as.character(item))\n}$(function() {\n  Shiny.addCustomMessageHandler('add-dropdown-item', function(message) {\n    // convert string to HTML\n    var itemTag = $.parseHTML(message)[0];\n    $(itemTag).insertBefore($('.dropdown-item.dropdown-footer'));\n    // since we do not re-render the dropdown, we must update its item counter\n    var $items = $('button.dropdown-item').length;\n    $('.dropdown-item.dropdown-header').html($items + ' Items');\n    $('.nav-item.dropdown').find('.navbar-badge').html($items);\n  });\n});\ndropdownDeps <- function() {\n  htmltools::htmlDependency(\n    name = \"bs4-dropdown\",\n    version = \"1.0.0\",\n    src = c(file = \"chapter6/add-dropdown-item\"),\n    script = \"add-dropdown-item.js\",\n    package = \"OSUICode\"\n  )\n}\n\ndropdownMenu <- function(..., show = FALSE, labelText = NULL, src = NULL,\n                         status = c(\"primary\", \"warning\", \"danger\", \"info\", \"success\"),\n                         menuIcon = \"bell\", align = \"right\") {\n\n  status <- match.arg(status)\n  items <- list(...)\n  n_items <- length(items)\n  # remove the divider from the last item\n  #items[[n_items]][[2]] <- NULL\n\n  labelText <- n_items\n\n  tagList(\n    dropdownDeps(),\n    shiny::tags$li(\n      class = if (isTRUE(show)) \"nav-item dropdown show\" else \"nav-item dropdown\",\n      shiny::tags$a(\n        class = \"nav-link\",\n        `data-toggle` = \"dropdown\",\n        href = \"#\",\n        shiny::icon(menuIcon),\n        shiny::tags$span(\n          class = paste0(\"badge badge-\", status, \" navbar-badge\"),\n          labelText\n        )\n      ),\n      shiny::tags$div(\n        class = if (isTRUE(show)) {\n          sprintf(\"dropdown-menu dropdown-menu-lg dropdown-menu-%s show\", align)\n        } else {\n          sprintf(\"dropdown-menu dropdown-menu-lg dropdown-menu-%s\", align)\n        },\n        shiny::tags$span(\n          class = \"dropdown-item dropdown-header\",\n          paste0(n_items, \" Items\")\n        ),\n        shiny::tags$div(class = \"dropdown-divider\"),\n        ...,\n        shiny::tags$a(\n          class = \"dropdown-item dropdown-footer\",\n          href = src,\n          target = \"_blank\",\n          \"See more\"\n        )\n      )\n    )\n  )\n}\n# shinyAppDir(system.file(\"chapter6/add-dropdown-item\", package = \"OSUICode\"))\nlibrary(OSUICode)\n\nshinyApp(\n  ui = bs4DashPage(\n    navbar = bs4DashNavbar(\n      rightUi = dropdownMenu(\n        show = FALSE,\n        status = \"danger\",\n        src = \"https://www.google.fr\"\n      )\n    ),\n    sidebar = bs4DashSidebar(),\n    controlbar = bs4DashControlbar(),\n    footer = bs4DashFooter(),\n    title = \"test\",\n    body = bs4DashBody(actionButton(\"add\", \"Add dropdown item\"))\n  ),\n  server = function(input, output, session) {\n\n    observeEvent(input$add, {\n      insertDropdownItem(\n        dropdownMenuItem(\n          inputId = paste0(\"triggerAction_\", input$add),\n          message = paste(\"message\", input$add),\n          from = \"Divad Nojnarg\",\n          src = \"https://adminlte.io/themes/v3/dist/img/user3-128x128.jpg\",\n          time = \"today\",\n          status = \"danger\",\n          type = \"message\"\n        )\n      )\n    })\n  }\n)"},{"path":"shiny-custom-handler.html","id":"a-chat-system-for-shinydashboardplus","chapter":"14 Dynamically manage content with handlers","heading":"14.4.2.2 A chat system for shinydashboardPlus","text":"User messages shinydashboardPlus (latest development version) provide easy way create chat system within shiny app. userMessages hosts main container userMessage message elements. pure HTML:Figure 14.4 shows overall output.\nFIGURE 14.4: Chat user interface AdminLTE2\nGiven JavaScript API available handle messages, send/receive/edit/remove message, going design custom R/JavaScript API step step.","code":"<div class=\"direct-chat-msg\">\n  <div class=\"direct-chat-info clearfix\">\n    <span class=\"direct-chat-name pull-left\">Alexander Pierce<\/span>\n    <span class=\"direct-chat-timestamp pull-right\">23 Jan 2:00 pm<\/span>\n  <\/div>\n  <!-- /.direct-chat-info -->\n  <img class=\"direct-chat-img\" src=\"dist/img/user1-128x128.jpg\" alt=\"message user image\">\n                      <!-- /.direct-chat-img -->\n  <div class=\"direct-chat-text\">Is this template really for free? That's unbelievable!\n  <\/div>\n  <!-- /.direct-chat-text -->\n<\/div>"},{"path":"shiny-custom-handler.html","id":"html-elements","chapter":"14 Dynamically manage content with handlers","heading":"14.4.2.2.1 HTML elements","text":"message container simple div element:... receives messages. AdminLTE demonstration page, class direct-chat-warning gives yellow color sent messages, received messages always gray. shinydashboardPlus, container defined :important element id parameter makes link custom message handler JavaScript side. message element defined :3 parts:author tag, defined messageInfo variable.message , defined messageTxt variable.author image, contained messageImg variable.class message varies depending whether received sent, actually changes position (left right).Note corresponding HTML classes like direct-chat-text since use JS.","code":"<div class=\"direct-chat-messages\">...<\/div>\nuserMessages <- function(..., id = NULL, status, width = 4, height = NULL) {\n  cl <- \"direct-chat-messages direct-chat\"\n  if (!is.null(height)) shiny::validateCssUnit(height)\n  if (!is.null(status)) {\n    validateStatus(status)\n    cl <- paste0(cl, \" direct-chat-\", status)\n  }\n  msgtag <- shiny::tags$div(\n    class = cl, \n    ..., \n    style = if (!is.null(height)) {\n      sprintf(\"height: %s; overflow-y: auto;\", height)\n    } else {\n      \"height: 100%;\"\n    }\n  )\n  \n  shiny::tags$div(\n    id = id,\n    class = if (!is.null(width)) paste0(\"col-sm-\", width),\n    msgtag\n  )\n  \n}\nuserMessage <- function(..., author, date = NULL, \n                        image = NULL, type = c(\"sent\", \"received\")) {\n  \n  type <- match.arg(type)\n  messageCl <- \"direct-chat-msg\"\n  if (type == \"sent\") messageCl <- paste0(messageCl, \" right\")\n  \n  # message info\n  messageInfo <- shiny::tags$div(\n    class = \"direct-chat-info clearfix\",\n    shiny::tags$span(\n      class = if (type == \"right\") {\n        \"direct-chat-name pull-right\"\n      } else {\n        \"direct-chat-name\"\n      }, \n      author\n    ),\n    if (!is.null(date)) {\n      shiny::tags$span(\n        class = if (type == \"right\") {\n          \"direct-chat-timestamp right\"\n        } else {\n          \"direct-chat-timestamp\"\n        }, \n        date\n      )\n    }\n  )\n  \n  # message Text\n  messageTxt <- shiny::tags$div(class = \"direct-chat-text\", ...)\n  \n  # message author image\n  messageImg <- shiny::tags$img(class = \"direct-chat-img\", src = image)\n  \n  shiny::tags$div(\n    class = messageCl,\n    messageInfo,\n    messageImg, \n    messageTxt\n  )\n}"},{"path":"shiny-custom-handler.html","id":"handle-interactions","chapter":"14 Dynamically manage content with handlers","heading":"14.4.2.2.2 Handle interactions","text":"userMessages userMessage alone provide static API. Let’s design updateMessages function offers way update message container. function must allow :Add message list.Remove existing message.Update given message.now, assume add one message time. updateMessages linked userMessages container id parameter. order delete/update message, need define index parameter. Don’t forget R starts 1 JS starts 0. Consequently, decrease R index 1 JS receives correct number. must also provide content slot update existing message content. content compatible userMessage structure. expect user pass list like:Interestingly, may offer ability add input/output element message content (shown ) dependencies yet made available shiny. therefore assume content shiny tag list shiny tags, may contain elements extra dependencies leverage processDeps function R side elements lapply function. Finally, message going sent session$sendCustomMessage:send container id able select good target JS side. Note session$ns actually make sure function can work within shiny modules.reminder, message handler name JS side!Now done R side still design JS interface. first step create custom message handler skeleton:message parameter actually message sent R updateUserMessages function. recall send list, converted JS object. Therefore, access container id element, :similarly elements. may nested list, instance message content one, complex handle: simply use . JS notation access lower level elements, message.content.text message text.second step store message elements variables, may separated commas. step mandatory improves code readability:following show process message content. sake simplicity, assume able edit message text.\nmentioned earlier, 2 possible cases:text simple text simple HTML without extra dependency, nothing storing meaningful variable.text list shiny tags containing input/output extra dependencies like sliderInput, use renderHtml method correctly process missing dependencies passed R via processDeps updateUserMessages.yields:Note hasOwnProperty checks whether content text property., next step consider multiple options provided user (update, add, remove). consider simplest case, remove message. remind reader action contains user choice updateUserMessages. need remove given message:’s index contained index variable.container id.Remember/notice message direct-chat-msg class.Use remove jQuery method.therefore target main container $(\"#\" + id), look messages find(\".direct-chat-msg\"), specify target using eq(index - 1) (index R value) apply remove method:add security console.warn whenever user wants delete message exist. leave reader exercise.second case add new message. case, define new variables containing \nauthor, date, image message type. reminder message HTML structure:JS logic, use template replace relevant element (see capital letters)\npreviously created variables. might use string interpolation compatible \nweb browsers. wrap elements direct-chat-msg div class may vary depending\nmessage type. sent, class direct-chat-msg right direct-chat-msg otherwise.\nfinal step target main container $(\"#\" + id), look messages slot find(\".direct-chat-messages\") (message container nested main wrapper) append \nDOM. used append add message end choose prepend add top\nmessages. behavior may defined programmer option end-user.\nAlternatively, developer expose external parameter control add position.Finally, last case update given message. stated , assume edit \nmessage text date. update message, target messages container $(\"#\" + id),\nlook texts find(\".direct-chat-text\"), refine choice targeting good element \neq(index - 1), call replaceWith containing new text element.Don’t forget unbind, re-initialize bind inputs calling Shiny.unbindAll();, Shiny.initializeInputs(); \nShiny.bindAll();. ommit part, newly inserted input/output elements won’t work!whole JS code may found :Output shown Figure 14.5. reproduce figure,\nmay click add message, click update message leaving numeric input 1.\nFIGURE 14.5: Chat user interface {shinydashboardPlus}\nwell demonstration:","code":"list(\n  author = \"David\",\n  date = \"Now\",\n  image = \"https://i.pinimg.com/originals/f1/15/df/f115dfc9cab063597b1221d015996b39.jpg\",\n  type = \"received\",\n  text = tagList(\n    sliderInput(\n      \"obs\", \n      \"Number of observations:\",\n      min = 0, \n      max = 1000, \n      value = 500\n    ),\n    plotOutput(\"distPlot\")\n  )\nupdateUserMessages <- function(id, action = c(\"add\", \"remove\", \"update\"), \n                               index = NULL, content = NULL, \n                               session = shiny::getDefaultReactiveDomain()) {\n  action <- match.arg(action)\n  \n  content <- lapply(content, function(c) {\n    if (inherits(c, \"shiny.tag\") || inherits(c, \"shiny.tag.list\")) {\n      # necessary if the user pass input/output with deps\n      # that are not yet available in the page before inserting the new tag\n      c <- processDeps(c, session)\n    }\n    c\n  })\n  \n  session$sendCustomMessage(\n    \"user-messages\", \n    list(\n      id = session$ns(id), \n      action = action, \n      index = index,\n      body = content\n    )\n  )\n}Shiny.addCustomMessageHandler(\"user-messages\", function(message) {\n  // JS logic\n});message.idShiny.addCustomMessageHandler(\"user-messages\", function(message) {\n  var id = message.id, action = message.action, content = message.body, index = message.index;\n});Shiny.addCustomMessageHandler(\"user-messages\", function(message) {\n  var id = message.id, action = message.action, content = message.body, index = message.index;\n  \n  if (content.hasOwnProperty(\"text\")) {\n    var text;\n    if (content.text.html === undefined) {\n      text = content.text;\n    } else {\n      text = Shiny.renderHtml(content.text.html, $([]), content.text.deps).html;\n    } \n  }\n  \n});if (action === \"remove\") {\n  $(\"#\" + id).find(\".direct-chat-msg\").eq(index - 1).remove();\n}<div class=\"direct-chat-msg\">\n  <div class=\"direct-chat-info clearfix\">\n    <span class=\"direct-chat-name pull-left\">AUTHOR (TO REPLACE)<\/span>\n    <span class=\"direct-chat-timestamp pull-right\">DATE (TO REPLACE)<\/span>\n  <\/div>\n  <!-- /.direct-chat-info -->\n  <img class=\"direct-chat-img\" src=\"IMAGE URL (TO REPLACE)\" alt=\"message user image\">\n                      <!-- /.direct-chat-img -->\n  <div class=\"direct-chat-text\">MAIN CONTENT (TO REPLACE)\n  <\/div>\n  <!-- /.direct-chat-text -->\n<\/div>// other condition before ...\nelse if (action === \"add\") {\n  var author = content.author, date = content.date, image = content.image, type = content.type;\n      \n  // build the new message \n  var newMessage = '<div class=\"direct-chat-info clearfix\">' +\n    '<span class=\"direct-chat-name\">' + author + '<\/span>' +\n    '<span class=\"direct-chat-timestamp\" style=\"margin-left: 4px\">' + date + '<\/span>' + '<\/div>' +\n    '<img class=\"direct-chat-img\" src=\"' + image + '\"/>' + \n    '<div class=\"direct-chat-text\">' + text + '<\/div>'\n    \n  // build wrapper\n  var newMessageWrapper;\n  if (type === \"sent\") {\n    newMessageWrapper = '<div class=\"direct-chat-msg right\">' + newMessage + '<\/div>'\n  } else {\n    newMessageWrapper = '<div class=\"direct-chat-msg\">' + newMessage + '<\/div>'\n  }\n  \n  // append message\n  $(\"#\" + id).find(\".direct-chat-messages\").append(newMessageWrapper);\n}else if (action === \"update\") {\n      \n  // today's date\n  var d = new Date();\n  var month = d.getMonth() + 1;\n  var day = d.getDate();\n  var today = d.getFullYear() + '/' +\n    ((''+month).length<2 ? '0' : '') + month + '/' +\n    ((''+day).length<2 ? '0' : '') + day;\n    \n  // we assume only text may be updated. Does not make sense to modify author\n  \n  $(\"#\" + id)\n    .find(\".direct-chat-text\")\n    .eq(index - 1)\n    .replaceWith('<div class=\"direct-chat-text\"><small class=\"text-red\">(modified: ' + today +')<\/small><br>' +  text + '<\/div>')\n}// userMessages\n  // ------------------------------------------------------------------\n  // This code creates acustom handler for userMessages\n  Shiny.addCustomMessageHandler(\"user-messages\", function(message) {\n    var id = message.id, action = message.action, content = message.body, index = message.index;\n    \n    // message text\n    // We use Shiny.renderHtml to handle the case where the user pass input/outputs in the updated content that require a new dependency not available in the \n    // page at startup. \n    if (content.hasOwnProperty(\"text\")) {\n      var text;\n      if (content.text.html === undefined) {\n        text = content.text;\n      } else {\n        text = Shiny.renderHtml(content.text.html, $([]), content.text.deps).html;\n      } \n    }\n    \n    // unbind all\n    Shiny.unbindAll();\n    \n    if (action === \"remove\") {\n      $(\"#\" + id).find(\".direct-chat-msg\").eq(index - 1).remove();\n    } else if (action === \"add\") {\n      var author = content.author, date = content.date, image = content.image, type = content.type;\n      \n      // build the new message \n      var newMessage = '<div class=\"direct-chat-info clearfix\">' +\n        '<span class=\"direct-chat-name\">' + author + '<\/span>' +\n        '<span class=\"direct-chat-timestamp\" style=\"margin-left: 4px\">' + date + '<\/span>' + '<\/div>' +\n        '<img class=\"direct-chat-img\" src=\"' + image + '\"/>' + \n        '<div class=\"direct-chat-text\">' + text + '<\/div>'\n        \n      // build wrapper\n      var newMessageWrapper;\n      if (type === \"sent\") {\n        newMessageWrapper = '<div class=\"direct-chat-msg right\">' + newMessage + '<\/div>'\n      } else {\n        newMessageWrapper = '<div class=\"direct-chat-msg\">' + newMessage + '<\/div>'\n      }\n      \n      // append message\n      $(\"#\" + id).find(\".direct-chat-messages\").append(newMessageWrapper);\n    } else if (action === \"update\") {\n      \n      // today's date\n      var d = new Date();\n      var month = d.getMonth() + 1;\n      var day = d.getDate();\n      var today = d.getFullYear() + '/' +\n        ((''+month).length<2 ? '0' : '') + month + '/' +\n        ((''+day).length<2 ? '0' : '') + day;\n        \n      // we assume only text may be updated. Does not make sense to modify author/date\n      \n      $(\"#\" + id)\n        .find(\".direct-chat-text\")\n        .eq(index - 1)\n        .replaceWith('<div class=\"direct-chat-text\"><small class=\"text-red\">(modified: ' + today +')<\/small><br>' +  text + '<\/div>')\n    }\n    \n    // Calls .initialize() for all of the input objects in all input bindings,\n    // in the given scope (document)\n    Shiny.initializeInputs();\n    Shiny.bindAll(); // bind all inputs/outputs\n  });\nlibrary(shiny)\nshinyAppDir(system.file(\"vignettes-demos/userMessages\", package = \"shinydashboardPlus\"))"},{"path":"custom-templates-selection.html","id":"custom-templates-selection","chapter":"15 Template selection","heading":"15 Template selection","text":"numerous HTML templates web. However, may suitable shiny.shiny built top Bootstrap 3 (HTML, CSS Javascript framework), changing framework trivial endeavor. However, shinymaterial shiny.semantic good examples show possible.shiny relies jQuery (currently v 3.4.1 shiny). Consequently, templates based upon React, Vue Javascript framework natively supported. , exist examples React shiny generally,\nreactR package developed Kent Russell Alan Dipert RStudio.See github repository details dependencies related shiny package.Notes: shiny depends Bootstrap 3.4.1, recommend user interested experimenting Bootstrap 4 consciously aware potential incompatibilities. See working example bs4Dash.good source open source HTML templates Colorlib Creative Tim.next chapter, focus tabler.io dashboard template (See Figure 15.1).\nFIGURE 15.1: Tabler dashboard overview\n","code":""},{"path":"custom-templates-dependencies.html","id":"custom-templates-dependencies","chapter":"16 Define dependencies","heading":"16 Define dependencies","text":"Tabler template tiny Bootstrap 4 dashboard template. chapter, describe customize Tabler providing R wrapper. way, underlying JavaScript code left untouched yet able incorporate greater functionality.","code":""},{"path":"custom-templates-dependencies.html","id":"discover-the-project","chapter":"16 Define dependencies","heading":"16.1 Discover the project","text":"first step template adaptation consists exploring underlying Github repository (open source) look mandatory elements, like CSS/JS dependencies. similar strategy want incorporate htmlWidget well.shown Figure 16.1, important folders :dist: contains CSS JS files well libraries like Bootstrap jQuery. also good moment look version dependency might conflict Shiny.demo website folder used demonstration purpose. source explore template capabilities depth.scss build folder may used customize tabler template directly. However stated , directions scope book.\nFIGURE 16.1: Github project exploration\n","code":""},{"path":"custom-templates-dependencies.html","id":"identify-mandatory-dependencies","chapter":"16 Define dependencies","heading":"16.2 Identify mandatory dependencies","text":"Bootstrap 4, jQuery, tabler.min.css tabler.min.js key elements template, contrary flag icons optional (take lot space). goal release template CRAN, mindful 5 Mb maximum size limit. personal experience, can attest quite challenging manage.inspect dependencies, proceed followsDownload clone Github repositoryGo demo folder open layout-dark.html fileOpen HTML inspectorAs depicted Figure ?? left-hand side, need include tabler.min.css header. convinced, try remove DOM see happens. jqvmap actually related external visualization plugin used demo. Finally demo.min.css file demo purpose. prevent template working, skip now. far good, need one file thus!JavaScript dependencies shown right-hand side located end body tag. need chart-related dependencies like apexcharts, jquery.vmap vmap world may safely ignore . keep Bootstrap 4 bundle.js, jQuery core tabler.min.js (order crucial).","code":""},{"path":"custom-templates-dependencies.html","id":"bundle-dependencies","chapter":"16 Define dependencies","heading":"16.3 Bundle dependencies","text":"help htmltoolsDependency function, going create main Tabler HTML dependency containing assets allow template render properly. example, going cheat bit: instead handling local files, use CDN (content delivery network) hosts necessary Tabler assets. avoids include necessary files R package, well github repository.advise reader create one HTML dependency per element. Bootstrap version v4.3.1 (Shiny relies 3.4.1) jQuery 3.5.0 (Shiny relies 3.4.1). can also use CDN:finally create dependency manager:Notice dependencies order deps list: exactly order head HTML page. libraries require loaded specific place, like Tabler dependencies must come Bootstrap.\nsurprising since Tabler built top Bootstrap 4.Let’s see use add_tabler_deps. consider <div> placeholder check dependencies findDependencies (NULL). , wrap add_tabler_deps.shown , dependencies applied div, correct order. order set list list(bs4_deps, jQuery_deps, tablers_deps) allows use avoid potential conflicts. try run simple tag shiny app, notice dependencies added <head> tag, whereas original template loads JavaScript dependencies <body>. Unfortunately, htmltools allow developers distribute dependencies different places. impact templates like Framework7 (powering shinyMobile), JavaScript must place body. practice, challenging guess may solved manual testing.Even though add_tabler_deps function may applied tag, use core HTML template, remain designed!like see dependency system works? Let’s meet next chapter design main dashboard layout.","code":"\ntablers_deps <- htmlDependency(\n  name = \"tabler\",\n  version = \"1.0.7\", # we take that of tabler,\n  src = c(href = \"https://cdn.jsdelivr.net/npm/tabler@1.0.0-alpha.7/dist/\"),\n  script = \"js/tabler.min.js\",\n  stylesheet = \"css/tabler.min.css\"\n)\nbs4_deps <- htmlDependency(\n  name = \"Bootstrap\",\n  version = \"4.3.1\",\n  src = c(href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/\"),\n  script = \"bootstrap.bundle.min.js\"\n)\n\njQuery_deps <- htmlDependency(\n  name = \"jquery\",\n  version = \"3.5.0\",\n  src = c(href = \"https://code.jquery.com/\"),\n  script = \"jquery-3.5.0.slim.min.js\"\n)\n# add all dependencies to a tag. Don't forget to set append to TRUE to preserve any existing dependency\nadd_tabler_deps <- function(tag) {\n  # below, the order is of critical importance!\n  deps <- list(bs4_deps, tablers_deps)\n  attachDependencies(tag, deps, append = TRUE)\n}\ntag <- div()\nfindDependencies(tag)## NULL\ntag <- add_tabler_deps(div())\nfindDependencies(tag)## [[1]]\n## List of 10\n##  $ name      : chr \"Bootstrap\"\n##  $ version   : chr \"4.3.1\"\n##  $ src       :List of 1\n##   ..$ href: chr \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/\"\n##  $ meta      : NULL\n##  $ script    : chr \"bootstrap.bundle.min.js\"\n##  $ stylesheet: NULL\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[2]]\n## List of 10\n##  $ name      : chr \"tabler\"\n##  $ version   : chr \"1.0.7\"\n##  $ src       :List of 1\n##   ..$ href: chr \"https://cdn.jsdelivr.net/npm/tabler@1.0.0-alpha.7/dist/\"\n##  $ meta      : NULL\n##  $ script    : chr \"js/tabler.min.js\"\n##  $ stylesheet: chr \"css/tabler.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\nui <- fluidPage(tag)\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"custom-templates-skeleton","chapter":"17 Template skeleton","heading":"17 Template skeleton","text":"list available layouts quite impressive (horizontal, vertical, compressed, right left, dark, …). next steps, focus dark-compressed template. leave reader try templates exercise.","code":""},{"path":"custom-templates-skeleton.html","id":"identify-template-elements","chapter":"17 Template skeleton","heading":"17.1 Identify template elements","text":"quite lucky since nothing fancy tabler layout. usual, let’s inspect layout-condensed-dark.html (tabler /demo folder) Figure 17.1\nFIGURE 17.1: Tabler condensed layout\n2 main components:\n- header containing brand logo, navigation dropdown\n- content containing dashboard body well footerSomething important: dashboard body mean <body> tag!!","code":""},{"path":"custom-templates-skeleton.html","id":"design-the-page-layout","chapter":"17 Template skeleton","heading":"17.2 Design the page layout","text":"","code":""},{"path":"custom-templates-skeleton.html","id":"the-page-wrapper","chapter":"17 Template skeleton","heading":"17.2.1 The page wrapper","text":"remember structure basic html page seen Chapter 1.2? Well, , reminder.actually don’t need include <html> tag since shiny automatically . construct list tags tagList, including head body. head meta tags multiple purposes:describe encoding,display app different devices. instance apple-mobile-web-app-status-bar-style iOS devices mobile support.Set favicon, icon representing website icon, one may see right side searchbar. Try twitter instance.page title favicon may changed developer, may included parameters function. remember, also CSS head nothing ! Actually, insertion dependencies achieved addDeps function defined Chapter 16. Tabler comes 2 main themes, namely white dark, may applied <body> class attribute (respectively “antialiased theme-dark” “antialiased”). … parameter contain template elements like header dashboard body, remain created. shown Figure 15.1 Chapter 15, tabler dashboard template may contain navigation bar footer. mandatory, create dedicated parameters pass elements …slot.quickly test tabler element renders well confirms setup adequate. , include random tabler element taken demo html page, using HTML. Let’s clear: avoid much possible using HTML security issues. also checks basic Shiny input/output system works expected sliderInput linked plot output.Ok, info card shiny element work like charm, good start. Now may focus aesthetics.","code":"<!DOCTYPE HTML>\n<html>\n  <head>\n  <!-- head content here -->\n  <\/head>\n  <body>\n    <p>Hello World<\/p>\n  <\/body>\n<\/html>\ntabler_page <- function(..., dark = TRUE, title = NULL, favicon = NULL){\n  \n  # head\n  head_tag <- tags$head(\n    tags$meta(charset = \"utf-8\"),\n    tags$meta(\n      name = \"viewport\", \n      content = \"\n        width=device-width, \n        initial-scale=1, \n        viewport-fit=cover\"\n    ),\n    tags$meta(`http-equiv` = \"X-UA-Compatible\", content = \"ie=edge\"),\n    tags$title(title),\n    tags$link(\n      rel = \"preconnect\", \n      href = \"https://fonts.gstatic.com/\", \n      crossorigin = NA\n    ),\n    tags$meta(name = \"msapplication-TileColor\", content = \"#206bc4\"),\n    tags$meta(name = \"theme-color\", content = \"#206bc4\"),\n    tags$meta(name = \"apple-mobile-web-app-status-bar-style\", content = \"black-translucent\"),\n    tags$meta(name = \"apple-mobile-web-app-capable\", content = \"yes\"),\n    tags$meta(name = \"mobile-web-app-capable\", content = \"yes\"),\n    tags$meta(name = \"HandheldFriendly\", content = \"True\"),\n    tags$meta(name = \"MobileOptimized\", content = \"320\"),\n    tags$meta(name = \"robots\", content = \"noindex,nofollow,noarchive\"),\n    tags$link(rel = \"icon\", href = favicon, type = \"image/x-icon\"),\n    tags$link(rel = \"shortcut icon\", href = favicon, type=\"image/x-icon\")\n  )\n  \n  # body\n  body_tag <- tags$body(\n    tags$div(\n      class = paste0(\"antialiased \", if(dark) \"theme-dark\"),\n      style = \"display: block;\",\n      tags$div(class = \"page\", ...)\n    )\n  ) %>% add_tabler_deps()\n  \n  tagList(head_tag, body_tag)\n}\n#thematic_on()\n#onStop(thematic_off)\nui <- tabler_page(\n  \"test\", \n  sliderInput(\"obs\", \"Number of observations:\",\n              min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\"),\n  br(),\n  HTML(\n    [1883 chars quoted with ''']\n  ),\ntitle = \"Tabler test\"\n)\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"the-body-content","chapter":"17 Template skeleton","heading":"17.2.2 The body content","text":"part, translate dashboard body HTML code R. reminder, html2r Alan Dipert substantially speeds conversion process. copy code HTML text area, click convert get R shiny output. create function called tabler_body. … parameter holds dashboard body elements footer dedicated future tabler_footer function.Let’s test previous example.Way better!","code":"\ntabler_body <- function(..., footer = NULL) {\n  div(\n    class = \"content\",\n    div(class = \"container-xl\", ...),\n    tags$footer(class = \"footer footer-transparent\", footer)\n  )\n}\nui <- tabler_page(tabler_body(h1(\"Hello World\")))\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"the-footer","chapter":"17 Template skeleton","heading":"17.2.3 The footer","text":"footer composed left right containers. decide create parameters left right user able pass elements.class attributes taken original HTML template. already familiar Bootstrap 4, may easily customize style. short, row means elements aligned row, text-center amd align-items-center handle text content centering. flex-row-reverse display elements reversed order. Notice also row element contains columns created col class. Bootstrap grid system relies Flexible Box Module, also known flexbox., let’s check brand new element.","code":"\ntabler_footer <- function(left = NULL, right = NULL) {\n  div(\n    class = \"container\",\n    div(\n      class = \"row text-center align-items-center flex-row-reverse\",\n      div(class = \"col-lg-auto ml-lg-auto\", right),\n      div(class = \"col-12 col-lg-auto mt-3 mt-lg-0\", left)\n    )\n  )\n}\nui <- tabler_page(\n  tabler_body(\n    p(\"Hello World\"),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\", \"More\")\n    )\n  )\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"the-navbar-or-header","chapter":"17 Template skeleton","heading":"17.2.4 The navbar (or header)","text":"function called tabler_header. Tabler template, header navbar navbar-expand-md navbar-light classes. don’t need navbar-light class since interested dark theme. shown Figure 17.2, navbar composed 4 elements:navbar toggler visible reduce screen width, like mobile devicesthe brand imagethe navigationthe dropdown menus (mandatory)\nFIGURE 17.2: Tabler header structure\nmay look Bootstrap 4 documentation extra configuration layout.element considered input parameter tabler_navbar function, except navbar toggler default element must removed. Morever, show brand element provided. … parameter slot extra elements (menu dropdowns). following, start creating main container, header_tag unique child container_tag. latter 4 children toggler_tag, brand_tag, dropdown_tag navmenu_tag. situations, {htmltools} functions like tagAppendChild tagAppendChildren game changers better organize code make maintainable. One never knows advance much extra feature added component. Hence cautious beginning crucial!navbar menu main component navbar. … parameter slot menu items. Compared original tabler dashboard template class navbar-nav, add least, nav class make sure items correctly activated/inactivated. nav-pills class select pills instead basic tabs (see ), nothing cosmetic consideration. Notice ul tag contain li elements, navbar items.Besides, navbar menu item either simple button contain multiple menu sub-items. now, focus simple items.","code":"\ntabler_navbar <- function(..., brand_url = NULL, brand_image = NULL, nav_menu, nav_right = NULL) {\n  \n  header_tag <- tags$header(class = \"navbar navbar-expand-md\")\n  container_tag <- tags$div(class = \"container-xl\")\n  \n  # toggler for small devices (must not be removed)\n  toggler_tag <- tags$button(\n    class = \"navbar-toggler\", \n    type = \"button\", \n    `data-toggle` = \"collapse\", \n    `data-target` = \"#navbar-menu\",\n    span(class = \"navbar-toggler-icon\")\n  )\n  \n  # brand elements\n  brand_tag <- if (!is.null(brand_url) || !is.null(brand_image)) {\n    a(\n      href = if (!is.null(brand_url)) {\n        brand_url\n      } else {\n        \"#\"\n      },\n      class = \"navbar-brand navbar-brand-autodark d-none-navbar-horizontal pr-0 pr-md-3\",\n      if(!is.null(brand_image)) {\n        img(\n          src = brand_image, \n          alt = \"brand Image\",\n          class = \"navbar-brand-image\"\n        )\n      }\n    )\n  }\n  \n  dropdown_tag <- if (!is.null(nav_right)) {\n    div(class = \"navbar-nav flex-row order-md-last\", nav_right)\n  }\n  \n  navmenu_tag <- div(\n    class = \"collapse navbar-collapse\", \n    id = \"navbar-menu\",\n    div(\n      class = \"d-flex flex-column flex-md-row flex-fill align-items-stretch align-items-md-center\",\n      nav_menu\n    ),\n    if (length(list(...)) > 0) {\n      div(\n        class = \"ml-md-auto pl-md-4 py-2 py-md-0 mr-md-4 order-first order-md-last flex-grow-1 flex-md-grow-0\", \n        ...\n      )\n    }\n  )\n  \n  container_tag <- container_tag %>% tagAppendChildren(\n    toggler_tag,\n    brand_tag,\n    dropdown_tag,\n    navmenu_tag\n  )\n  \n  header_tag %>% tagAppendChild(container_tag)\n  \n}\ntabler_navbar_menu <- function(...) {\n  tags$ul(class = \"nav nav-pills navbar-nav\", ...)\n}"},{"path":"custom-templates-skeleton.html","id":"navbar-navigation","chapter":"17 Template skeleton","heading":"17.2.4.1 Navbar navigation","text":"navbar extremely important since drive navigation template. like associate item separate page body content. allow us go new page time change item. brief, similar Shiny tabsetPanel function.HTML, menu items <> tags (links) given href attribute pointing specific page located server files. point Shiny app can’t decide split content several pages. app.R generating simple HTML page. strategy create tabbed navigation, mimic multiple pages.Let’s see tabset navigation works. menu list, items must :data-toggle attribute set taban href attribute holding unique id. unique id mandatory since point menu item corresponding body content.body side, tab panels contained tabset panel (simple div container), role attribute set tabpanel id corresponding href passed menu item. exact match id href mandatory, shown Figure 17.3.\nFIGURE 17.3: Tabler tabset main principle\n, propose possible implementation menu item, well corresponding body tab panel. text parameter corresponds nav item text displayed menu. also added optional icon ability select item start.also decided add fade transition effect tabs, per Bootstrap 4 documentation.testing shiny app?point might argue even validated template elements. instance, going back tabler_navbar_menu_item function, find following possible issues:happens user provides invalid tabName, ie text valid jQuery like tab&?++?happens user accidentally activates 2 tabs start?see later Chapter 18 validate parameter.","code":"\ntabler_navbar_menu_item <- function(text, tabName, icon = NULL, selected = FALSE) {\n  \n  item_cl <- paste0(\"nav-link\", if(selected) \" active\")\n  \n  tags$li(\n    class = \"nav-item\",\n    a(\n      class = item_cl,\n      href = paste0(\"#\", tabName),\n      `data-toggle` = \"pill\", # see https://getbootstrap.com/docs/4.0/components/navs/\n      `data-value` = tabName,\n      role = \"tab\",\n      span(class = \"nav-link-icon d-md-none d-lg-inline-block\", icon),\n      span(class = \"nav-link-title\", text)\n    )\n  )\n}\ntabler_tab_items <- function(...) {\n  div(class = \"tab-content\", ...)\n}\n\ntabler_tab_item <- function(tabName = NULL, ...) {\n  div(\n    role = \"tabpanel\",\n    class = \"tab-pane fade container-fluid\",\n    id = tabName,\n    ...\n  )\n}\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = tabler_navbar_menu(\n      tabler_navbar_menu_item(\n        text = \"Tab 1\",\n        icon = NULL,\n        tabName = \"tab1\",\n        selected = TRUE\n      ),\n      tabler_navbar_menu_item(\n        text = \"Tab 2\",\n        icon = NULL,\n        tabName = \"tab2\"\n      )\n    )\n  ),\n  tabler_body(\n    tabler_tab_items(\n      tabler_tab_item(\n        tabName = \"tab1\",\n        p(\"Hello World\")\n      ),\n      tabler_tab_item(\n        tabName = \"tab2\",\n        p(\"Second Tab\")\n      )\n    ),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\")\n    )\n  )\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"fine-tune-tabs-behavior","chapter":"17 Template skeleton","heading":"17.2.4.2 Fine tune tabs behavior","text":"Quite good isn’t ? notice however even first tab selected default, content shown. fix , apply jQuery skills. According Bootstrap documentation, must trigger show event active tab start, well add classes show active associated tab panel dashboard body. therefore target nav item active class item found, select first item default activate body content.script included www folder app. ’ll see Chapter 19 custom input binding may perfectly handle situation preferred.result shown Figure 17.4. ’d also suggest include least 1 input/output per tab, test whether everything works properly.\nFIGURE 17.4: Tabler template navbar\nLooks like done main template elements. Actually, wouldn’t better include, least, card containers?","code":"$(function() {\n  // this makes sure to trigger the show event on the active   tab at start\n  let activeTab = $('#navbar-menu .nav-link.active');\n  // if multiple items are found\n  if (activeTab.length > 0) {\n    let tabId = $(activeTab).attr('data-value');\n    $(activeTab).tab('show');\n    $(`#${tabId}`).addClass('show active');\n  } else {\n    $('#navbar-menu .nav-link')\n      .first()\n      .tab('show');\n  }\n});\n#thematic_on()\n#onStop(thematic_off)\n# example with custom JS code to activate tabs\nshinyAppDir(system.file(\"chapter12/tabler_tabs\", package = \"OSUICode\"))"},{"path":"custom-templates-skeleton.html","id":"card-containers","chapter":"17 Template skeleton","heading":"17.2.5 Card containers","text":"Card central piece template may contain visualizations, metrics much . Fortunately, Tabler large range card containers.","code":""},{"path":"custom-templates-skeleton.html","id":"classic-card","chapter":"17 Template skeleton","heading":"17.2.5.1 Classic card","text":"call classic card like box container shinydashboard. card structure key elements:width control space taken card Bootstrap grida title, general header (tabler always follow rule header optional)body main contentstyle elements like color statusesa footer (optional, tabler include )comprehensive list tabler card features may found . faster, copy following HTML code html2R shiny app convert Shiny tagsBelow result. next step consist replacing content parameters tabler_card function, whenever necessary. instance, first <div> sets width card. Bootstrap grid ranges 0 12, creating width parameter control card size. proceed similarly title, status, body content. seems reasonable allow title NULL (, title shown), thing status. Regarding card default width, value six also makes sense, take half row.meantime, ’d also nice able display cards row. Let’s create tabler_row:, show example tabler_card function, combination apexcharter dreamRs.code output also shown Figure 17.5.\nFIGURE 17.5: Tabler card component\n","code":"<div class=\"col-md-6\">\n  <div class=\"card\">\n    <div class=\"card-status-top bg-danger\"><\/div>\n    <div class=\"card-body\">\n      <h3 class=\"card-title\">Title<\/h3>\n      <p>Some Text.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\ntabler_card <- function(..., title = NULL, status = NULL, width = 6, padding = NULL) {\n  \n  card_cl <- paste0(\n    \"card\", \n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n  \n  status_tag <- if (!is.null(status)) {\n    div(class = paste0(\"card-status-top bg-\", status))\n  }\n  \n  body_tag <- div(\n    class = \"card-body\",\n    # we could have a smaller title like h4 or h5...\n    if (!is.null(title)) {\n      h3(class = \"card-title\", title)\n    },\n    ...\n  )\n  \n  main_wrapper <- div(class = paste0(\"col-md-\", width))\n  card_wrapper <- div(class = card_cl)\n  \n  card_wrapper <- card_wrapper %>% tagAppendChildren(status_tag, body_tag)\n  main_wrapper %>% tagAppendChild(card_wrapper)\n}\ntabler_row <- function(...) {\n  div(class = \"row row-deck\", ...)\n}\n# test the card\ndata(\"economics_long\")\neconomics_long <- economics_long %>%\n  group_by(variable) %>%\n  slice((n()-100):n())\n\nspark_data <- data.frame(\n  date = Sys.Date() + 1:20,\n  var1 = round(rnorm(20, 50, 10)),\n  var2 = round(rnorm(20, 50, 10)),\n  var3 = round(rnorm(20, 50, 10))\n)\n\nmy_card <- tabler_card(\n  apexchartOutput(\"my_chart\"), \n  title = \"My card\", \n  status = \"danger\"\n)\n\nui <- tabler_page(\n  tabler_body(\n    tabler_row(\n      my_card,\n      tabler_card(\n        apexchartOutput(\"spark_box\"), \n        title = \"My card\", \n        status = \"success\"\n      ) \n    )\n  )\n)\nserver <- function(input, output) {\n  output$my_chart <- renderApexchart({\n    apex(data = economics_long, type = \"area\", mapping = aes(x = date, y = value01, fill = variable)) %>%\n      ax_yaxis(decimalsInFloat = 2) %>% # number of decimals to keep\n      ax_chart(stacked = TRUE) %>%\n      ax_yaxis(max = 4, tickAmount = 4)\n  })\n  \n  output$spark_box <- renderApexchart({\n    spark_box(\n      data = spark_data[, c(\"date\", \"var3\")],\n      title = mean(spark_data$var3), \n      subtitle = \"Variable 3\",\n      color = \"#FFF\", background = \"#2E93fA\",\n      title_style = list(color = \"#FFF\"),\n      subtitle_style = list(color = \"#FFF\")\n    )\n  })\n}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"ribbons-card-components","chapter":"17 Template skeleton","heading":"17.2.6 Ribbons: card components","text":"Let’s finish part including card component, namely ribbon.Integrating freshly created ribbon component requires modify card structure since ribbon added body tag, parameter associated slot. also modify tabler_card function htmltools contains tools help us. Since ribbon put card body (card container), may think tagAppendChild function, introduced Chapter 3:shown , ribbon successfuly included card tag. Now, check looks shiny app.\nFIGURE 17.6: Tabler ribbon component\n","code":"\ntabler_ribbon <- function(..., position = NULL, color = NULL, bookmark = FALSE) {\n  \n  ribbon_cl <- paste0(\n    \"ribbon\",\n    if (!is.null(position)) sprintf(\" bg-%s\", position),\n    if (!is.null(color)) sprintf(\" bg-%s\", color),\n    if (bookmark) \" ribbon-bookmark\"\n  )\n  div(class = ribbon_cl, ...)\n}\n# add the ribbon to a card\nmy_card <- tabler_card(title = \"Ribbon\", status = \"info\")\n\nstr(my_card)## List of 3\n##  $ name    : chr \"div\"\n##  $ attribs :List of 1\n##   ..$ class: chr \"col-md-6\"\n##  $ children:List of 1\n##   ..$ :List of 3\n##   .. ..$ name    : chr \"div\"\n##   .. ..$ attribs :List of 1\n##   .. .. ..$ class: chr \"card\"\n##   .. ..$ children:List of 2\n##   .. .. ..$ :List of 3\n##   .. .. .. ..$ name    : chr \"div\"\n##   .. .. .. ..$ attribs :List of 1\n##   .. .. .. .. ..$ class: chr \"card-status-top bg-info\"\n##   .. .. .. ..$ children: list()\n##   .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n##   .. .. ..$ :List of 3\n##   .. .. .. ..$ name    : chr \"div\"\n##   .. .. .. ..$ attribs :List of 1\n##   .. .. .. .. ..$ class: chr \"card-body\"\n##   .. .. .. ..$ children:List of 1\n##   .. .. .. .. ..$ :List of 3\n##   .. .. .. .. .. ..$ name    : chr \"h3\"\n##   .. .. .. .. .. ..$ attribs :List of 1\n##   .. .. .. .. .. .. ..$ class: chr \"card-title\"\n##   .. .. .. .. .. ..$ children:List of 1\n##   .. .. .. .. .. .. ..$ : chr \"Ribbon\"\n##   .. .. .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n##   .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n##   .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n##  - attr(*, \"class\")= chr \"shiny.tag\"\nmy_card$children[[1]] <- my_card$children[[1]] %>% \n  tagAppendChild(\n    tabler_ribbon(\n      icon(\"info-circle\", class = \"fa-lg\"), \n      bookmark = TRUE,\n      color = \"red\"\n    )\n  )\nui <- tabler_page(\n  tabler_body(\n    my_card\n  )\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"icons","chapter":"17 Template skeleton","heading":"17.2.7 Icons","text":"mentioned may include fontawesome icons provided Shiny, well libraries. Moreover, Tabler internal svg library located .","code":""},{"path":"custom-templates-skeleton.html","id":"exercises-3","chapter":"17 Template skeleton","heading":"17.3 Exercises","text":"Consider tab card bottom tabler documentation. Propose implementation feature.look page. Select 2 elements create corresponding R functions.","code":""},{"path":"custom-templates-testing.html","id":"custom-templates-testing","chapter":"18 Testing and validating templates elements","heading":"18 Testing and validating templates elements","text":"now, building template boilerplate, main skeleton functions (page, navbar, navbar menu, …) well components cards, ribbons, progress bars. also exposed techniques substantially give interactivity template, leveraging freshly acquired JavaScript skills. mean ready make template public? yet since essentials steps missing:Input validation crucial step toward success. Briefly, consists checking user inputs functions fail safely elegantly providing meaningful error messages warnings. concept already covered R Data Science, Advanced R lot resources. Hence, trying reinvent wheel rely already existing patterns, whose effectiveness longer demonstrated. Welcome defensive programming world!hand, testing components allows check functions supposed . Consequently, proof robustness, increases reproducibility. significantly reduces mental load comes start code refactoring, thereby making feel slightly less guilty creating breaking changes since, time, tests able capture error.","code":""},{"path":"custom-templates-testing.html","id":"validate-template-functions","chapter":"18 Testing and validating templates elements","heading":"18.1 Validate template functions","text":"","code":""},{"path":"custom-templates-testing.html","id":"create-your-own-validations","chapter":"18 Testing and validating templates elements","heading":"18.1.1 Create your own validations","text":", show examples validate user inputs. first consider tabler_card element Chapter 17.first thing think validate. , see least 3 test:checking status valuechecking width valuechecking padding valueWriting validation tests requires knowledge underlying mechanisms. case, must know Bootstrap 4 grid rules valid color statuses. Bootstrap 4 grid ranges 1 12. words, card width 12 take full page wherease, may align 3 cards width 4. Valid statuses primary, secondary, success, info, danger, warning, light dark.therefore pretty straightforward validate card width: must numeric 1 12. Moreover, since template containers including width parameter, create functionTo check status parameter, save valid statuses vector take validStatuses function shinydashboard utils. also make sense create function since parameter widely used among template components. Contrary shinydashboard function, custom valid_status fail status NULL since mandatory parameter.finish padding validation. According Tabler documentation, three possible choices, namely sm, md lg.apply validation card element.R 4.0.0, stopifnot function may good alternative stop.recommend reasonable validate every single parameter.","code":"\ntabler_card <- function(..., title = NULL, status = NULL, width = 6, stacked = FALSE, padding = NULL) {\n  \n  card_cl <- paste0(\n    \"card\", \n    if (stacked) \" card-stacked\",\n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n  \n  div(\n    class = paste0(\"col-md-\", width),\n    div(\n      class = card_cl,\n      if (!is.null(status)) {\n        div(class = paste0(\"card-status-top bg-\", status))\n      },\n      div(\n        class = \"card-body\",\n        # we could have a smaller title like h4 or h5...\n        if (!is.null(title)) {\n          h3(class = \"card-title\", title)\n        },\n        ...\n      )\n    )\n  )\n  \n}\nvalidate_width <- function(width) {\n  if (is.numeric(width)) {\n    if (width < 1 || width > 12) {\n      stop(\"width must belong to [1, 12], as per Bootstrap 4 grid documentation. See more at https://getbootstrap.com/docs/4.0/layout/grid/\")\n    }\n  } else {\n    stop(\"width must be numeric\")\n  }\n}\n\n# validate_width(-1)\n# validate_width(13)\n# validate_width(\"string\")\nvalid_statuses <- c(\n  \"primary\", \n  \"secondary\",\n  \"success\", \n  \"info\", \n  \"warning\", \n  \"danger\",\n  \"light\",\n  \"dark\"\n)\n\nvalidate_status <- function(status) {\n\n  if (is.null(status)) {\n    return(TRUE) \n  } else {\n    if (status %in% valid_statuses) {\n      return(TRUE)\n    }\n  }\n\n  stop(\"Invalid status: \", status, \". Valid statuses are: \",\n       paste(valid_statuses, collapse = \", \"), \".\")\n}\nvalid_paddings <- c(\"sm\", \"md\", \"lg\")\n\nvalidate_padding <- function(padding) {\n  if (!is.null(padding)) {\n    if (!(padding %in% valid_paddings)) {\n      stop(\"Invalid status: \", padding, \". Valid choices are: \",\n       paste(valid_paddings, collapse = \", \"), \".\")\n    }\n  }\n}\ntabler_card <- function(..., title = NULL, status = NULL, width = 6, stacked = FALSE, padding = NULL) {\n  \n  validate_status(status)\n  validate_width(width)\n  validate_padding(padding)\n  \n  card_cl <- paste0(\n    \"card\", \n    if (stacked) \" card-stacked\",\n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n  \n  div(\n    class = paste0(\"col-md-\", width),\n    div(\n      class = card_cl,\n      if (!is.null(status)) {\n        div(class = paste0(\"card-status-top bg-\", status))\n      },\n      div(\n        class = \"card-body\",\n        # we could have a smaller title like h4 or h5...\n        if (!is.null(title)) {\n          h3(class = \"card-title\", title)\n        },\n        ...\n      )\n    )\n  )\n  \n}"},{"path":"custom-templates-testing.html","id":"existing-utils-functions","chapter":"18 Testing and validating templates elements","heading":"18.1.2 Existing utils functions","text":"","code":""},{"path":"custom-templates-testing.html","id":"validating-tags","chapter":"18 Testing and validating templates elements","heading":"18.1.2.1 Validating tags","text":"problem approach may take time create validation functions. Fortunately, packages like {shinydashboard} include really powerful validation functions, especially tagAssert. function included book side package may use time.Importantly, tagAssert raise error condition fulfilled. Another function, tagMatches simply returns TRUE/FALSE. looks ìd, class, name tag attribute like data-value. Like tagAssert, tagMatches also available book side package.","code":"\nmyTag <- div(class = \"bg-blue\")\n\ntagAssert(myTag, type = \"div\")\ntagAssert(myTag, type = \"li\") # will fail\ntagAssert(myTag, class = \"bg-blue\")\ntagMatches(myTag, id = \"d\")\ntagMatches(myTag, class = \"bg-blue\")"},{"path":"custom-templates-testing.html","id":"validating-css-units","chapter":"18 Testing and validating templates elements","heading":"18.1.2.2 Validating CSS units","text":"validateCssUnit belongs Shiny exported function. useful validate parameter involving CSS unit like width height.point reuse already exists tools help efficient validating template elements.","code":""},{"path":"custom-templates-testing.html","id":"example-refine-navbar-menu-items","chapter":"18 Testing and validating templates elements","heading":"18.1.3 Example: refine navbar menu items","text":"","code":""},{"path":"custom-templates-testing.html","id":"avoid-wrong-jquery-selectors","chapter":"18 Testing and validating templates elements","heading":"18.1.3.1 Avoid wrong jQuery selectors","text":"Chapter 17, developed tabler_navbar_menu_item function. tabName parameter critical since responsible driving navigation. must ensure value provided user compatible jQuery selectors conventions. illustrate problem, consider example , second tab name hello%%&1:Notice see second tab content. proposal validate_tab function. first detect punctuation provided input. Although mandatory, extract send meaningful error message.\nfinally raise error punctuation found.validate_tabName must inserted beginning tabler_navbar_menu_item well tabler_tab_item, latter also relying tabName.","code":"\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = tabler_navbar_menu(\n      inputId = \"mymenu\",\n      tabler_navbar_menu_item(\n        text = \"Tab 1\",\n        icon = NULL,\n        tabName = \"tab1\",\n        selected = TRUE\n      ),\n      tabler_navbar_menu_item(\n        text = \"Tab 2\",\n        icon = NULL,\n        tabName = \"hello%%&1\"\n      )\n    )\n  ),\n  tabler_body(\n    tabler_tab_items(\n      tabler_tab_item(\n        tabName = \"tab1\",\n        sliderInput(\n          \"obs\", \n          \"Number of observations:\",\n          min = 0,\n          max = 1000, \n          value = 500\n        ),\n        plotOutput(\"distPlot\")\n      ),\n      tabler_tab_item(\n        tabName = \"hello%%&1\",\n        p(\"Second Tab\")\n      )\n    ),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\", \"More\")\n    )\n  )\n)\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)\nvalidate_tabName <- function(tabName) {\n  temp <- grepl(\"[[:punct:]]\", tabName)\n  wrong_selector <- stringr::str_extract_all(tabName, \"[[:punct:]]\")[[1]] %>% \n    stringr::str_c(collapse = \"\")\n  if (temp) stop(paste(\"Please do not use punctuation characters like\",  wrong_selector,\"in tabNames. This might cause JavaScript issues.\"))\n}\n# validate_tabName(\"test%\") # fails\nvalidate_tabName(\"plop\")"},{"path":"custom-templates-testing.html","id":"checking-for-multiple-selected-items","chapter":"18 Testing and validating templates elements","heading":"18.1.3.2 Checking for multiple selected items","text":"Another issue possibility multiple selected tab items start. Looking back tabler_navbar_menu, surprising since absolutely checks!classic method inspect items provided tabler_navbar_menu capture list. extract children items lapply(list(...) , \"[\", 3) (shiny tag structure first position holds tag name, second named list attributes third slot children). children apply shinydashboard internal function findAttribute, allows search specific attribute value given tag. use vapply return atomic vector (like c(1, 2), lists vectors recursive!) compute sum vector. TRUE occurrence counted 1 FALSE 0. Therefore, latter higher 1, means user provided 1 selected tab, subsequently raise error.","code":"\ntabler_navbar_menu <- function(...) {\n  tags$ul(class = \"nav nav-pills navbar-nav\", ...)\n}\ntabler_navbar_menu <- function(...) {\n  \n  items <- lapply(list(...) , `[`, 3)\n  res <- sum(vapply(items, findAttribute, \"class\", \"nav-link active\", FUN.VALUE = logical(1)))\n  if (res > 1) stop(\"Cannot have multiple selected items at start!\")\n  \n  tags$ul(class = \"nav nav-pills navbar-nav\", ...)\n}\n\n# the code below must fail\nmenu <- tabler_navbar_menu(\n  tabler_navbar_menu_item(\n    text = \"Tab 1\",\n    icon = NULL,\n    tabName = \"tab1\",\n    selected = TRUE\n  ),\n  tabler_navbar_menu_item(\n    text = \"Tab 2\",\n    icon = NULL,\n    tabName = \"tab2\",\n    selected = TRUE\n  )\n)"},{"path":"custom-templates-testing.html","id":"testing-templates-elements","chapter":"18 Testing and validating templates elements","heading":"18.2 Testing templates elements","text":"Imagine one day, someone accidentally remove width validation function, significant refactoring. Later, receive new message github, stating someone opened new issue. According report, card properly displayed although error thrown. Among 400 lines code provided, hardly notice width parameter set 13, line Bootstrap 4 documentation, remain 1 12. lost 10 minutes, end user, even worse.proper testing pipeline, problem avoided. Ironically, writing corresponding test takes 2 minutes.reference testing functions {testthat} package. short, unit test consists setting expectations function check whether fail pass. instance, tabler_card example, validate_width must fail given width expected bounds numeric. apply test_that function description test context, followed expectations inside curly brackets.test validate_status validate_padding.far good. lines code, substantially increased robustness function without increasing complexity. Now, let’s try remove validate_width step tabler_card.Notice 3 tests elegantly fail. provided context (“validate width works”) immediately indicates culprit, game changer debugging.","code":"\ntest_that(\"validate width works\", {\n  expect_error(tabler_card(width = -1))\n  expect_error(tabler_card(width = 13))\n  expect_error(tabler_card(width = \"hello world\"))\n})## Test passed 🎊\ntest_that(\"validate status works\", {\n  expect_error(tabler_card(status = \"toto\"))\n})## Test passed 🥳\ntest_that(\"validate padding works\", {\n  expect_error(tabler_card(width = \"xs\"))\n})## Test passed 🥇\ntabler_card <- function(..., title = NULL, status = NULL, width = 6, stacked = FALSE, padding = NULL) {\n  \n  validate_status(status)\n  validate_padding(padding)\n  \n  card_cl <- paste0(\n    \"card\", \n    if (stacked) \" card-stacked\",\n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n  \n  div(\n    class = paste0(\"col-md-\", width),\n    div(\n      class = card_cl,\n      if (!is.null(status)) {\n        div(class = paste0(\"card-status-top bg-\", status))\n      },\n      div(\n        class = \"card-body\",\n        # we could have a smaller title like h4 or h5...\n        if (!is.null(title)) {\n          h3(class = \"card-title\", title)\n        },\n        ...\n      )\n    )\n  )\n  \n}\n\n\ntest_that(\"validate width works\", {\n  expect_error(tabler_card(width = -1))\n  expect_error(tabler_card(width = 13))\n  expect_error(tabler_card(width = \"hello world\"))\n})"},{"path":"custom-templates-testing.html","id":"testing-template-behavior","chapter":"18 Testing and validating templates elements","heading":"18.2.1 Testing template behavior","text":"Testing JavaScript behavior one biggest challenge validate template. \nR component carefully validated, mean JavaScript effects\n! instance, let’s consider tabler_progress may updated update_tabler_progress:check whether progress value correctly set?","code":""},{"path":"custom-templates-testing.html","id":"r-side","chapter":"18 Testing and validating templates elements","heading":"18.2.1.1 R side","text":"Testing R side quite easy. Let’s recall update_tabler_progress function:function 2 things:Captures id targeted progress new valueSends message JSThe test consists checking whether send elements session. first create\ndummy session environment contains ns mimic session$ns function\nsendCustomMessage test message handler part:, sendCustomMessage simply stores last sent message session$lastCustomMessage.call update_tabler_progress random parameters capture \nlast sent message res variable:Importantly, don’t forget set session parameter session, otherwise,\ndefault shiny::getDefaultReactiveDomain NULL.time set expectations:res must list length 2.expected custom handler type update-progress.sent value 10.sent id myprogress.translate testthat:test set, ensures seamlessly capture breaking change API.","code":"\nupdate_tabler_progress <- function(id, value, session = shiny::getDefaultReactiveDomain()) {\n  message <- list(id = session$ns(id), value = value)\n  session$sendCustomMessage(type = \"update-progress\", message)\n}\nsession <- as.environment(\n  list(\n    ns = identity,\n    sendCustomMessage = function(type, message) {\n      session$lastCustomMessage <- list(type = type, message = message)\n    }\n  )\n)\nupdate_tabler_progress(id = \"myprogress\", value = 10, session = session)\nres <- session$lastCustomMessage\ntest_that(\"update progress works\", {\n  \n  session <- as.environment(\n    list(\n      ns = identity,\n      sendCustomMessage = function(type, message) {\n        session$lastCustomMessage <- list(type = type, message = message)\n      }\n    )\n  )\n  \n  update_tabler_progress(id = \"myprogress\", value = 10, session = session)\n  res <- session$lastCustomMessage\n  \n  expect_length(res, 2)\n  expect_equal(res$type, \"update-progress\")\n  expect_length(res$message, 2)\n  expect_equal(res$message$id, \"myprogress\")\n  expect_equal(res$message$value, 10)\n})"},{"path":"custom-templates-testing.html","id":"custom-templates-testing-js","chapter":"18 Testing and validating templates elements","heading":"18.2.1.2 JS side","text":"following, test whether piece JS works expected:going leverage crrry packages developed Colin Fay ThinkR.\nOverall, {crrry} adaptation {crrri} shiny, native Chrome Remote Interface R using Chrome Debugging Protocol. words, provides tools programmatically control\nweb browser many things like inspecting web page,\ntaking screenshots, testing… may know shinytest relies another technology,\nphantomjs. latter play well Bootstrap 4 templates, ’s ’ll use \n.crrry already introduced Engineering Production-Grade Shiny Apps book.first step run update_tabler_progress example locally add returned\nurl following code. run app another process processx:way, can run test main R process, checking p alive (app\nloads immediately may wait time computations):wait Shiny ready:Note --remote-debugging-port=31683 gives link Chrome devtools link\ninspect current app, shown Figure 18.1.\nFIGURE 18.1: Tabler progress bar debug tools\nnow time write JS testing logic. know moving slider triggers\nupdate_tabler_progress function. change slider value,\nthanks noUiSlider API:use call_js update slider value within testing pipeline:According Figure 18.2, slider properly updated,\nprogress bar also seems expected value.\nFIGURE 18.2: Updated slider\nrecover progress value knowing contained aria-valuenow\nattribute, string. convert number parseInt:test pass, meaning update_tabler_progress, especially associated\ncustom message handler, works. test simple involve input elements.\nYet, crrry also support setting input values shiny_set_input(id, value).","code":"Shiny.addCustomMessageHandler('update-progress', function(message) {\n  $('#' + message.id)\n    .css('width', message.value +'%')\n    .attr('aria-valuenow', message.value);\n});\np <- processx::process$new(\n  \"Rscript\", \n  c( \"-e\",  \"options('shiny.port'= 3515);OSUICode::update_tabler_progress_example()\" )\n)\n\nSys.sleep(2)\n\np$is_alive()\nlibrary(crrry)\nlibrary(testthat)\ntest <- crrry::CrrryOnPage$new(\n  chrome_bin = pagedown::find_chrome(),\n  chrome_port = httpuv::randomPort(),\n  url = \"http://localhost:3515/\",\n  headless = TRUE\n)\ntest$wait_for_shiny_ready()var slider = document.getElementById('progress_value');\nslider.noUiSlider.set(50);\ntest$call_js(\n  \"var slider = document.getElementById('progress_value');\n   slider.noUiSlider.set(50);\n  \"\n)\nval <- test$call_js(\n  \"parseInt($('#progress1').attr('aria-valuenow'));\n  \"\n)\nexpect_equal(val$result$value, 50)\n\n# stop the test whenever satisfied\ntest$stop()"},{"path":"custom-templates-testing.html","id":"test-input-bindings","chapter":"18 Testing and validating templates elements","heading":"18.2.2 Test input bindings","text":"decide add complexity show test home made input binding. going \ntest tabler navbar JavaScript logic developed Chapter 19.3.\nstarting test, define expectations:tabler_navbar_menu_item selected default, start, first item selected.\nmust active class . check whether first <class=\"nav-link\">\nactive class.Moreover, one item selected start, make sure item active class.ensure clicking another link switch currently selected link \ncorresponding input R side properly updated.call update_tabler_tab_item check whether active link \nsuccessfully changed.time navbar item active, corresponding body tabler_tab_item must hold \nactive show class, make sure tab content visible. tab may classes time.described , run app another R process, keep main process\ntest:start, link selected, meaning expect first link active shown. navbar\nmay targeted using navbar-nav class use find locate active child must\nnav-link active classes. also control 1 item selected inspecting length\nactive nav link items.\nextract index index contained data-value attribute:Now let’s see whether body tab good index. target tab-content class look\nelement active show classes. recover id contains tab name:programmatically change active tab clicking second link. use\n.nav-link:eq(1) select second link use .nav-link:(.active) since\n2 links. also recover index selected link corresponding tab. \neverything happens well, expect value 2:click “change tab” button, update id. latter,\nactually triggers update_tabler_tab_item. also want check behavior expect\nback tab 1:test successful, means receiveMessage setValue methods\nwork expected. finally test input value setting value tab2 shiny_set_input.\nShiny input values stored Shiny.shinyapp.$inputValues object, shown Chapter 12:effect navbar triggers notification.exercise, leave reader write test check app behavior \nsecond tab active start.","code":"\np <- processx::process$new(\n  \"Rscript\", \n  c( \"-e\",  \"options('shiny.port'= 3515);OSUICode::update_tabler_navbar_example()\" )\n)\n\nSys.sleep(2)\n\np$is_alive()\n\ntest <- crrry::CrrryOnPage$new(\n  chrome_bin = pagedown::find_chrome(),\n  chrome_port = httpuv::randomPort(),\n  url = \"http://localhost:3515/\",\n  headless = TRUE\n)\n\ntest$wait_for_shiny_ready()\nactive <- test$call_js(\"$('.navbar-nav').find('.nav-link.active').length\")\nexpect_equal(active$result$value, 1)\n\ntest$wait_for_shiny_ready()\n\nres1 <- test$call_js(\"$('.navbar-nav').find('.nav-link.active').attr('data-value')\")\nexpect_equal(res1$result$value, \"tab1\")\nres2 <- test$call_js(\"$('.tab-content').find('.active.show').attr('id')\")\nexpect_equal(res1$result$value, res2$result$value)\ntest$call_js(\"$('.navbar-nav .nav-link:eq(1)').click();\")\n\nres3 <- test$call_js(\"$('.navbar-nav').find('.nav-link.active').attr('data-value')\")\nexpect_equal(res3$result$value, \"tab2\")\n\ntest$wait_for_shiny_ready()\n\nres4 <- test$call_js(\"$('.tab-content').find('.active.show').attr('id')\")\nexpect_equal(res3$result$value, res4$result$value)\ntest$call_js(\"$('#update').click();\")\n\nres5 <- test$call_js(\"$('.navbar-nav').find('.nav-link.active').attr('data-value')\")\nexpect_equal(res5$result$value, \"tab1\")\n\ntest$wait_for_shiny_ready()\n\nres6 <- test$call_js(\"$('.tab-content').find('.active.show').attr('id')\")\nexpect_equal(res5$result$value, res6$result$value)\ntest$shiny_set_input(\"current_tab\", \"tab2\")\ntab_input <- test$call_js(\"Shiny.shinyapp.$inputValues.current_tab\")\nexpect_equal(tab_input$result$value, \"tab2\")\ntest$stop()"},{"path":"custom-templates-inputs.html","id":"custom-templates-inputs","chapter":"19 Develop custom input widgets","heading":"19 Develop custom input widgets","text":"previous chapter, built template dependencies, page skeleton, well containers like cards. However, nice customize user interactions integrating new inputs. chapter, apply knowledge Chapter 11 creating new Shiny input.","code":""},{"path":"custom-templates-inputs.html","id":"tabler-action-button","chapter":"19 Develop custom input widgets","heading":"19.1 Tabler action button","text":"Let’s start simple input: action button. Tabler built-HTML buttons substantial amount custom styles, compared classic Shiny action button.","code":""},{"path":"custom-templates-inputs.html","id":"reminders-about-the-action-button","chapter":"19 Develop custom input widgets","heading":"19.1.1 Reminders about the action button","text":"code actionButton input.button tag attributes: id, style, type, class, data-val, label children passed via ...app starts, action button value 0 click increment value 1. behaviour created? Shiny input element (radio, slider), associated JavaScript file, called input binding, can find . case, interested action button binding:see whole script since focus first method, find. look elements class action-button, making possible define multiple action buttons time.Consequently, go back previous section, actionButton class action-button, thereby making visible binding. Interestingly, elements class action-button considered shiny input binding.","code":"\nactionButton <- function (inputId, label, icon = NULL, width = NULL, ...)  {\n  value <- restoreInput(id = inputId, default = NULL)\n  tags$button(\n    id = inputId, \n    style = if (!is.null(width)) paste0(\"width: \", validateCssUnit(width), \";\"), \n    type = \"button\", \n    class = \"btn btn-default action-button\", \n    `data-val` = value, \n    list(validateIcon(icon), label), ...\n  )\n}var actionButtonInputBinding = new InputBinding();\n$.extend(actionButtonInputBinding, {\n  find: function(scope) {\n    return $(scope).find(\".action-button\");\n  },\n  getValue: function(el) {\n    return $(el).data('val') || 0;\n  },\n  // ... other methods\n});"},{"path":"custom-templates-inputs.html","id":"application-to-tabler","chapter":"19 Develop custom input widgets","heading":"19.1.2 Application to Tabler","text":"First , let’s compare tabler HTML button Shiny action button.convert R. button API contains style leave reader add extra elements exercise.Tabler, button status mandatory, reason parameter function. Moreover, need add horizontal right margin icon, provided label renders well (mr-1, m stands margin, r right direction 1 margin value). assume default, button wil blue color, given btn-primary.easily check clicking button increments related input. Thus, one may see easy implement custom Tabler input button, built top Shiny action button. output shown Figure 19.1.\nFIGURE 19.1: Tabler action button\ngeneral rule, don’t try reinvent wheel see whether existing Shiny element may reused/adapted!","code":"<button class=\"btn btn-primary\">Button<\/button>\ntabler_button <- function(inputId, label, status = NULL, icon = NULL, width = NULL, ...) {\n  \n  btn_cl <- paste0(\n    \"btn action-button\",\n    if (is.null(status)) {\n      \" btn-primary\"\n    } else {\n      paste0(\" btn-\", status)\n    }\n  )\n  \n  value <- restoreInput(id = inputId, default = NULL)\n  \n  # custom right margin\n  if (!is.null(icon)) icon$attribs$class <- paste0(\n    icon$attribs$class, \" mr-1\"\n  )\n  \n  tags$button(\n    id = inputId, \n    style = if (!is.null(width)) paste0(\"width: \", validateCssUnit(width), \";\"), \n    type = \"button\", \n    class = btn_cl, \n    `data-val` = value, \n    list(icon, label), ...\n  )\n}\nui <- tabler_page(\n  tabler_body(\n    tabler_button(\n      \"btn\", \n      HTML(paste(\"Value\", textOutput(\"val\"), sep = \":\")), \n      icon = icon(\"thumbs-up\"), \n      width = \"25%\"\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  output$val <- renderText(input$btn)\n}\n\nshinyApp(ui, server)"},{"path":"custom-templates-inputs.html","id":"toggle-switch","chapter":"19 Develop custom input widgets","heading":"19.2 Toggle Switch","text":"implement toggle switch component.Notice tabler switch checkbox type, similar Shiny checkbox (switch checkbox different style)Therefore, able build top existing input binding. create tabler_switch function:Besides, may also create update_tabler_switch function similar updateCheckboxInput. also need dropNulls, function removes NULL elements list (function often used custom Shiny templates). remember, sendInputMessage R received receiveMessage method JavaScript side.following example, action button toggles switch input value clicked, shown Figure 19.2.\nFIGURE 19.2: Tabler action button updating toggle input\nEt voilà! Two inputs minutes.","code":"<label class=\"form-check form-switch\">\n  <input class=\"form-check-input\" type=\"checkbox\" checked>\n  <span class=\"form-check-label\">Option 1<\/span>\n<\/label>\ncheckboxInput(\"test\", \"Test\", TRUE)\ntabler_switch <- function(inputId, label, value = FALSE, width = NULL) {\n  \n  value <- restoreInput(id = inputId, default = value)\n  input_tag <- tags$input(\n    id = inputId, \n    type = \"checkbox\",\n    class = \"form-check-input\"\n  )\n  \n  if (!is.null(value) && value) {\n    input_tag <- input_tag %>% tagAppendAttributes(checked = \"checked\")\n  }\n  \n  input_wrapper <- tags$label(\n    class = \"form-check form-switch\", \n    style = if (!is.null(width)) {\n      paste0(\"width: \", validateCssUnit(width), \";\")\n    }\n  )\n  \n  input_wrapper %>% tagAppendChildren(\n    input_tag,\n    span(class = \"form-check-label\", label)\n  )\n}\ndropNulls <- function (x) {\n  x[!vapply(x, is.null, FUN.VALUE = logical(1))]\n}\n\nupdate_tabler_switch <- function (session, inputId, label = NULL, value = NULL) {\n  message <- dropNulls(list(label = label, value = value))\n  session$sendInputMessage(inputId, message)\n}\nui <- tabler_page(\n  tabler_body(\n    fluidRow(\n      tabler_button(\"update\", \"Go!\", width = \"25%\", class = \"mr-2\"),\n      tabler_switch(\"toggle\", \"Switch\", value = TRUE, width = \"25%\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$toggle))\n  observeEvent(input$update, {\n    update_tabler_switch(\n      session, \n      \"toggle\", \n      value = !input$toggle\n    )\n  })\n}\n\nshinyApp(ui, server)"},{"path":"custom-templates-inputs.html","id":"custom-templates-inputs-navbar","chapter":"19 Develop custom input widgets","heading":"19.3 Navbar menu input","text":"stated Chapter 11, quite straightforward bind elements pure inputs (HTML elements input tag) Shiny. reminder, created custom input binding detect state shinydashboard box (collapsed/uncollapsed).\nchapter 17, created tabler_navbar well tabler_navbar_menu tabler_navbar_menu_item. shinydashboard, nice capture currently selected tab able perform actions server side, updating selected tab based button click.start? First , add id attribute tabler_navbar_menu holds corresponding input$id. Whether use inputId id parameter name , keep mind inputId exist HTML.next step navbarMenuBinding creation. decide look navbar-nav class find method. , describe binding step step. may find whole working code end example.initialize method, ensure tab selected start, first tab selected default. Otherwise, select activated tab. use string interpolation ease insertion JS code strings (${menuId} .nav-link.active).role getValue return currently selected tab. reminder, tabler_navbar_menu_item function:function, active item element classes nav-link active. recover tab value stored data-value attribute. bit jQuery trick!setValue function allowing update active tab. Bootstrap 4 already \npredefined methods activate tabs. easiest way select tab name like $('#tabMenu [href=\"#tab1\"]').tab('show'). receiveMessage simply applying setValue method.Besides, create update_tabler_tab_item function.subscribe tell Shiny change current input value made available\nwhole app. may listen multiple events, keeping mind events occur following order:hide.bs.tab (current active tab)show.bs.tab (--shown tab)hidden.bs.tab (previous active tab, one hide.bs.tab event)shown.bs.tab (newly-active just-shown tab, one show.bs.tab event)Hence, makes sense listen shown.bs.tab (wait current tab shown).recap binding creation registration included:include custom input binding package? side package code, created following HTML dependency:also updated add_tabler_deps, .test new navbar_menu binding .!","code":"\ntabler_navbar_menu <- function(..., inputId = NULL) {\n  tags$ul(id = inputId, class = \"nav nav-pills navbar-nav\", ...)\n}find: function(scope) {\n  return $(scope).find('.navbar-nav');\n}initialize: function(el) {\n  let menuId = '#' + $(el).attr('id');\n  let activeTab = $(`${menuId} .nav-link.active`);\n  // if multiple items are found\n  if (activeTab.length > 0) {\n    let tabId = $(activeTab).attr('data-value');\n    $(activeTab).tab('show');\n    $(`#${tabId}`).addClass('show active');\n  } else {\n    $(`${menuId} .nav-link`)\n      .first()\n      .tab('show');\n  }\n}\ntabler_navbar_menu_item <- function(text, tabName, icon = NULL, selected = FALSE) {\n  \n  item_cl <- paste0(\"nav-link\", if(selected) \" active\")\n  \n  tags$li(\n    class = \"nav-item\",\n    a(\n      class = item_cl,\n      href = paste0(\"#\", tabName),\n      `data-toggle` = \"pill\", # see https://getbootstrap.com/docs/4.0/components/navs/\n      `data-value` = tabName,\n      role = \"tab\",\n      span(class = \"nav-link-icon d-md-none d-lg-inline-block\", icon),\n      span(class = \"nav-link-title\", text)\n    )\n  )\n}getValue: function(el) {\n  let activeTab = $(el).find('a').filter('nav-link active');\n  return $(activeTab).attr('data-value');\n}setValue: function(el, value) {\n  let hrefVal = '#' + value;\n  let menuId = $(el).attr('id');\n  $(`#${menuId} a[href=\"${hrefVal}\"]`).tab('show');\n}\n\nreceiveMessage: function(el, data) {\n  this.setValue(el, data);\n}\nupdate_tabler_tab_item <- function(inputId, value, session = getDefaultReactiveDomain()) {\n  session$sendInputMessage(inputId, message = value)\n}subscribe: function(el, callback) {\n  // important to use shown.bs.tab and not show.bs.tab!\n  $(el).on('shown.bs.tab.navbarMenuBinding', function(e) {\n    callback();\n  });\n},\n  \nunsubscribe: function(el) {\n  $(el).off('.navbarMenuBinding');\n}$(function() {\n  // Input binding\n  let navbarMenuBinding = new Shiny.InputBinding()\n  $.extend(navbarMenuBinding, {\n    find: function(scope) {\n      return $(scope).find('.navbar-nav');\n    },\n    initialize: function(el) {\n      let menuId = '#' + $(el).attr('id');\n      let activeTab = $(`${menuId} .nav-link.active`);\n      // if multiple items are found\n      if (activeTab.length > 0) {\n        let tabId = $(activeTab).attr('data-value');\n        $(activeTab).tab('show');\n        $(`#${tabId}`).addClass('show active');\n      } else {\n        $(`${menuId} .nav-link`)\n          .first()\n          .tab('show');\n      }\n    },\n    // Given the DOM element for the input, return the value\n    getValue: function(el) {\n      let activeTab = $(el).find('a').filter('.nav-link.active');\n      return $(activeTab).attr('data-value');\n    },\n    setValue: function(el, value) {\n      let hrefVal = '#' + value;\n      let menuId = $(el).attr('id');\n      $(`#${menuId} a[href=\"${hrefVal}\"]`).tab('show');\n    },\n    receiveMessage: function(el, data) {\n      this.setValue(el, data);\n    },\n    subscribe: function(el, callback) {\n      $(el).on('shown.bs.tab.navbarMenuBinding', function(event) {\n        callback();\n      });\n    },\n    unsubscribe: function(el) {\n      $(el).off('.navbarMenuBinding');\n    }\n  });\n  \n  Shiny.inputBindings.register(navbarMenuBinding, 'navbar-menu');\n});\ntabler_custom_js <- htmlDependency(\n  name = \"tabler-bindings\",\n  version = \"1.0.7\",\n  src = c(href = \"tabler\"),\n  package = \"OSUICode\",\n  script = \"input-bindings/navbarMenuBinding.js\"\n)\nadd_tabler_deps <- function(tag) {\n  # below, the order is of critical importance!\n  deps <- list(bs4_deps, tablers_deps, tabler_custom_js)\n  attachDependencies(tag, deps, append = TRUE)\n}\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = tabler_navbar_menu(\n      id = \"current_tab\",\n      tabler_navbar_menu_item(\n        text = \"Tab 1\",\n        icon = NULL,\n        tabName = \"tab1\",\n        selected = TRUE\n      ),\n      tabler_navbar_menu_item(\n        text = \"Tab 2\",\n        icon = NULL,\n        tabName = \"tab2\"\n      )\n    ),\n    tabler_button(\"update\", \"Change tab\", icon = icon(\"exchange-alt\"))\n  ),\n  tabler_body(\n    tabler_tab_items(\n      tabler_tab_item(\n        tabName = \"tab1\",\n        sliderInput(\n          \"obs\", \n          \"Number of observations:\",\n          min = 0,\n          max = 1000, \n          value = 500\n        ),\n        plotOutput(\"distPlot\")\n      ),\n      tabler_tab_item(\n        tabName = \"tab2\",\n        p(\"Second Tab\")\n      )\n    ),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\")\n    )\n  )\n)\nserver <- function(input, output, session) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n  \n  observeEvent(input$current_tab, {\n    showNotification(\n      paste(\"Hello\", input$current_tab), \n      type = \"message\",\n      duration = 1\n    )\n  })\n  \n  observeEvent(input$update, {\n    newTab <- if (input$current_tab == \"tab1\") \"tab2\" else \"tab1\"\n    update_tabler_tab_item(\"current_tab\", newTab)\n  })\n}\nshinyApp(ui, server)"},{"path":"custom-templates-inputs.html","id":"exercises-4","chapter":"19 Develop custom input widgets","heading":"19.4 Exercises","text":"look Tabler documentation buttons extend tabler_button function accordingly.Propose implementation Advanced selectboxes shown .Cards central elements templates. tabset panels. Improve tab_card function developed exercise 1 Chapter 17 one may easily recover currently selected tab. Hint: custom input binding required.","code":""},{"path":"custom-templates-interactivity.html","id":"custom-templates-interactivity","chapter":"20 Adding more interactivity","heading":"20 Adding more interactivity","text":"part, going add life template element. first see enhance existing static HTML component. explore complex feedback mechanisms provide interactivity app.JavaScript handlers described gathered HTML dependency, well custom input binding(s).","code":"\n# contains bindings and other JS code\ntabler_custom_js <- htmlDependency(\n  name = \"tabler-bindings\",\n  version = \"1.0.7\",\n  src = c(href = \"tabler\"),\n  package = \"OSUICode\",\n  script = c(\n    \"input-bindings/navbarMenuBinding.js\",\n    \"tabler_progress_handler.js\",\n    \"tabler_toast_handler.js\",\n    \"tabler_dropdown_handler.js\",\n    \"tabler_insert_tab_handler.js\"\n  )\n)"},{"path":"custom-templates-interactivity.html","id":"custom-progress-bars","chapter":"20 Adding more interactivity","heading":"20.1 Custom progress bars","text":"Progress bars good way display metric related progress, instance tracking number remaining tasks project. general, elements static HTML. Hence, interesting able update current value server side. Since proper input element, implementing input binding inappropriate decide proceed sendCustomMessage/addCustomMessageHandler pair. first create tabler_progress tag mainly composed :style gives current progress value. main elementmin max bounds, general 0 100id ensures progress bar uniqueness, thereby avoiding conflictsThe next element update_tabler_progress function sends 2 elements R JS:progress idThe new valueOn JS side, basic addCustomMessageHandler. mentioned Chapter 9, sendCustomMessage addCustomMessageHandler connected type parameter. crucial! Moreover, sent message R list, becomes JSON, meaning elements must accessed . JS:finally test components simple app, output depicted Figure 20.1:\nFIGURE 20.1: Progress bar component updated slider\nNOTE: handle custom messages shiny modules? Well, pretty straightforward: wrap id module namespace given session$ns() sending JS. may even default (without modules) like previous example since session$ns() \"\".way directly update progress client avoid exchange data R JS, thereby saving time?idea get rid classic session$sendCustomMessage Shiny.addCustomMessageHandler method. directly create function \ninsert script UI taking trigger target main parameters. function inserted multiple times multiple triggers update target. JS logic slightly different:wait shiny connected inputs/bindings readyWe recover trigger element JS/jQuery methodWe leverage noUiSlider API listen update range. ’s fine slider instance already initialized/defined shinyWidget input binding. work waiting shiny connected (may try)! Notice use .get() event listener, avoids repeat slider.noUiSliderWe modify width CSS property target like previous exampleQuestion: Run example external web browser, stop app RStudio. Try move sliders. happens progress bars? Compare classic update function. explain ?Overall way bit complex since sometimes need know API trigger listen correct events. Yet, assuming complex app data manipulation, tons inputs visualizations, everything can done client (web browser) less work R server part better end-user experience! Building outstanding shiny apps designing amazing user interfaces, ’s also optimization speed mentioned Colin Fay et al. book.","code":"\ntabler_progress <- function(id = NULL, value) {\n  div(\n    class = \"progress\",\n    div(\n      id = id, \n      class = \"progress-bar\",\n      style = paste0(\"width: \", value, \"%\"),\n      role = \"progressbar\",\n      `aria-valuenow` = as.character(value),\n      `aria-valuemin` = \"0\",\n      `aria-valuemax` = \"100\",\n      span(class = \"sr-only\", \"38% Complete\")\n    )\n  )\n}\n\nupdate_tabler_progress <- function(id, value, session = shiny::getDefaultReactiveDomain()) {\n  message <- list(id = session$ns(id), value = value)\n  session$sendCustomMessage(type = \"update-progress\", message)\n}$(function () {\n  Shiny.addCustomMessageHandler('update-progress', function(message) {\n    $('#' + message.id).css('width', message.value +'%');\n  });\n});\nui <- tabler_page(\n  tabler_body(\n    noUiSliderInput(\n      inputId = \"progress_value\",\n      label = \"Progress value\",\n      min = 0, \n      max = 100,\n      value = 20\n    ),\n    tabler_progress(id = \"progress1\", 12)\n  )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$progress_value, {\n    update_tabler_progress(\n      id = \"progress1\", \n      input$progress_value\n    )\n  })\n}\nshinyApp(ui, server)$(document).on('shiny:connected', function(event) {\n  var slider = document.getElementById('triggerId');\n  slider.noUiSlider.on('update', function(event) {\n    $('#targetId').css('width', this.get() + '%');\n  });\n});\nupdate_tabler_progress2 <- function(trigger, target) {\n  tags$head(\n    tags$script(\n      paste0(\n        \"$(document).on('shiny:connected', function(event) {\n            var slider = document.getElementById('\", trigger, \"');\n            slider.noUiSlider.on('update', function(event) {\n              $('#\", target, \"').css('width', this.get() + '%');\n            });\n          });\n        \"\n      )\n    )\n  )\n}\n\nui <- tabler_page(\n  update_tabler_progress2(\"progress_value\", \"progress1\"),\n  update_tabler_progress2(\"progress_value2\", \"progress2\"),\n  tabler_body(\n    fluidRow(\n      noUiSliderInput(\n        inputId = \"progress_value\",\n        label = \"Progress value 1\",\n        min = 0, \n        max = 100,\n        value = 20\n      ),\n      noUiSliderInput(\n        inputId = \"progress_value2\",\n        label = \"Progress value 2\",\n        min = 0, \n        max = 100,\n        value = 80,\n        color = \"red\"\n      )\n    ),\n    tabler_progress(id = \"progress1\", 12),\n    br(), br(),\n    tabler_progress(id = \"progress2\", 100)\n  )\n)\n\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"custom-templates-interactivity.html","id":"user-feedback-toasts","chapter":"20 Adding more interactivity","heading":"20.2 User feedback: toasts","text":"Toasts components send discrete user feedback, contrary modals open middle page. Toasts may open sides window similar Shiny notifications (see ). tabler toast component built top Bootstrap 4. Therefore, rely documentation.","code":""},{"path":"custom-templates-interactivity.html","id":"toast-skeleton","chapter":"20 Adding more interactivity","heading":"20.2.1 Toast skeleton","text":"skeleton HTML structure toast:Toasts mainly composed header body. might close button case toast hide . multiple toasts appear one others, stacked, latest bottom stack. position controled style attribute like style=\"position: absolute; top: 0; right: 0;\" top-right placement. Accessibility parameters like aria-live detailed .","code":"<div class=\"toast show\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" data-autohide=\"false\" data-toggle=\"toast\">\n  <div class=\"toast-header\">\n    <span class=\"avatar mr-2\" style=\"background-image: url(...)\"><\/span>\n    <strong class=\"mr-auto\">Mallory Hulme<\/strong>\n    <small>11 mins ago<\/small>\n    <button type=\"button\" class=\"ml-2 close\" data-dismiss=\"toast\" aria-label=\"Close\">\n      <span aria-hidden=\"true\">&times;<\/span>\n    <\/button>\n  <\/div>\n  <div class=\"toast-body\">\n    Hello, world! This is a toast message.\n  <\/div>\n<\/div>"},{"path":"custom-templates-interactivity.html","id":"the-toast-api","chapter":"20 Adding more interactivity","heading":"20.2.2 The toast API","text":"Toasts JS API control behaviour, instance $('<toast_selector>').toast(option), option JSON following fields:animation applies CSS fade transition toast TRUE defaultautohide automatically hides toast (TRUE default)delay delay hide toast (500 ms)3 methods: hide, show dispose (dispose ensures toast appear anymore). Finally, may fine tune toast behavior 4 events: show.bs.toast, shown.bs.toast, hide.bs.toast, hide.bs.toast, hidden.bs.toast (like tabs).","code":""},{"path":"custom-templates-interactivity.html","id":"r-implementation","chapter":"20 Adding more interactivity","heading":"20.2.3 R implementation","text":"first create toast skeleton. assume toast hide automatically, may remove delete button well data-autohide=\"false attribute. parameters optional except toast id, required toggle toast:create show_tabler_toast function. Since toast automatically hides, make sense create hide function, well dispose.corresponding JS handler given :first configure toast show . Notice chained jQuery methods (see Chapter 9)! optionally add event listener capture hidden.bs.toast event, may trigger action toast closed. input$id used purpose combination Shiny.setInputValue. Notice extra parameter {priority: 'event'}: basically, toast closed, input$id always TRUE, thereby breaking reactivity. Adding extra parameter forces evaluation input, although constant time.","code":"\ntabler_toast <- function(id, title = NULL, subtitle = NULL, ..., img = NULL) {\n  \n  toast_header <- div(\n    class = \"toast-header\",\n    if (!is.null(img)) {\n      span(\n        class = \"avatar mr-2\", \n        style = sprintf(\"background-image: url(%s)\", img)\n      )\n    },\n    if (!is.null(title)) strong(class = \"mr-2\", title),\n    if (!is.null(subtitle)) tags$small(subtitle)\n  )\n  \n  toast_body <- div(class = \"toast-body\", ...)\n  \n  toast_wrapper <- div(\n    id = id,\n    class = \"toast\",\n    role = \"alert\",\n    style = \"position: absolute; top: 0; right: 0;\",\n    `aria-live` = \"assertive\",\n    `aria-atomic` = \"true\",\n    `data-toggle` = \"toast\"\n  )\n  \n  toast_wrapper %>% tagAppendChildren(toast_header, toast_body)\n}\nshow_tabler_toast <- function(id, options = NULL, session = getDefaultReactiveDomain()) {\n  message <- dropNulls(\n    list(\n      id = id,\n      options = options\n    )\n  )\n  session$sendCustomMessage(type = \"tabler-toast\", message)\n}$(function() {\n  Shiny.addCustomMessageHandler('tabler-toast', function(message) {\n    $(`#${message.id}`)\n      .toast(message.options)\n      .toast('show');\n\n    // add custom Shiny input to listen to the toast state\n    $(`#${message.id}`).on('hidden.bs.toast', function() {\n      Shiny.setInputValue(message.id, true, {priority: 'event'});\n    });\n  });\n});"},{"path":"custom-templates-interactivity.html","id":"wrap-up","chapter":"20 Adding more interactivity","heading":"20.2.4 Wrap up","text":"\nFIGURE 20.2: Tabler toast element\n","code":"\nui <- tabler_page(\n  tabler_toast(\n    id = \"toast\", \n    title = \"Hello\", \n    subtitle = \"now\", \n    \"Toast body\",\n    img = \"https://preview-dev.tabler.io/static/logo.svg\"\n  ),\n  tabler_button(\"launch\", \"Go!\", width = \"25%\")\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$toast))\n  observeEvent(input$launch, {\n    removeNotification(\"notif\")\n    show_tabler_toast(\n      \"toast\", \n      options = list(\n        animation = FALSE,\n        delay = 3000\n      )\n    )\n  })\n  \n  observeEvent(input$toast, {\n    showNotification(\n      id = \"notif\",\n      \"Toast was closed\", \n      type = \"warning\",\n      duration = 1,\n      \n    )\n  })\n}\n\nshinyApp(ui, server)"},{"path":"custom-templates-interactivity.html","id":"transform-an-element-in-a-custom-action-button","chapter":"20 Adding more interactivity","heading":"20.3 Transform an element in a custom action button","text":"seen Chapter 19, <button>, <> element holding action-button class may eventually become action button. Tabler template dropdown menus navbar like transform dropdown items action buttons. tabler_dropdown functions takes following parameters:id required show_tabler_dropdown (see ) function opens menutitle dropdown menu namesubtitle optional textimg optional image… hosts tabler_dropdown_item (see )convert dropdown item action button , add action-button class well id parameter recover corresponding input id.finally create show_tabler_dropdown well corresponding Shiny message handler.show dropdown, use dropdown method linked data-toggle=\"dropdown\" tabler_dropdown.Let’s play ! (See Figure 20.3)\nFIGURE 20.3: Tabler dropdown element\n","code":"\ntabler_dropdown <- function(..., id = NULL, title, subtitle = NULL, img = NULL) {\n  \n  img_tag <- if (!is.null(img)) {\n    span(\n      class = \"avatar\", \n      style = sprintf(\"background-image: url(%s)\", img)\n    )\n  }\n  \n  titles_tag <- div(\n    class = \"d-none d-xl-block pl-2\",\n    div(title),\n    if (!is.null(subtitle)) {\n      div(class = \"mt-1 small text-muted\", subtitle)\n    }\n  )\n  \n  link_tag <- a(\n    href = \"#\",\n    id = id, \n    class = \"nav-link d-flex lh-1 text-reset p-0\",\n    `data-toggle` = \"dropdown\",\n    `aria-expanded` = \"false\"\n  ) %>% \n    tagAppendChildren(img_tag, titles_tag)\n  \n  dropdown_tag <- div(\n    class = \"dropdown-menu dropdown-menu-right\", \n    `aria-labelledby` = id, \n    ...\n  )\n  \n  div(class = \"nav-item dropdown\") %>% tagAppendChildren(\n    link_tag,\n    dropdown_tag\n  )\n}\ntabler_dropdown_item <- function(..., id = NULL) {\n  a(id = id, class = \"dropdown-item action-button\", href = \"#\", ...)\n}\nshow_tabler_dropdown <- function(id, session = getDefaultReactiveDomain()) {\n  session$sendCustomMessage(type = \"show-dropdown\", message = id)\n}$(function() {\n  Shiny.addCustomMessageHandler('show-dropdown', function(message) {\n    $(`#${message}`).dropdown('show');\n  });\n});\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = NULL, \n    tabler_dropdown(\n      id = \"mydropdown\",\n      title = \"Dropdown\",\n      subtitle = \"click me\",\n      tabler_dropdown_item(\n        id = \"item1\",\n        \"Show Notification\"\n      ),\n      tabler_dropdown_item(\n        \"Do nothing\"\n      )\n    )\n  ),\n  tabler_body(\n    tabler_button(\"show\", \"Open dropdown\", width = \"25%\"),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\")\n    )\n  )\n)\nserver <- function(input, output, session) {\n  \n  observeEvent(input$show, {\n    show_tabler_dropdown(\"mydropdown\")\n  })\n  \n  observeEvent(input$item1, {\n    showNotification(\n      \"Success\", \n      type = \"message\",\n      duration = 2,\n      \n    )\n  })\n}\nshinyApp(ui, server)"},{"path":"custom-templates-interactivity.html","id":"tab-events","chapter":"20 Adding more interactivity","heading":"20.4 Tab events","text":"remember navbar element tabsetpanel system Chapter 17? Navs allow organize app several tabs, acting like pages. powerful tool Shiny since currently straightforward create multi-pages Shiny apps like anyone website. Navs relie Bootstrap4 API used JS functions.","code":""},{"path":"custom-templates-interactivity.html","id":"insert-tabs","chapter":"20 Adding more interactivity","heading":"20.4.1 Insert/Remove tabs in tabsetpanel","text":"dynamically inserting/removing tabs tabler_navbar? chose example since involves extra technical details Shiny.proceed? remember tabler_navbar_menu_item tabler_tab_item coupling, inserting tab implies insert trigger navigation menu well content dashboard body. Therefore, need know structure insert. reminder:tabler_navbar_menu_item <li> elementstabler_navbar_menu_item <div> element specific classesWe design insert_tabler_tab function similar Shiny insertTab.\nhandle shiny modules, wrap inputId session namespace session$ns. create menu item element based provided new tab.JS side, capture R message (list) two elements:$divTag contains tab content$liTag contains tab link, ie navigation partDepending position parameter, use insertAfter insertBefore jQuery methods. Finally, newly inserted tab \nselected, activate corresponding tab element $(tablink).tab('show').tab well inserted, notice slider plot properly shown, illustrated Figure 20.4.\nFIGURE 20.4: newly inserted tab fails render content!\nexplain ? dependency issue: slider input relies specific JS library, namely ionRangesSlider, depicted Figure 20.5. previous example, open HTML inspector, dependency included page.\nFIGURE 20.5: Slider dependencies.\nEven stranger, use renderUI conditionally render slider (note: dummy example), dependency included go button pressed. Shiny includes ?Let’s look renderUI:last line returned processDeps(result, shinysession). function responsible handle dependencies runtime. processDeps (R side) works Shiny.renderContent (JS side),\nalready mentioned part 14.3. latter takes tag element well \nobject containing HTML code dependencies, instance:following, modify insert_tabler_tab include dependencies processing step.apply Shiny.renderContent method tab content navigation item.check approach works expected.\nFIGURE 20.6: processDeps Shiny.renderContent action.\nEt voila! shown Figure 20.6, everything properly displayed.","code":"<li class=\"nav-item\">\n  <a class=\"nav-link\" href=\"#ww\" data-toggle=\"pill\" data-value=\"ww\" role=\"tab\">\n    <span class=\"nav-link-icon d-md-none d-lg-inline-block\"><\/span>\n    <span class=\"nav-link-title\">ww<\/span>\n  <\/a>\n<\/li>\n\n<div role=\"tabpanel\" class=\"tab-pane fade container-fluid\" id=\"ww\"><\/div>\ninsert_tabler_tab <- function(inputId, tab, target, position = c(\"before\", \"after\"),\n                              select = FALSE, session = getDefaultReactiveDomain()) {\n  \n  inputId <- session$ns(inputId)\n  position <- match.arg(position)\n  navbar_menu_item <- tags$li(\n    class = \"nav-item\",\n    a(\n      class = \"nav-link\",\n      href = paste0(\"#\", session$ns(tab$attribs$id)),\n      `data-toggle` = \"pill\",\n      `data-value` = tab$attribs$id,\n      role = \"tab\",\n      tab$attribs$id\n    )\n  )\n  \n  tab <- force(as.character(tab))\n  navbar_menu_item <- force(as.character(navbar_menu_item))\n  \n  message <- dropNulls(\n    list(\n      inputId = inputId,\n      content = tab,\n      link = navbar_menu_item,\n      target = target,\n      position = position,\n      select = select\n    )\n  )\n  session$sendCustomMessage(type = \"insert-tab\", message)\n}$(function() {\n  Shiny.addCustomMessageHandler('insert-tab', function(message) {\n    // define div and li targets\n    let $divTag = $(message.content);\n    let $liTag = $(message.link);\n    \n    if (message.position === 'after') {\n      $divTag.insertAfter($('#' + message.target));\n      $liTag.insertAfter($('[href =\"#' + message.target + '\"]').parent());\n    } else if (message.position === 'before') {\n      $divTag.insertBefore($('#' + message.target));\n      $liTag.insertBefore($('[href =\"#' + message.target + '\"]').parent());\n    }\n    \n    if (message.select) {\n      // trigger a click on corresponding the new tab button. \n      let newTabId = $divTag.attr('id');\n      $('#' + message.inputId + ' a[href=\"#' + newTabId +'\"]').tab('show');\n    }\n  });\n});\ninsert_tabler_tab_example(1)\nui <- fluidPage(\n  shiny::actionButton(\"go\", \"Go!\", class = \"btn-success\"),\n  uiOutput(\"slider\"),\n  plotOutput(\"distPlot\")\n)\n\n# Server logic\nserver <- function(input, output) {\n  \n  output$slider <- renderUI({\n    req(input$go > 0)\n    sliderInput(\n      \"obs\", \n      \"Number of observations:\",\n      min = 0, \n      max = 1000, \n      value = 500\n    )\n  })\n  \n  output$distPlot <- renderPlot({\n    req(input$obs)\n    hist(rnorm(input$obs))\n  })\n}\n\n# Complete app with UI and server components\nshinyApp(ui, server)\nrenderUI <- function (expr, env = parent.frame(), quoted = FALSE, outputArgs = list()) {\n  installExprFunction(expr, \"func\", env, quoted)\n  createRenderFunction(func, function(result, shinysession, \n                                      name, ...) {\n    if (is.null(result) || length(result) == 0) \n      return(NULL)\n    #processDeps(result, shinysession)\n    result\n  }, uiOutput, outputArgs)\n}exports.renderContent($tag[0], {\n  html: $tag.html(),\n  deps: message.tag.deps\n}); \ninsert_tabler_tab <- function(inputId, tab, target, position = c(\"before\", \"after\"),\n                              select = FALSE, session = getDefaultReactiveDomain()) {\n  \n  inputId <- session$ns(inputId)\n  position <- match.arg(position)\n  navbar_menu_item <- tags$li(\n    class = \"nav-item\",\n    a(\n      class = \"nav-link\",\n      href = paste0(\"#\", session$ns(tab$attribs$id)),\n      `data-toggle` = \"pill\",\n      `data-value` = tab$attribs$id,\n      role = \"tab\",\n      tab$attribs$id\n    )\n  )\n  \n  message <- dropNulls(\n    list(\n      inputId = inputId,\n      content = processDeps(tab, session),\n      link = processDeps(navbar_menu_item, session),\n      target = target,\n      position = position,\n      select = select\n    )\n  )\n  session$sendCustomMessage(type = \"insert-tab\", message)\n}$(function() {\n  Shiny.addCustomMessageHandler('insert-tab', function(message) {\n    // define div and li targets\n    let $divTag = $(message.content.html);\n    let $liTag = $(message.link.html);\n    \n    if (message.position === 'after') {\n      $divTag.insertAfter($('#' + message.target));\n      $liTag.insertAfter($('[href =\"#' + message.target +   '\"]').parent());\n    } else if (message.position === 'before') {\n      $divTag.insertBefore($('#' + message.target));\n      $liTag.insertBefore($('[href =\"#' + message.target +   '\"]').parent());\n    }\n    \n    // needed to render input/output in newly added tab. It takes the possible\n    // deps and add them to the tag. Indeed, if we insert a tab, its deps are not\n    // included in the page so it can't render properly\n    Shiny.renderContent($liTag[0], {html: $liTag.html(), deps: message.link.deps});\n    Shiny.renderContent($divTag[0], {html: $divTag.html(), deps: message.content.deps});\n    \n    if (message.select) {\n      // trigger a click on corresponding the new tab button. \n      let newTabId = $divTag.attr('id');\n      $('#' + message.inputId + ' a[href=\"#' + newTabId   +'\"]').tab('show');\n    }\n  });\n});\ninsert_tabler_tab_example(2)"},{"path":"custom-templates-interactivity.html","id":"exercises-5","chapter":"20 Adding more interactivity","heading":"20.5 Exercises","text":"Taking inspiration insert_tabler_tab function, write remove_tabler_tab function.Based Tabler documentation, add tabler_tooltip function. Hint: may also check corresponding Bootstrap 4 help.","code":""},{"path":"workflow-charpente.html","id":"workflow-charpente","chapter":"21 Introduction to {charpente}","heading":"21 Introduction to {charpente}","text":"\nFIGURE 21.1: {charpente} package\n","code":""},{"path":"workflow-charpente.html","id":"motivations-1","chapter":"21 Introduction to {charpente}","heading":"21.1 Motivations","text":"Translating HTML template R API requires creation package. stated Chapter 0.2, good practice proceed follows:Imagine repeat process twenty components. package structure provides many advantages like:Develop comprehensive documentation underlying APIDesign unit tests guaranty code robustness improve long term planRelevant file organization","code":"\nui <- fluidPage(\n  useShinydashboard(),\n  tags$script(\n    [1172 chars quoted with '\"']\n  ),\n  \n  box2(\n    title = textOutput(\"box_state\"),\n    \"Box body\",\n    inputId = \"mybox\",\n    collapsible = TRUE,\n    plotOutput(\"plot\")\n  ),\n  actionButton(\"toggle_box\", \"Toggle Box\")\n)\n\nserver <- function(input, output, session) {\n  output$plot <- renderPlot({\n      req(!input$mybox$collapsed)\n      plot(rnorm(200))\n    })\n    \n    output$box_state <- renderText({\n      state <- if (input$mybox$collapsed) \"collapsed\" else \"uncollapsed\"\n      paste(\"My box is\", state)\n    })\n    \n    observeEvent(input$toggle_box, {\n      updateBox2(\"mybox\")\n    })\n}\n\nshinyApp(ui, server)"},{"path":"workflow-charpente.html","id":"general-idea","chapter":"21 Introduction to {charpente}","heading":"21.2 General idea","text":"{charpente} game changer custom template creation.\nyet CRAN widely used help developing RinteRface packages.\ncharpente, drastically:Eases import external dependencies.Speeds HTML R conversion, quite frankly rather boring process,\nallowing focus features rather syntax. feature builds top \n{html2R} shiny app Alan Dipert, already mentioned Chapter 3.Let’s try html_2_R:html_2_R prefix parameter adds tags$ prefix TRUE. \nTRUE default prevents errors unexported Shiny tags like nav.second main benefice charpente dependency management system.","code":"\nlibrary(charpente)\nhtml_2_R('<div class=\"divclass\" id = \"someid\"><\/div>')## ## ── Converting code ... ──## ## ✓ Code converted with success.## ℹ Copy and paste the following R code## ────────────────────────────────────────────────────────────────────────────────## tags$div(\n##   class = \"divclass\",\n##   id = \"someid\"\n## )"},{"path":"workflow-charpente.html","id":"a-case-study-shinybulma","chapter":"21 Introduction to {charpente}","heading":"21.3 A case study: {shinybulma}","text":"following, ’ll illustrate charpente’s workflow, R Pharma workshop exercises focused shinybulma.bulma popular open source CSS framework web.\nImportantly, isn’t JavaScript helper bulma core.\n’ll see later recent bulma JS provides feature.\nnow, focus HTML CSS.initialize charpente package, :sets minimal viable package git optionally github remote setup,\nFigure 21.2.\nFIGURE 21.2: Package structure {charpente}\ndefault, package DESCRIPTION Imports field shiny, htmltools \nutils. charpente never required dependency package since might\ninvasive../R folder, charpente creates mypkg-utils.R script containing:Tools facilitate HTML dependency management like add_dependencies (see corresponding section ),\nprocessDeps.validation functions mentioned Chapter 18.","code":"\npath <- file.path(tempdir(), \"mypkg\")\ncreate_charpente(path, license = \"mit\")"},{"path":"workflow-charpente.html","id":"build-the-html-dependency","chapter":"21 Introduction to {charpente}","heading":"21.3.1 Build the HTML dependency","text":"interested reader look Getting started guide,\nknow get bulma. install bulma dependencies, several ways:CDN method (content delivery network) consists getting dependencies dedicated server.\nFiles stored locally may problem one internet.local method consists downloading production files (minified CSS).Using npm installs bulma sources well production files. means one can modify\nsources anytime, recommended since hard \nmaintain.case, show two first methods, third scope book.shown previous Chapter (custom-templates-dependencies),\nbuild bulma dependency follows:already takes much time. charpente comes play.\nSpecifically, create_dependency function automatically download/points specified dependency just providing name. means know looking . Best practice look jsdelivr website (charpente built top jsdelivr) find good repository, shown Figure 21.3. create_dependency also creates add_<DEP_NAME>_deps function <DEP_NAME>--dependencies.R script opens .charpente_options(local = FALSE) allows fine tune behavior. local FALSE,\ncharpente points CDN without downloading file. substantially faster \nlocal option requires internet connection. Package developers prefer \nlocal = TRUE ensure dependencies always accessible.\nExtra parameters like tag control downloaded version since HTML templates\nmay several flavors. always good able test multiple versions select\nbest option.\nFIGURE 21.3: jsdelivr result bulma\nsatisfied, simply run code get latest version, specific\nversion tag used:Moreover, create_dependency able filter files, charpente_options:minified targets files .min, TRUE.bundle targets files containing .bundle, TRUE.lite targets files lite keyword, TRUE.rtl target files .rtl, TRUE. rtl design stands right left\ncommon countries instance.may imagine charpente_options targets .min files default. don’t find\nscript, probably change options. instance, templates\nlike Bootstrap Framework7 bundle.min files (charpente_options(bunlde = TRUE)), whereas bulma doesn’t.can test new dependency:works like charm. chose local option, also get inst/bulma-<BULMA-VERSION> folder\nrelevant files sorted type. bulma-dependencies.R script contains \nnewly created add_bulma_deps function, either pointing CDN local\nfiles, depending chosen strategy:charpente sets roxygen skeleton don’t worry function\nimports.","code":"\nlibrary(htmltools)\nbulma_deps <- htmlDependency(\n  name = ...,\n  version = ...,\n  src = c(href = ...),\n  stylesheet = ...\n)\n\nadd_bulma_deps <- function(tag) {\n  tagList(..., ...)\n}\n# CDN method \ncreate_dependency(\"bulma\", options = charpente_options(local = FALSE))\ncreate_dependency(\"bulma\", tag = \"0.7.0\", options = charpente_options(local = FALSE))\n\n# local method (default)\ncreate_dependency(\"bulma\")\ndevtools::load_all()\nfindDependencies(add_bulma_deps(div()))\n# local dependency script output\n\n#' bulma dependencies utils\n#'\n#' @description This function attaches bulma. dependencies to the given tag\n#'\n#' @param tag Element to attach the dependencies.\n#'\n#' @importFrom htmltools tagList htmlDependency\n#' @export\nadd_bulma_deps <- function(tag) {\n bulma_deps <- htmlDependency(\n  name = \"bulma\",\n  version = \"0.9.1\",\n  src = c(file = \"bulma-0.9.1\"),\n  stylesheet = \"css/bulma.min.css\",\n  package = \"mypkg\",\n )\n tagList(tag, bulma_deps)\n}\n\n# CDN dependencies\n\n#' bulma dependencies utils\n#'\n#' @description This function attaches bulma. dependencies to the given tag\n#'\n#' @param tag Element to attach the dependencies.\n#'\n#' @importFrom htmltools tagList htmlDependency\n#' @export\nadd_bulma_deps <- function(tag) {\n bulma_deps <- htmlDependency(\n  name = \"bulma\",\n  version = \"0.9.1\",\n  src = c(href = \"https://cdn.jsdelivr.net/npm/bulma@0.9.1/\"),\n  stylesheet = \"css/bulma.min.css\"\n )\n tagList(tag, bulma_deps)\n}"},{"path":"workflow-charpente.html","id":"set-up-the-minimal-page-template","chapter":"21 Introduction to {charpente}","heading":"21.3.2 Set up the minimal page template","text":"According bulma documentation, starter page template :Adding charpente magic html_2_R, set path parameter /html get entire template. , replace ... appropriate content (see ). Since copied HTML contains double quotations marks like <p class=\"subtitle\"><\/p>, put string single quotation marks.Note: run time, shiny adds html around UI, thereby making necessary include.\nalso don’t need link(rel = \"stylesheet\", href = \"https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css\")\nsince add_bulma_deps already attach dependencies page. prefix parameter\nset TRUE default don’t worry whether tags functions exported\nshiny (see Chapter 3).bulma_page function defined , save R package folder:practice, going step one bulma page templates literally takes three minutes,\ntaken 30 minutes hand. time, may replace\ndependency another version. careful, since charpente make snapshots\nold versions.","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Hello Bulma!<\/title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css\">\n  <\/head>\n  <body>\n    <section class=\"section\">\n      <div class=\"container\">\n        <h1 class=\"title\">\n          Hello World\n        <\/h1>\n        <p class=\"subtitle\">\n          My first website with <strong>Bulma<\/strong>!\n        <\/p>\n      <\/div>\n    <\/section>\n  <\/body>\n<\/html>\nhtml_2_R(\n  '<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Hello Bulma!<\/title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css\">\n  <\/head>\n  <body>\n    <section class=\"section\">\n      <div class=\"container\">\n        <h1 class=\"title\">\n          Hello World\n        <\/h1>\n        <p class=\"subtitle\">\n          My first website with <strong>Bulma<\/strong>!\n        <\/p>\n      <\/div>\n    <\/section>\n  <\/body>\n<\/html>\n  ',\n  path = \"/html\"\n)## ## ── Converting code ... ──## ## ✓ Code converted with success.## ℹ Copy and paste the following R code## ────────────────────────────────────────────────────────────────────────────────## tags$html(\n##   tags$head(\n##     tags$meta(charset = \"utf-8\"),\n##     tags$meta(\n##       name = \"viewport\",\n##       content = \"width=device-width, initial-scale=1\"\n##     ),\n##     tags$title(\"Hello Bulma!\"),\n##     tags$link(\n##       rel = \"stylesheet\",\n##       href = \"https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css\"\n##     )\n##   ),\n##   tags$body(tags$section(\n##     class = \"section\",\n##     tags$div(\n##       class = \"container\",\n##       tags$h1(\n##         class = \"title\",\n##         \"Hello World\"\n##       ),\n##       tags$p(\n##         class = \"subtitle\",\n##         \"My first website with\",\n##         tags$strong(\"Bulma\"),\n##         \"!\"\n##       )\n##     )\n##   ))\n## )\nbulma_page <- function(..., title = NULL) {\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1\"\n      ),\n      tags$title(title)\n    ),\n    add_bulma_deps(tags$body(...)) \n  )\n}"},{"path":"workflow-charpente.html","id":"exercise-add-bulmajs","chapter":"21 Introduction to {charpente}","heading":"21.3.3 Exercise: add bulmaJS","text":"stated , bulma contains CSS things! means need\neither develop custom JS code add interactivity rely third party existing API.\nbulma JS one !Using charpente, create bulma js dependency. point vizuaalog/bulmajs since bulmajs already exist want. Run following code R console.Notice many files added dependency. , work notifications:keep notification.js remove unnecessary filesOnly keep bulma.js gather plugins 1 script.best practice usually keep need since scripts may heavy load!Run devtools::load_all(). Modify code test newly created dependency. Hint: toggle HTML inspector check appropriate dependencies !","code":"\ncreate_dependency(...)\nui <- bulma_page()\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"workflow-charpente.html","id":"add-custom-js","chapter":"21 Introduction to {charpente}","heading":"21.3.4 Add custom JS","text":"Notifications always useful send user feedback. Shiny notification system shiny::showNotification. Like Shiny, Bulma notifications entirely built JS (need HTML code).API works follows:Bulma(target).notification(config) creates notification based JSON option list (config).\ntarget expects jQuery selector.show toggles newly instantiated notificationIn words code attaches notification body:following design R interface JavaScript handler (event listener).\ncharpente function creates pieces, namely create_custom_handler:obtain notification-handler.R script:corresponding JavaScript piece notification.js,\nderived golem add_js_handler function:default, JS file created srcjs directory. special directory\nstore JavaScript files depend package author. instance,\nbulmaJS external dependency unlikely edited package author. reason,\nremains inst folder like external dependencies.","code":"Bulma('body').notification({\n  body: 'Example notification',\n  color: 'info'\n}).show();\ncreate_custom_handler(\"notification\")\nsend_notification_message <- function(id = NULL, options = NULL, session = shiny::getDefaultReactiveDomain()) {\n message <- list(\n  # your logic\n )\n \n session$sendCustomMessage(type = \"notification\", message)\n}$(function() {\n  Shiny.addCustomMessageHandler('notification', function(message) {\n \n  });\n});"},{"path":"workflow-charpente.html","id":"add-custom-inputoutput-bindings","chapter":"21 Introduction to {charpente}","heading":"21.3.5 Add custom input/output bindings","text":"part 11.2, created better shinydashboard boxes one\nmay programmatically collapse, close restore. know, way \nsetup input binding skeleton one copy paste time \ncode. charpente create_input_binding create_output_binding (functions \ncan also find development version golem). Contrary custom handler case,\ncreate_input_binding generate JavaScript piece since R part highly variable \none input another. get plug play box input binding call:gives input-boxBinding.js script srcjs folder:function multiple options:initialized FALSE default. TRUE, adds initialized method\nbinding.dev adds console.log elements whenever relevant help debugging\nprocess.event list containing events related binding. default, generates\nclick event without rate policy. add extra events \nlist(name = c(\"click\", \"whatever\"), rate_policy = c(FALSE, TRUE)).Similarly, create_output_binding function creates ready use output binding JS script,\nsrcjs folder (create_output_binding(\"menuOutput\")):","code":"\ncreate_input_binding(\"boxBinding\")var boxBinding = new Shiny.InputBinding();\n$.extend(boxBinding, {\n  find: function(scope) {\n    // JS logic $(scope).find('whatever')\n  },\n  getValue: function(el) {\n    // JS code to get value\n  },\n  setValue: function(el, value) {\n    // JS code to set value\n  },\n  receiveMessage: function(el, data) {\n    // this.setValue(el, data);\n  },\n  subscribe: function(el, callback) {\n    $(el).on('click.boxBinding', function(e) {\n      callback();\n    });\n\n  },\n  unsubscribe: function(el) {\n    $(el).off('.boxBinding');\n  }\n});\nShiny.inputBindings.register(boxBinding, 'shiny.whatever');var menuOutput = new Shiny.OutputBinding();\n$.extend(menuOutput, {\n  find: function(scope) {\n    // JS logic $(scope).find('whatever')\n  },\n  renderValue: function(el, data) {\n    // JS logic\n  }\n});\nShiny.outputBindings.register(menuOutput, 'shiny.whatever');"},{"path":"workflow-charpente.html","id":"organize-your-js-code","chapter":"21 Introduction to {charpente}","heading":"21.3.6 Organize your JS code","text":"naturally leads us part JS code organization. Shiny developers\nmay lot custom scripts, generally bad idea put \ninst. Instead, put srcjs, concatenate minify create one big\nfile.min.js inst folder. better performance since file size matter JS.dreamRs team developed tool seamlessly format, organize, validate CSS JS code, \n{jstools}. Interestingly, 2 addins allowing quickly\nformat validate given JS file.going create second custom handler charpente reorganize\nwhole JS code:Now two JS scripts srcjs folder. , use compressor, namely\nterser, optimizes compresses code web browser, price less\nhuman readable. also provides source maps crucial debugging process,\nthereby making possible reconstruct original JS code starting minified script:terser_file takes raw JS files input, generate minified/optimized script well\nsource maps available mypkg.min.js.map. root parameter indicates location\nserver shiny app running.highlight source maps role, let’s run app:open developer tools navigate Sources panel, illustrated \nFigure 21.4. script mypkg.min.js human readable generated source map\nallows reconstruct original code, location mypkg-build folder. \n, can access mapped script start debugging process like setting break points.\nFIGURE 21.4: Source maps ease debugging process\ngood new charpente can automate task:default build_js generates production ready JS files:Parses, compresses, mangles JS files concatenate 1 big minified file called\nmypkg.min.js.Creates associated source maps (default). don’t want expose code,\npass source_maps = FALSE.options possible. One can definitely decide mangle files (easier debugging),\ncase pass mangle = FALSE. list available options .mode dev, files simply aggregated beautified.Additionally, creates mypkg-dependencies.R file containing HTML\ndependency pointing newly generated JS file:Switching prod dev automatically updates mypkg-dependencies.R file.Note: terser concatenates file alphabetical order (default), often issue since\nfunctions may called script .js defined b.js. practice, \ndon’t name files , b rather init.js, component.js.\nfiles parameters allow pass customized order. See section example\n23.6.2.Disclaimer: yet similar process CSS. still work progress.tools exist like {packer} John Coene,\nleverages webpack handle JS code.","code":"\nremotes::install_github(\"dreamRs/jstools\")\ncreate_custom_handler(\"modal\")\nlibrary(jstools)\nmypkgJS <- list.files(\n  path = \"srcjs\",\n  recursive = TRUE,\n  full.names = TRUE\n)\n\n# /inst is already created by create_charpente\noutputDir <- \"inst/mypkg-0.0.0.9000\"\ndir.create(outputDir)\n\n# Concat + Compress + source maps ----------------------------------------------------------------\n\nterser_file(\n  input = mypkgJS,\n  output = sprintf(\"%s/mypkg.min.js\", outputDir),\n  options = terser_options(\n    sourceMap = list(\n      root = \"../../mypkg-build\",\n      filename = \"mypkg.min.js\",\n      url = \"mypkg.min.js.map\",\n      includeSources = TRUE\n    )\n  )\n)\nui <- bulma_page(title = \"test\")\nserver <- function(input, output) {}\nshinyApp(ui, server)\nbuild_js()\ndevtools::load_all()\n#' mypkg dependencies utils\n#'\n#' @description This function attaches mypkg dependencies to the given tag\n#'\n#' @param tag Element to attach the dependencies.\n#'\n#' @importFrom utils packageVersion\n#' @importFrom htmltools tagList htmlDependency\n#' @export\nadd_mypkg_deps <- function(tag) {\n mypkg_deps <- htmlDependency(\n  name = \"mypkg\",\n  version = packageVersion(\"mypkg\"),\n  src = c(file = \"mypkg-0.0.0.9000\"),\n  script = \"js/mypkg.min.js\",\n  package = \"mypkg\",\n )\n tagList(tag, mypkg_deps)\n}"},{"path":"workflow-charpente.html","id":"combine-multiple-dependencies","chapter":"21 Introduction to {charpente}","heading":"21.3.7 Combine multiple dependencies","text":"add_dependencies allows select dependency available ./R folder,\nprovided follow convention <depName>_dependencies.R\n(always case use charpente):instance\nadd_dependencies(div(), deps = c(\"bulma\", \"bulmajs\")) adds bulma (first) \nbulmajs dependencies div tag. may change order want since \ntime, order matters. update bulma_page benefit feature:mentioned , add_dependencies belongs mypkg-utils.R script\ndon’t import charpente DESCRIPTION Imports field.","code":"\n#' Attach all created dependencies in the ./R directory to the provided tag\n#'\n#' This function only works if there are existing dependencies. Otherwise,\n#' an error is raised.\n#'\n#' @param tag Tag to attach the dependencies.\n#' @param deps Dependencies to add. Expect a vector of names. If NULL, all dependencies\n#' are added.\n#' @export\n#'\n#' @examples\n#' \\dontrun{\n#'  library(htmltools)\n#'  findDependencies(add_dependencies(div()))\n#'  findDependencies(add_dependencies(div(), deps = \"bulma\"))\n#' }\nadd_dependencies <- function(tag, deps = NULL) {\n  if (is.null(deps)) {\n    temp_names <- list.files(\"./R\", pattern = \"dependencies.R$\")\n    deps <- unlist(lapply(temp_names, strsplit, split = \"-dependencies.R\"))\n  }\n\n  if (length(deps) == 0) stop(\"No dependencies found.\")\n\n  deps <- lapply(deps, function(x) {\n    temp <- eval(\n      parse(\n        text = sprintf(\"htmltools::findDependencies(add_%s_deps(htmltools::div()))\", x)\n      )\n    )\n    # this assumes all add_*_deps function only add 1 dependency\n    temp[[1]]\n  })\n\n  htmltools::tagList(tag, deps)\n}\nbulma_page <- function(..., title = NULL) {\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1\"\n      ),\n      tags$title(title)\n    ),\n    add_dependencies(\n      tags$body(...),\n      deps = c(\"bulma\", \"mypkg\")\n    ) \n  )\n}"},{"path":"workflow-charpente.html","id":"other-charpente-helpers","chapter":"21 Introduction to {charpente}","heading":"21.3.8 Other {charpente} helpers","text":"Let’s finish section listing useful charpente tools.\nknow create_dependency install external dependency.\nshown earlier, code installs bulma dependencies:However, don’t necessarily know package versions may need\nbulma 0.9.1 bulma 0.7.0. get_dependency_versions allows look \nexisting versions:Specifying latest = TRUE ensures recover last stable version\n(excludes alpha/beta versions).may explore also dependency files get_dependency_assets, even \nspecific version tag:helpful fine tune charpente_options, stated previously. indeed possible\ndon’t want bundles, minified, lite rtl versions scripts. Internally, create_dependency\nrelies get_dependency_assets.get_installed_dependency allows inspect dependencies installed. works\ndependencies created locally, charpente_options(local = TRUE).Finally, one may ask update given dependency. update_dependency , provided \ndependency installed locally. default, installs latest version targeted dependency.\ngives diagnosis comparing current installed version\nlatest available version. 3 possible cases: dependencies date\nupdate_dependency(\"bulma\") yields:installed dependencies outdated (0.7.0 create_dependency(\"bulma\", tag = \"0.7.0\", options = charpente_options(local = TRUE))), function shows targeted version well \nlast one:last use case downgrade, may possible package maintainer realizes\ndependency version unstable. following, bulma-0.9.1 installed\ndowngrade 0.7.0 update_dependency(\"bulma\", version_target = \"0.7.0\"):","code":"\ncreate_dependency(\"bulma\")\nget_dependency_versions(\"bulma\")## ℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma## ✓ Success!## ────────────────────────────────────────────────────────────────────────────────##  [1] \"0.9.2\"  \"0.9.1\"  \"0.9.0\"  \"0.8.2\"  \"0.8.1\"  \"0.8.0\"  \"0.7.5\"  \"0.7.4\" \n##  [9] \"0.7.3\"  \"0.7.2\"  \"0.7.1\"  \"0.7.0\"  \"0.6.2\"  \"0.6.1\"  \"0.6.0\"  \"0.5.3\" \n## [17] \"0.5.2\"  \"0.5.1\"  \"0.5.0\"  \"0.4.4\"  \"0.4.3\"  \"0.4.2\"  \"0.4.1\"  \"0.4.0\" \n## [25] \"0.3.2\"  \"0.3.1\"  \"0.3.0\"  \"0.2.3\"  \"0.2.1\"  \"0.2.0\"  \"0.1.2\"  \"0.1.1\" \n## [33] \"0.1.0\"  \"0.0.28\" \"0.0.27\" \"0.0.26\" \"0.0.25\" \"0.0.24\" \"0.0.23\" \"0.0.22\"\n## [41] \"0.0.21\" \"0.0.20\" \"0.0.19\" \"0.0.18\" \"0.0.17\" \"0.0.16\" \"0.0.15\" \"0.0.14\"\n## [49] \"0.0.13\" \"0.0.12\" \"0.0.11\" \"0.0.10\" \"0.0.9\"  \"0.0.8\"  \"0.0.7\"  \"0.0.6\" \n## [57] \"0.0.5\"  \"0.0.4\"\nget_dependency_versions(\"bulma\", latest = TRUE)## ℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma## ✓ Success!## ────────────────────────────────────────────────────────────────────────────────## [1] \"0.9.2\"\nget_dependency_assets(\"bulma\")## ℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma## ✓ Success!## ────────────────────────────────────────────────────────────────────────────────## $url\n## [1] \"https://cdn.jsdelivr.net/npm/bulma@0.9.2/\"\n## \n## $files\n##                name                                         hash\n## 1         bulma.css yImvCCH14bBb1CP+8UKH4Kq6Hd77ErtYaM4V+QSvPwc=\n## 2     bulma.css.map i9ZST1s/+LQDGevUi1OlRnePnesjoYhW5PJvsUWDqok=\n## 3     bulma.min.css O8SsQwDg1R10WnKJNyYgd9J3rlom+YSVcGbEF5RmfFk=\n## 4     bulma-rtl.css xFqhlC3rz3OH0JlaGEBeiKIB2at5/ragR+ldLLYZzQU=\n## 5 bulma-rtl.css.map Jd1QERJuvEGxAD1EPmyOdUOL7Omn2gaDx6KSgqTaIEI=\n## 6 bulma-rtl.min.css OhJCKE0+noWSdE9YUEx+d+3/hdatRbf8nfFQGFCBVhU=\n## \n## $hasSubfolders\n## [1] TRUEℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma\n✓ Success!\n──────────────────────────────────────────────────────────────────────────────\nError in update_dependency(\"bulma\") : Versions are identicalℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma\n✓ Success!\n──────────────────────────────────────────────────────────────────────────────\nℹ current version: 0.7.0 ||\ntarget version: 0.9.1 ||\nlatest version: 0.9.1\n! Upgrading bulma to 0.9.1\n✓ Directory inst/bulma-0.9.1/css successfully created\n! Remove existing file R/bulma-dependencies.Rℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma\n✓ Success!\n──────────────────────────────────────────────────────────────────────────────\nℹ current version: 0.9.1 ||\ntarget version: 0.7.0 ||\nlatest version: 0.9.1\n! Downgrading bulma to 0.7.0\n✓ Directory inst/bulma-0.7.0/css successfully created\n! Remove existing file R/bulma-dependencies.R"},{"path":"workflow-charpente.html","id":"other-tips","chapter":"21 Introduction to {charpente}","heading":"21.4 Other tips","text":"","code":""},{"path":"workflow-charpente.html","id":"validate-javascript","chapter":"21 Introduction to {charpente}","heading":"21.4.1 Validate JavaScript","text":"finish chapter without mentioning tools validate JavaScript code. JSHint, comes {jstools}. example check shinyMobile JavaScript input bindings :may fine tune jshint_file behavior jshint_options. One often tempted call eval JS code, result JSHint error. option called evil exists disable corresponding test. However, recommend play game, accept error try fix instead cheating options! important remark validation check whether code\n. just focus checking whether code runs! test\nJavaScript behavior, please refer Chapter 18.2.1.2.\nextremely careful: consider example mentioned section 9.6.2, \nfollowing code valid JavaScript:pass validation step without error:Yet code won’t work since Shiny.notification exist.","code":"\nshinyMobileJS <- system.file(sprintf(\"shinyMobile-%s/js/shinyMobile.js\", packageVersion(\"shinyMobile\")), package = \"shinyMobile\")\njshint_file(input = shinyMobileJS, options = jshint_options(jquery = TRUE, globals = list(\"Shiny\", \"app\")))## ── Checking shinyMobile.js ───────────────────────────────────────────────────── \n## 51 errors found. \n##  - Line 34: 'template literal syntax' is only available in ES6 (use 'esversion: 6'). \n##  - Line 39: 'template literal syntax' is only available in ES6 (use 'esversion: 6'). \n##  - Line 43: 'template literal syntax' is only available in ES6 (use 'esversion: 6'). \n##  - Line 44: 'template literal syntax' is only available in ES6 (use 'esversion: 6'). \n##  - Line 123: 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz). \n##  - Line 124: 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz). \n##  - Line 137: 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz). \n##  - Line 138: 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz). \n##  - Line 139: 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz). \n##  - Line 179: 'template literal syntax' is only available in ES6 (use 'esversion: 6'). \n##  - Line 224: 'dialog' is defined but never used. \n##  - Line 228: 'confirm' is defined but never used. \n##  - Line 236: 'prompt' is defined but never used. \n##  - Line 260: The Function constructor is a form of eval. \n##  - Line 385: Function declarations should not be placed in blocks. Use a function expression or move the statement to the top of the outer function. \n##  - Line 388: Function declarations should not be placed in blocks. Use a function expression or move the statement to the top of the outer function. \n##  - Line 419: 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz). \n##  - Line 466: Missing '()' invoking a constructor. \n##  - Line 478: Missing '()' invoking a constructor. \n##  - Line 558: Missing '()' invoking a constructor. \n##  - Line 654: Missing '()' invoking a constructor. \n##  - Line 679: Missing '()' invoking a constructor. \n##  - Line 733: Missing '()' invoking a constructor. \n##  - Line 776: Missing '()' invoking a constructor. \n##  - Line 809: Missing '()' invoking a constructor. \n##  - Line 817: Missing '()' invoking a constructor. \n##  - Line 866: Missing '()' invoking a constructor. \n##  - Line 891: Missing '()' invoking a constructor. \n##  - Line 938: Missing '()' invoking a constructor. \n##  - Line 965: Missing '()' invoking a constructor. \n##  - Line 1026: Missing '()' invoking a constructor. \n##  - Line 1095: Missing '()' invoking a constructor. \n##  - Line 1131: Missing '()' invoking a constructor. \n##  - Line 1217: Missing '()' invoking a constructor. \n##  - Line 1229: 'p' is defined but never used. \n##  - Line 1257: 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz). \n##  - Line 1273: Missing '()' invoking a constructor. \n##  - Line 1345: Missing '()' invoking a constructor. \n##  - Line 1375: Missing '()' invoking a constructor. \n##  - Line 1396: 's' is defined but never used. \n##  - Line 1425: Missing '()' invoking a constructor. \n##  - Line 1445: 'r' is defined but never used. \n##  - Line 1516: Missing '()' invoking a constructor. \n##  - Line 1582: Missing '()' invoking a constructor. \n##  - Line 1602: 's' is defined but never used. \n##  - Line 1724: Missing '()' invoking a constructor. \n##  - Line 1762: Missing '()' invoking a constructor. \n##  - Line 1803: Missing '()' invoking a constructor. \n##  - Line 1816: 'for of' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz). \n##  - Line 1856: 'template literal syntax' is only available in ES6 (use 'esversion: 6'). \n##  - Line 1856: Too many errors. (96% scanned).const sendNotif = (message, type, duration) => {\n  Shiny.notification.show({\n    html: `<strong>${message}<\/strong>`,\n    type: type,\n    duration: duration\n  });\n};\n\nsendNotif('Hello')\njshint(\n  \"const sendNotif = (message, type, duration) => {\n  Shiny.notification.show({\n    html: `<strong>${message}<\/strong>`,\n    type: type,\n    duration: duration\n  });\n  };\n  sendNotif('Hello');\n  \",\n  options = jshint_options(\n    esversion = 6,\n    jquery = TRUE, \n    globals = list(\"Shiny\", \"app\")\n  )\n)## $functions\n##      name                   param line character last lastcharacter\n## 1 (empty) message, type, duration    1        27    7             4\n##   metrics.complexity metrics.parameters metrics.statements\n## 1                  1                  3                  1\n## \n## $options\n## $options$unstable\n## named list()\n## \n## $options$undef\n## [1] TRUE\n## \n## $options$unused\n## [1] \"vars\"\n## \n## $options$browser\n## [1] TRUE\n## \n## $options$jquery\n## [1] TRUE\n## \n## $options$devel\n## [1] FALSE\n## \n## $options$esversion\n## [1] 6\n## \n## $options$globals\n## [1] \"Shiny\" \"app\"  \n## \n## $options$indent\n## [1] 4\n## \n## $options$maxerr\n## [1] 50\n## \n## \n## $globals\n## [1] \"Shiny\"\n## \n## $member\n## $member$notification\n## [1] 1\n## \n## $member$show\n## [1] 1\n## \n## $member$html\n## [1] 1\n## \n## $member$type\n## [1] 1\n## \n## $member$duration\n## [1] 1\n## \n## \n## attr(,\"class\")\n## [1] \"list\"   \"jshint\""},{"path":"workflow-charpente.html","id":"beautify-js-code","chapter":"21 Introduction to {charpente}","heading":"21.4.2 Beautify JS code","text":"work RStudio IDE, JS code maybe sometimes messy bad indentation.\njstools also provides function addin fix problem. prettier_js(code) \nprettier_file(input = \"path//file.js\", output = \"path//reformated.js\") .\noften use Prettier addin way faster typing function call (Figure 21.5).\nFIGURE 21.5: Better JS formatting\n","code":""},{"path":"mobile-shiny-intro.html","id":"mobile-shiny-intro","chapter":"22 Introduction","heading":"22 Introduction","text":"","code":""},{"path":"mobile-shiny-intro.html","id":"case-study-objectives","chapter":"22 Introduction","heading":"22.1 Case study objectives","text":"previously mentioned templates, except framework7, dedicated used desktop.\nEven though like bs4Dash work quite well mobile platforms,\ndon’t get native look feel mobile apps like twitter,\nshown Figure 22.1.\nFIGURE 22.1: Twitter design mobile devices\ngoal part introduce mobile development Shiny. going \nreconstruct shinyMobile package help charpente \nlearn since beginning book.","code":""},{"path":"mobile-shiny-intro.html","id":"about-mobile-development","chapter":"22 Introduction","heading":"22.2 About mobile development","text":"Mobile app development consists developing application mobile devices \ntablets, phones (Android, ipadOS). call native app dedicated specified\nplatform. instance, iOS applications developed using Objective-C swift whereas android apps mainly developed\nJava. apps faster web apps since exploit full capabilities platform. UI also\nconsistent, may installed via store (App store, google play) work offline.\nmain issue need know multiple languages maintain multiple\ncode bases.something pure web apps native apps?","code":""},{"path":"mobile-shiny-intro.html","id":"progressive-web-apps","chapter":"22 Introduction","heading":"22.3 Progressive web apps","text":"","code":""},{"path":"mobile-shiny-intro.html","id":"introduction-4","chapter":"22 Introduction","heading":"22.3.1 Introduction","text":"Progressive web apps (PWA) improve classic web apps\ncapabilities able full screen display, installable, provide launch screen,\nlike native apps consistent UI. must obey 3 rules:capable: media control, file system access, …reliable: fast usable offline. Transparent failures.installable: Standalone use, launch user’s home screen.","code":""},{"path":"mobile-shiny-intro.html","id":"what-does-installable-mean","chapter":"22 Introduction","heading":"22.3.2 What does “installable” mean?","text":"several criteria meet installable state:app must served HTTPS.Include manifest: JSON file specify app metadata like name, short name (short_name), icons use\nuser’s home screen launch screen (displayed image first paint),\nstart url (start_url), display mode (generally standalone),\nsplash screen background color (background_color)…registered service worker, can cache app content, thereby making sure provide offline\nfeatures.criteria fulfilled, web browser shows installation toast start process.","code":""},{"path":"mobile-shiny-intro.html","id":"how-to-develop-a-pwa","chapter":"22 Introduction","heading":"22.3.3 How to develop a PWA?","text":"Nowadays, exist tools develop native looking apps common language, JavaScript.\ncase Framework7. shinyMobile (Figure 22.2) developed \ntemplate. tools like google PWA compatibility script\nsignificantly reduces pain make app installable multiple platforms.\nFIGURE 22.2: Twitter design mobile devices\n","code":""},{"path":"mobile-shinyMobile.html","id":"mobile-shinyMobile","chapter":"23 Reconstruct {shinyMobile}","heading":"23 Reconstruct {shinyMobile}","text":"Disclaimer: section written tested Framework7 5.7.14.\nfeature may change future releases.","code":""},{"path":"mobile-shinyMobile.html","id":"introduction-to-framework7","chapter":"23 Reconstruct {shinyMobile}","heading":"23.1 Introduction to Framework7","text":"Framework7 HTML/CSS/JavaScript engine fuels shinyMobile.\nflexible toolkit build native looking web apps progressive\nweb apps (PWA). incredibly rich ecosystem:Provides core JavaScript API, React API, Vue API, Svelte API.CLI ease creation PWA, provide boilerplate started templates.full set native icons.Hundreds components different look iOS material design, even desktop.comprehensive set documentation.supportive community.","code":""},{"path":"mobile-shinyMobile.html","id":"initiate-the-package","chapter":"23 Reconstruct {shinyMobile}","heading":"23.2 Initiate the package","text":"time initialize package structure extract Framework7 dependencies.\nget idea package file structure, run:browse package structure page,\nprovides details necessary components. going use bundle version since\nlite approach missing several components. therefore need framework7.bundle.min.js \nframework7.bundle.min.css, default options create_dependency:package created opened, download Framework7 dependencies. specify\nlatest stable version 5.7.14 target bundle.min files since minified\nfiles contain code make components working:generates framework7-dependencies.R script:","code":"\nlibrary(charpente)\nget_dependency_assets(\"framework7\")## ℹ Trying with https://data.jsdelivr.com/v1/package/npm/framework7## ✓ Success!## ────────────────────────────────────────────────────────────────────────────────## $url\n## [1] \"https://cdn.jsdelivr.net/npm/framework7@6.0.7/\"\n## \n## $files\n##  [1] \"esm\"                           \"core\"                         \n##  [3] \"components\"                    \"cjs\"                          \n##  [5] \"bundle\"                        \"less\"                         \n##  [7] \"lite\"                          \"lite-bundle\"                  \n##  [9] \"modules\"                       \"types\"                        \n## [11] \"framework7.css\"                \"framework7.d.ts\"              \n## [13] \"framework7.js\"                 \"framework7.js.map\"            \n## [15] \"framework7.less\"               \"framework7.min.css\"           \n## [17] \"framework7.min.js\"             \"framework7.min.js.map\"        \n## [19] \"framework7-bundle.css\"         \"framework7-bundle.js\"         \n## [21] \"framework7-bundle.js.map\"      \"framework7-bundle.less\"       \n## [23] \"framework7-bundle.min.css\"     \"framework7-bundle.min.js\"     \n## [25] \"framework7-bundle.min.js.map\"  \"framework7-bundle-rtl.css\"    \n## [27] \"framework7-bundle-rtl.min.css\" \"framework7-rtl.css\"           \n## [29] \"framework7-rtl.min.css\"        \"LICENSE\"                      \n## [31] \"package.json\"                  \"postinstall.js\"               \n## [33] \"README.md\"                    \n## \n## $hasSubfolders\n## [1] FALSE\npath <- file.path(tempdir(), \"shinyMobile\")\ncreate_charpente(path, license = \"mit\")\ncreate_dependency(\"framework7\", tag = \"5.7.14\", options = charpente_options(bundle = TRUE))\nadd_framework7_deps <- function(tag) {\n framework7_deps <- htmltools::htmlDependency(\n  name = \"framework7\",\n  version = \"5.7.14\",\n  src = c(file = \"framework7-5.7.14\"),\n  script = \"js/framework7.bundle.min.js\",\n  stylesheet = \"css/framework7.bundle.min.css\",\n  package = \"shinyMobile\",\n )\n htmltools::tagList(tag, framework7_deps)\n}"},{"path":"mobile-shinyMobile.html","id":"framework7-layouts","chapter":"23 Reconstruct {shinyMobile}","heading":"23.3 Framework7 Layouts","text":"Framework7 3 predefined layouts (Figure 23.1):Single page layout.Multi tabs layout.Split layout: template focused tablet/desktop use.\ncomposed sidebar main panel.\nFIGURE 23.1: Framework7 layouts\nLet’s start simple select single page layout, whose corresponding HTML \ngiven :head tag contains meta tags, required PWA features.\nimportant part dependencies included . Note \norder matters: Framework7 dependencies go first, dependencies follow.\nbody tag composed several layers. first one app root element, \ncrucial template initialization. ’ll come back point next section.\nfind view view-main component, inside find page. page contains\nnavbar, toolbar (bottom bar) page content. Framework7 inserts JavaScript code\nend body. Don’t worry, can include head well.Using html_2_R convert code R extract f7_page function. replace\ntitle content title parameter, remove CSS JS links since add\nadd_dependencies function applied body. page content contained ... parameter.\nalso move navbar toolbar content create 2 layout functions:navbar toolbar components. navbar title parameter \ntoolbar may contain items ... parameter. practice may contain element\nenough now:Don’t forget regularly insert roxygen documentation insert roxygen skeleton\nRStudio feature.point, can try run simple shiny app. Best practice save app.R file \ninst/examples folder:displays nothing, returns error. actually missing app initialization step.","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Required meta tags-->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <!-- Color theme for statusbar (Android only) -->\n    <meta name=\"theme-color\" content=\"#2196f3\">\n    <!-- Your app title -->\n    <title>My App<\/title>\n    <!-- Path to Framework7 Library Bundle CSS -->\n    <link rel=\"stylesheet\" href=\"path/to/framework7.bundle.min.css\">\n    <!-- Path to your custom app styles-->\n    <link rel=\"stylesheet\" href=\"path/to/my-app.css\">\n  <\/head>\n  <body>\n    <!-- App root element -->\n    <div id=\"app\">\n\n      <!-- Your main view, should have \"view-main\" class -->\n      <div class=\"view view-main\">\n        <!-- Initial Page, \"data-name\" contains page name -->\n        <div data-name=\"home\" class=\"page\">\n\n          <!-- Top Navbar -->\n          <div class=\"navbar\">\n            <div class=\"navbar-bg\"><\/div>\n            <div class=\"navbar-inner\">\n              <div class=\"title\">Awesome App<\/div>\n            <\/div>\n          <\/div>\n\n          <!-- Bottom Toolbar -->\n          <div class=\"toolbar toolbar-bottom\">\n            <div class=\"toolbar-inner\">\n              <!-- Toolbar links -->\n              <a href=\"#\" class=\"link\">Link 1<\/a>\n              <a href=\"#\" class=\"link\">Link 2<\/a>\n            <\/div>\n          <\/div>\n\n          <!-- Scrollable page content -->\n          <div class=\"page-content\">\n            <p>Page content goes here<\/p>\n            <!-- Link to another page -->\n            <a href=\"/about/\">About app<\/a>\n          <\/div>\n        <\/div>\n      <\/div>\n    <\/div>\n    <!-- Path to Framework7 Library Bundle JS-->\n    <script type=\"text/javascript\" src=\"path/to/framework7.bundle.min.js\"><\/script>\n    <!-- Path to your app js-->\n    <script type=\"text/javascript\" src=\"path/to/my-app.js\"><\/script>\n  <\/body>\n<\/html>\nf7_page <- function(..., navbar, toolbar, title = NULL) {\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover\"\n      ),\n      tags$meta(\n        name = \"apple-mobile-web-app-capable\",\n        content = \"yes\"\n      ),\n      tags$meta(\n        name = \"theme-color\",\n        content = \"#2196f3\"\n      ),\n      tags$title(title)\n    ),\n    add_dependencies(\n      tags$body(\n        tags$div(\n          id = \"app\",\n          tags$div(\n            class = \"view view-main\",\n            tags$div(\n              class = \"page\",\n              navbar,\n              toolbar,\n              tags$div(\n                class = \"page-content\",\n                ...\n              )\n            )\n          )\n        )\n      ),\n      deps = \"framework7\",\n    )\n  )\n}\nf7_navbar <- function(title) {\n  tags$div(\n    class = \"navbar\",\n    tags$div(class = \"navbar-bg\"),\n    tags$div(\n      class = \"navbar-inner\",\n      tags$div(\n        class = \"title\",\n        title\n      )\n    )\n  )\n}\n\nf7_toolbar <- function(...) {\n  tags$div(\n    class = \"toolbar toolbar-bottom\",\n    tags$div(\n      class = \"toolbar-inner\",\n      ...\n    )\n  )\n}\ndevtools::load_all()\nlibrary(shiny)\n\nui <- f7_page(\n  \"Test\",\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\"\n)\n\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"mobile-shinyMobile.html","id":"app-initialization-1","chapter":"23 Reconstruct {shinyMobile}","heading":"23.4 App initialization","text":"step mandatory activate template components (router, panels, …).\ncreate custom script create_js:add following piece JS inside:Note: don’t assign app variable make globally accessible script!\nrelevant since app may needed almost everywhere.script creates app instance able use methods,\nget information, interact layout elements listen app events (offline, online, …).\nSince root element direct child body, root property \nmandatory. full configuration list may found .\nnext step initialize main view, add line right app creation:done, compress corresponding JS file create shinyMobile.min.js code\nupdate f7_page include new dependency, Framework7 one:run previous app , work shown Figure 23.2.\nright panel displays developer tools inside can seamlessly debug JS code, \nleveraging source maps.\nFIGURE 23.2: First working {shinyMobile} app\nnow, can add welcome notification message leveraging notification API.\n2 steps:Create notification instance app.notification.create(parameters).Tell app open notification start app.notification.open().add following code init.js call build_js():open start close swipe gesture. Framework7 API quite easy \nunderstand extremely powerful.","code":"\ncreate_js(\"init\")$( document ).ready(function() {\n  app = new Framework7({\n    // App root element\n    root: '#app',\n    // App Name\n    name: 'My App',\n    // other options\n  });\n});mainView = app.views.create('.view-main');\nbuild_js()\n\n# updated f7_page\nf7_page <- function(..., navbar, toolbar, title = NULL) {\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover\"\n      ),\n      tags$meta(\n        name = \"apple-mobile-web-app-capable\",\n        content = \"yes\"\n      ),\n      tags$meta(\n        name = \"theme-color\",\n        content = \"#2196f3\"\n      ),\n      tags$title(title)\n    ),\n    add_dependencies(\n      tags$body(\n        tags$div(\n          id = \"app\",\n          tags$div(\n            class = \"view view-main\",\n            tags$div(\n              class = \"page\",\n              navbar,\n              toolbar,\n              tags$div(\n                class = \"page-content\",\n                ...\n              )\n            )\n          )\n        )\n      ),\n      deps = c(\"framework7\", \"shinyMobile\"),\n    )\n  )\n}\n\ndevtools::load_all()var notification = app.notification.create({\n  text: 'Welcome to shinyMobile!',\n  on: {\n    opened: function () {\n      console.log('Notification opened')\n    }\n  }\n}).open();"},{"path":"mobile-shinyMobile.html","id":"app-configuration","chapter":"23 Reconstruct {shinyMobile}","heading":"23.5 App configuration","text":"app object tremendous amount methods parameters.\nsection, briefly describe significant set .\nAmong parameters, metadata parameters like name version. app initialized, \napp parameters accessible . notation. instance, setup version number accessible\napp.version.","code":""},{"path":"mobile-shinyMobile.html","id":"global-theme","chapter":"23 Reconstruct {shinyMobile}","heading":"23.5.1 Global theme","text":"One important parameter theme controls overall app design (Figure 23.3):ios corresponds iOS design.md material design.aurora desktop optimized design.good new parameter set auto, Framework7 detect \ncurrent device accordingly adapt design. Nothing prevents forcing \niOS layout android devices, even though irrelevant. Interestingly, one may recover \ncurrent device app.device. many properties review.\nFIGURE 23.3: Framework7 skins: iOS (left), md (right).\n","code":""},{"path":"mobile-shinyMobile.html","id":"events-1","chapter":"23 Reconstruct {shinyMobile}","heading":"23.5.2 Events","text":"app able emit events whenever relevant like init, resize, online, offline, \nallows add interactivity:","code":"app = new Framework7({\n  on: {\n    init: function () {\n      console.log('App initialized');\n    },\n    // other events\n  }\n});"},{"path":"mobile-shinyMobile.html","id":"components-configuration","chapter":"23 Reconstruct {shinyMobile}","heading":"23.5.3 Components configuration","text":"Framework7 components highly customizable. Yet, know \nparameters going change, good idea make global share\nacross instances. instance, notifications global options. Let’s add code\ninit.js script inside var app = new Framework7({ ... }):means notifications close 3 seconds App title.\nadd another notification init.js script delay 1 second \ntest global feature. Note use internal Framework7 utils\napp.utils.nextTick,\nnothing \nsetTimeout. point look like :","code":"notification: {\n  title: 'My App',\n  closeTimeout: 3000,\n}$( document ).ready(function() {\n // create app instance\n app = new Framework7({\n    // App root element\n    root: '#app',\n    // App Name\n    name: 'My App',\n    // other options\n    notification: {\n      title: 'My App',\n      closeTimeout: 3000,\n    }\n  });\n\n  // init main view\n  mainView = app.views.create('.view-main');\n\n\n  var notification = app.notification.create({\n    text: 'Hello, how are you?',\n    on: {\n      opened: function () {\n        console.log('Notification opened');\n      }\n    }\n  }).open();\n  \n  \n  var otherMessage = app.notification.create({\n    text: 'You look great!'\n  });\n  \n  // equivalent to setTimeout ...\n  app.utils.nextTick(function() {\n    otherMessage.open();\n  }, 1000);\n  \n});"},{"path":"mobile-shinyMobile.html","id":"other-elements","chapter":"23 Reconstruct {shinyMobile}","heading":"23.5.4 Other elements","text":"Framework7 provides mobile specific modules like touch, long press event (750 ms).\nsomething can usually many apps. activate feature, pass\nfollowing configuration app parameters list, inside app = new Framework7({...});:test component, create button element add taphold event init.js:app.R script look like:app running don’t forget open developer tools \nset device mobile mode (iPhone android) since taphold fire\ndesktop (Figure 23.4).taphold also triggers events related click like text selection, \none may want disable. , add following code init.js, making sure\ncheck touch exists:disables classic text selection long press window.\nFIGURE 23.4: Long press taphold event\nimportant remark click handling Framework7. Framework7 internal router allows pass data pages perform quite\nadvanced actions. extremely convenient classic web apps,\nfeature completely suited Shiny natively support multi pages apps.\nrecent work field promising plays well\nshinyMobile (see ) scope chapter. internal router strong implications, instance clicking \n<href=\"https://www.google.com/\">Click <\/> fail (works like\ncharm classic shiny app), shown :fix issue, Framerwork7 clicks module options, may pass valid CSS selector externalLinks property. default configuration:Note: one might tempted target elements: bad idea,\nalso target tabs navigation, eventually fails! Therefore, best\npractice add external class necessary links like (href = \"https://www.google.com/\", \"Click \", class = \"external\")","code":"touch: {\n  tapHold: true,\n}$('#mybutton').on('taphold', function () {\n  app.dialog.alert('Tap hold fired!');\n});\nui <- f7_page(\n  \"Test\",\n  tags$div(\n    class = \"list inset\",\n    tags$ul(\n      tags$li(\n        tags$a(\n          href = \"#\",\n          id = \"mybutton\",\n          class = \"list-button color-red\",\n          \"Large Red Button\"\n        )\n      )\n    )\n  ),\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\"\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)// tapHold custom css\nif (config.hasOwnProperty(\"touch\")) {\n  if (app.params.tapHold) {\n    $(\"<style>\")\n      .prop(\"type\", \"text/css\")\n      .html(\n        `-moz-user-select: none;\n        -webkit-user-select: none;\n        user-select: none;`\n      )\n      .appendTo(\"head\");\n  }\n}\nmylink <- a(href = \"https://www.google.com/\", \"Click me\")\n\n# shinyMobile\nui <- f7_page(\n  mylink,\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\"\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n# classic shiny\nui <- fluidPage(mylink)\nshinyApp(ui, server)clicks: {\n  externalLinks: '.external',\n}"},{"path":"mobile-shinyMobile.html","id":"allow-end-user-configuration","chapter":"23 Reconstruct {shinyMobile}","heading":"23.5.5 Allow end-user configuration","text":"sections, described parameters configure app. Yet,\nsetup values directly JavaScript. allow end user provide\nexternal values?idea following:create options parameter f7_page function accepts list\nparameters.convert JSON format store tag. Ideally next body element.recover data JS side update app initialization method.f7_page may adapted:code deserves explanations. exploit method already defined section 11.2.\nconvert options list JSON jsonlite::toJSON embed script tag.\ndata-attribute unique id guarantees uniqueness configuration script.create intermediate body_tag component insert configuration tag.\nJS side, data collection must occur app initialization quite easy\njQuery find method:can accordingly update app initialization:happens user forgets supply version number? data.version undefined\napp still works! biggest advantage approach fact TRUE\nFALSE (R) converted true false (JS), avoids unnecessary conversion steps.\nHowever, still missing many potential configuration options. instance, code,\nroot, name, version, theme, notifications, touch considered. user\nprovides option, ignored.theory, make sure elements considered:assumes user exactly knows provide list, especially mandatory elements.\nKnowing crazy number options, might slightly complex new user.\nsuggest extract important components direct f7_page parameters \nkeep less important parameters options list. example,\nthink theme super important (truly ), :makes API bit accessible (event though complex maintain)\nneed add one line documentation roxygen part.\ndisheartening redirect Framework7 API documentation \nlook relevant option!Alternatively, also put parameters options\nprovide default value f7Page like:app = new Framework7(config); JS side.good compromise since avoids create many parameters, without sacrificing \ndocumentation.Don’t forget since config object,\nmay add properties, methods, fly . notation app.utils.extend.finally may ask put dark, color filled options list given \npart app API parameters. unknown parameter considered\nFramework7 class, can safely keep , easier treat JS side.","code":"\nf7_page <- function(..., navbar, toolbar, title = NULL, options = NULL) {\n\n  config_tag <- tags$script(\n    type = \"application/json\",\n    `data-for` = \"app\",\n    jsonlite::toJSON(\n      x = options,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n\n  # create body_tag\n  body_tag <- tags$body(\n    tags$div(\n      id = \"app\",\n      tags$div(\n        class = \"view view-main\",\n        tags$div(\n          class = \"page\",\n          navbar,\n          toolbar,\n          tags$div(\n            class = \"page-content\",\n            ...\n          )\n        )\n      )\n    ),\n    config_tag\n  )\n\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover\"\n      ),\n      tags$meta(\n        name = \"apple-mobile-web-app-capable\",\n        content = \"yes\"\n      ),\n      tags$meta(\n        name = \"theme-color\",\n        content = \"#2196f3\"\n      ),\n      tags$title(title)\n    ),\n    add_dependencies(\n      body_tag,\n      deps = c(\"framework7\", \"shinyMobile\")\n    )\n  )\n}\nconfig_tag <- shiny::tags$script(\n    type = \"application/json\",\n    `data-for` = \"app\",\n    jsonlite::toJSON(\n      x = options,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )var config = $(document).find(\"script[data-for='app']\");\nconfig = JSON.parse(config.html());app = new Framework7({\n    // App root element\n    root: '#app',\n    // App Name\n    name: 'My App',\n    version: config.version,\n    // other options\n    theme: config.theme,\n    notification: {\n      title: 'My App',\n      closeTimeout: 3000,\n    },\n    touch: {\n      tapHold: config.taphold,\n    },\n  });app = new Framework7(config);\nf7_page <- function(..., navbar, toolbar, theme = c(\"ios\", \"md\", \"aurora\"), \n                    title = NULL, options = NULL) {\n\n  theme <- match.arg(theme)\n  options$theme <- theme\n  \n  config_tag <- shiny::tags$script(\n    type = \"application/json\",\n    `data-for` = \"app\",\n    jsonlite::toJSON(\n      x = options,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n  \n# ...\n  \n}\\itemize{\n#'  \\item \\code{theme}: App skin: \"ios\", \"md\", \"auto\" or \"aurora\".\n#'  \\item \\code{dark}: Dark layout. TRUE or FALSE.\n#'  \\item \\code{filled}: Whether to fill the \\link{f7Navbar} and \\link{f7Toolbar} with\n#'  the current selected color. FALSE by default.\n#'  \\item \\code{color}: Color theme: See \\url{http://framework7.io/docs/color-themes.html}.\n#'  Expect a name like blue or red. If NULL, use the default color.\n#'  \\item \\code{pullToRefresh}: Whether to active the pull to refresh feature. Default to FALSE.\n#'  See \\url{https://v5.framework7.io/docs/pull-to-refresh.html#examples}.\n#'  \\item \\code{iosTranslucentBars}: Enable translucent effect (blur background) on navigation bars for iOS theme (on iOS devices).\n#'  FALSE by default.\n#' }\n#' Touch module options \\url{https://v5.framework7.io/docs/app.html#app-parameters}:\n#' \\itemize {\n#'  \\item \\code{tapHold}:  It triggers (if enabled) after a sustained, complete touch event.\n#'  By default it is disabled. Note, that Tap Hold is a part of built-in Fast Clicks library,\n#'  so Fast Clicks should be also enabled.\n#'  \\item \\code{tapHoldDelay}: Determines how long (in ms) the user must hold their tap before the taphold event is fired on the target element.\n#'  Default to 750 ms.\n#'  \\item \\code{iosTouchRipple}: Default to FALSE. Enables touch ripple effect for iOS theme.\n#' }\n#' Navbar options \\url{https://v5.framework7.io/docs/navbar.html#navbar-app-parameters}:\n#' \\itemize {\n#'  \\item \\code{iosCenterTitle}: Default to TRUE. When enabled then it will try to position\n#'  title at the center in iOS theme. Sometime (with some custom design) it may not needed.\n#'  \\item \\code{hideOnPageScroll}: Default to FALSE. Will hide Navbars on page scroll.\n#' }\n#' Toolbar options \\url{https://v5.framework7.io/docs/toolbar-tabbar.html#toolbar-app-parameters}:\n#' \\itemize {\n#'  \\item \\code{hideOnPageScroll}: Default to FALSE. Will hide tabs on page scroll.\n#' }\n#'\n#' In any case, you must follow the same structure as provided in the function arguments.\nf7Page <- function(\n  # other parameters are not mentionned\n  options = list(\n    theme = c(\"ios\", \"md\", \"auto\", \"aurora\"),\n    dark = TRUE,\n    filled = FALSE,\n    color = \"#007aff\",\n    touch = list(\n      tapHold = TRUE,\n      tapHoldDelay = 750,\n      iosTouchRipple = FALSE\n    ),\n    iosTranslucentBars = FALSE,\n    navbar = list(\n      iosCenterTitle = TRUE,\n      hideNavOnPageScroll = TRUE\n    ),\n    toolbar = list(\n      hideNavOnPageScroll = FALSE\n    ),\n    # whatever option ...\n  )\n) {\n  # function body ...\n}"},{"path":"mobile-shinyMobile.html","id":"modify-configuration","chapter":"23 Reconstruct {shinyMobile}","heading":"23.5.6 Modify configuration","text":"previously stated, app configuration passed initialization process, \nnew Framework7(config). user wants programmatically change options\napp running?Since app parameters located app.params, idea extend list:example changes default buttons text modal dialog.Note: far tested, options won’t work like global theme, \nrequire re-initialize app obviously possible.","code":"var newParams = {\n  dialog: {\n    buttonOk:  \"Yeaaaah!\",\n    buttonCancel: \"Ouuups!\"\n  }\n}\napp.utils.extend(app.params, newParams);"},{"path":"mobile-shinyMobile.html","id":"handle-multiple-scripts","chapter":"23 Reconstruct {shinyMobile}","heading":"23.6 Handle multiple scripts","text":"","code":""},{"path":"mobile-shinyMobile.html","id":"scoping-rules","chapter":"23 Reconstruct {shinyMobile}","heading":"23.6.1 Scoping rules","text":"one JS file, namely init.js. handle multiple files, especially scoping rules?\ncode inside init.js wrapped main function waits document ready interacting DOM. necessary since configuration retrieved script DOM element inserted application starts, thus immediately available. try remove $( document ).ready(function(...)});, error raised since config properly retrieved (timing issue).already mentioned , think object reused multiple scripts \ndifferent scopes, can omit var element global accessible anywhere.","code":""},{"path":"mobile-shinyMobile.html","id":"shinyMobile-order-matters","chapter":"23 Reconstruct {shinyMobile}","heading":"23.6.2 Order matters","text":"Assume want move init.js notifications another script, say notifications.js.\ncall build_js, terser treats alphabetical order meaning notifications code appears\ninit code final JS code. fine app created within init.js called\nlater notifications.js. Now, create third script another component, component.js:build_js aggregates component.js init.js order, raises error since app\nused defined. Remember build_js files parameter specify custom order \nproperly concatenate files:","code":"app.component.create(parameters);\njs_files <- list.files(\"srcjs\")\ninit_js <- which(js_files == \"init.js\")\ncomponent_js <- which(js_files == \"component.js\")\njs_files <- js_files[-c(init_js, component_js)]\nbuild_js(files = paste0(\"srcjs/\", c(\"init.js\", \"component.js\", jsFiles)))"},{"path":"mobile-shinyMobile.html","id":"global-data-and-methods","chapter":"23 Reconstruct {shinyMobile}","heading":"23.6.3 Global data and methods","text":"Framework7 data parameters allows share global elements multiple scripts.\nillustrate feature, consider tooltip example.\ntooltip help text generally displayed hover (click) specific element.\ncommonly used improve user experience websites.\nFramework7 provides two tooltips systems:purely UI side API tooltip attached tag.server side API tooltip dynamically injected page content.first approach obviously interesting us since involve \nsingle line JS. second approach heavily relies app.data object \ndescribe. R side, two functions:addF7Tooltip sends custom message JS called add_tooltip. \nmessage composed tooltip options (content, …), well selector\napply tooltip (id selector custom CSS selector).updateF7Tooltip sends custom message JS, update_tooltip change\ntooltip state (active/inactive) content.code defined :Framework7 provide native enable/disable method, means \ntooltip activated given element, visible forever, unless destroyed.\nOne goal updateF7Tooltip avoid temporarily disabling tooltip \nreactivating later.JS part activate tooltip tooltips.js:mentioned early fine since message JSON element. can also chain methods\nlike app.tooltip.create(message).show();. however problem: add_tooltip fired\ntime user triggers specific element R side. means tooltip instance \ncreated time, optimal. fix issue, create tooltips cache app.data\nobject accordingly modify init.js:Importantly, app.data must function returning one multiple elements. Let’s first\nreturn empty tooltips array. update tooltips.js file :Check tooltip instance already app.data cached creating instance.\nalready , nothing done.time create new instance, save app.data cache retrieve later.Notice store current instance: app.data.tooltips[message.targetEl] = t;.\nreference given message.targetEl target apply tooltip .\nmultiple tooltips created, may search target name, \nreasonable choice. instance app.data.tooltips[\"#mybutton\"] points \ntooltip associated element #mybutton id. far good!enable/disable tooltip ? mission updateF7Tooltip\nR function. corresponding JS handler:Checks specified tooltip instance exists update case.Handles two situations: update tooltip content toggle tooltip visibility (\nactually just showing/hiding tooltip. Remember tooltip shown\nhover applying hide visible tooltip effect user\nhover tooltip, useless).updateF7Tooltip sends two elements JS: tooltip target element message.targetEl, optional new text, message.text action perform message.action (either update toggle state).\nLet’s first update tooltip element. tooltip.js, add:corresponding tooltip instance accessed app.data app.data.tooltips[message.targetEl]\nstored local variable, t. apply setText user action corresponds update.handle toggle case. first thing check whether current instance active.\napp.tooltip.get method targeted message.targetEl. instance \nalive, get object obtain undefined exist. call app.tooltip.destroy method\ncurrent instance:Wait moment! 2 issues code. first t variable pointing\ncurrent instance. destroy instance, t point destoyed element next time called, action like setText raise error. trick create deep clone Object.assign won’t affected destroy method, save deep clone app.data cache destroy old instance. Therefore update tooltips.js script:also check whether instance alive updating . still missing re-activation step consists rebuilding tooltip instance based cached data app.data.tooltips[message.targetEl] previously saved. parameters contained params object (instance element):final JS code :Similarly methods hosts global app methods. function may re-use different parts.\nLike app.data, access app.methods.Important note: app.data removed since Framework7 6.0.0!","code":"\nvalidateSelector <- function(id, selector) {\n  if (!is.null(id) && !is.null(selector)) {\n    stop(\"Please choose either target or selector!\")\n  }\n}\n\n\nsendCustomMessage <- function(type, message, session) {\n  session$sendCustomMessage(\n    type,\n    jsonlite::toJSON(\n      message,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n}\n\n\"%OR%\" <- function(a, b) if (!is.null(a)) a else b\n\naddF7Tooltip <- function(id = NULL, selector = NULL, options,\n                         session = shiny::getDefaultReactiveDomain()) {\n  # We use already defined popover functions\n  validateSelector(id, selector)\n  if (!is.null(id)) id <- paste0(\"#\", session$ns(id))\n  options$targetEl <- id %OR% selector\n  sendCustomMessage(\"add_tooltip\", options, session)\n}\n\n\nupdateF7Tooltip <- function(id = NULL, selector = NULL,\n                            action = c(\"toggle\", \"update\"), text = NULL,\n                            session = shiny::getDefaultReactiveDomain()) {\n  validateSelector(id, selector)\n  if (!is.null(id)) id <- paste0(\"#\", session$ns(id))\n  targetEl <- id %OR% selector\n  message <- dropNulls(list(targetEl = targetEl, action = action, text = text))\n  sendCustomMessage(\"update_tooltip\", message, session)\n}Shiny.addCustomMessageHandler('add_tooltip', function(message) {\n  app.tooltip.create(message).show();\n});config.data = function() {\n  return {\n    tooltips: []\n  };\n};Shiny.addCustomMessageHandler('add_tooltip', function(message) {\n  // We store all created instances in app data so that we don't\n  // recreate them later if they exist ...\n  if (app.data.tooltips[message.targetEl] === undefined) {\n    // create instance\n    var t = app.tooltip.create(message);\n    // Open tooltip\n    t.show();\n    // Storage in app data (tooltips array)\n    app.data.tooltips[message.targetEl] = t;\n  }\n});Shiny.addCustomMessageHandler('update_tooltip', function(message) {\n  // Don't do anything if the instance is not there in app data\n  if (app.data.tooltips[message.targetEl] !== undefined) {\n    var t = app.data.tooltips[message.targetEl];\n    if (message.action === \"update\") {\n      t.setText(message.text);\n    }\n  }\n});Shiny.addCustomMessageHandler('update_tooltip', function(message) {\n  // Don't do anything if the instance is not there in app data\n  if (app.data.tooltips[message.targetEl] !== undefined) {\n    var t = app.tooltip.get(message.targetEl);\n    if (message.action === \"update\") {\n      t.setText(message.text);\n    } else if (message.action === \"toggle\") {\n      // destroy\n      if (t) {\n        t.destroy();\n      }\n    }\n  }\n});Shiny.addCustomMessageHandler('update_tooltip', function(message) {\n  if (app.data.tooltips[message.targetEl] !== undefined) {\n    // Try to get the instance\n    var t = app.tooltip.get(message.targetEl);\n    if (message.action === \"update\") {\n      if (t) {\n        t.setText(message.text);\n      }\n    } else if (message.action === \"toggle\") {\n      if (t) {\n        // create copy that won't be modified if t is destroyed!\n        var cachedTooltip = Object.assign({}, t);\n        // save copy to replace the deleted one in the app data\n        app.data.tooltips[message.targetEl] = cachedTooltip;\n        // destroy current instance\n        t.destroy();\n      } \n    }\n  }\n});// Capture parameters\nvar pars = app.data.tooltips[message.targetEl].params;\n// Recreate the tooltip based on the copy configuration\nt = app.tooltip.create(pars);\n// Replace the app data instance\napp.data.tooltips[message.targetEl] = t;Shiny.addCustomMessageHandler('update_tooltip', function(message) {\n  if (app.data.tooltips[message.targetEl] !== undefined) {\n    // Try to get the instance\n    var t = app.tooltip.get(message.targetEl);\n    if (message.action === \"update\") {\n      if (t) {\n        t.setText(message.text);\n      }\n    } else if (message.action === \"toggle\") {\n      if (t) {\n        // create copy that won't be modified if t is destroyed!\n        var cachedTooltip = Object.assign({}, t);\n        // save copy to replace the deleted one in the app data\n        app.data.tooltips[message.targetEl] = cachedTooltip;\n        // destroy current instance\n        t.destroy();\n      } else {\n        // Parameters\n        var pars = app.data.tooltips[message.targetEl].params;\n        // recreate the tooltip based on the copy configuration\n        t = app.tooltip.create(pars);\n        app.data.tooltips[message.targetEl] = t;\n      }\n    }\n  }\n});"},{"path":"mobile-shinyMobile.html","id":"theming-and-colors","chapter":"23 Reconstruct {shinyMobile}","heading":"23.7 Theming and colors","text":"Framework7 15 color themes dark/light global appearance. apply , add color-theme-COLOR \nparent element. Best practice target body since parent page\ncontent. ensures global consistency. dark theme triggered adding \ntheme-dark class html. Since body belongs f7_page html (added \nShiny startup), can apply color R dark mode activated\nJS:approach assumes user pass color name parameter like pink, yellow.\nwant allow flexibility add existing HEX color?\nFramework7 tools, namely app.utils.colorThemeCSSProperties, JS method\ncreating required CSS fly depending provided HEX color. instance, select \ncyberpunk green color:commented code injected app CSS. personally don’t think problem\nlook specific HEX code, knowing many tools can help. Therefore, prefer \nsecond approach. edit init.js code adding following JS snippet:config.hasOwnProperty('color') ensures code run color missing \nprovided config. , generate object containing theme color properties app.utils.colorThemeCSSProperties(config.color).\nImportantly, object, can’t insert string. However, can extract \nproperties 1 1 generate relevant piece CSS. add style tag head\ncontaining following CSS rule:property like --f7-theme-color, recover corresponding value \ncolorCSS object, colorCSS[\"--f7-theme-color\"]. done, recompile JS\nbuild_js try following app:can go apply filled theme, reverted design \nnavbar, toolbar, … filled theme color. , need add following CSS:Like , JS side init.js:result displayed Figure 23.5. Don’t forget\npass filled property config list.\nFIGURE 23.5: Filled green color theme\nLet’s finish section dark mode. leverage Framework7 app method\nelement since also toggle dark mode circumstances. add \ntoggleDarkTheme function methods object trigger depending value\nconfig. user don’t provide value, set config.dark false:point init.js :dark mode app example:overall expected result shown Figure 23.6.\nFIGURE 23.6: Dark mode {shinyMobile}\nnow set base pieces. next chapter, see make shinyMobile apps\nprogressive web apps.","code":"\nf7_page <- function(..., navbar, toolbar, theme = c(\"ios\", \"md\", \"aurora\"), \n                    color = NULL, title = NULL, options = NULL) {\n  \n  body_cl <- NULL\n  if (!is.null(color)) body_cl <- sprintf(\"color-theme-color\")\n  \n  # Modify the body tag to add a class\n  tags$body(\n    class = body_cl,\n    tags$div(\n      id = \"app\",\n      tags$div(\n        class = \"view view-main\",\n        tags$div(\n          class = \"page\",\n          navbar,\n          toolbar,\n          tags$div(\n            class = \"page-content\",\n            ...\n          )\n        )\n      )\n    ),\n    config_tag\n  )\n  \n  # ...\n  \n}app.utils.colorThemeCSSProperties('#42f5a1');\n// /* Custom color theme */\n// {\n//   \"--f7-theme-color\": \"#42f5a1\";\n//   \"--f7-theme-color-rgb\": \"66, 245, 161\";\n//   \"--f7-theme-color-shade\": \"#1bf38e\";\n//   \"--f7-theme-color-tint\": \"#69f7b4\";\n// }if (config.hasOwnProperty('color')) {\n  var colorCSS = app.utils.colorThemeCSSProperties(config.color);\n  $('<style>')\n    .prop('type', 'text/css')\n    .html(`:root {\n      --f7-theme-color: ${colorCSS[\"--f7-theme-color\"]};\n      --f7-theme-color-rgb: ${colorCSS[\"--f7-theme-color-rgb\"]};\n      --f7-theme-color-shade: ${colorCSS[\"--f7-theme-color-shade\"]};\n      --f7-theme-color-tint: ${colorCSS[\"--f7-theme-color-tint\"]};\n    }`)\n    .appendTo(\"head\");\n}/* Custom color theme */\n:root {\n  --f7-theme-color: #42f5a1;\n  --f7-theme-color-rgb: 66, 245, 161;\n  --f7-theme-color-shade: #1bf38e;\n  --f7-theme-color-tint: #69f7b4;\n}\ndevtools::load_all()\n\nui <- f7_page(\n    tags$div(\n        class = \"list inset\",\n        tags$ul(\n            tags$li(\n                tags$a(\n                    href = \"#\",\n                    id = \"mybutton\",\n                    class = \"list-button\",\n                    \"Large Green Button\"\n                )\n            )\n        )\n    ),\n    navbar = f7_navbar(\"Title\"),\n    toolbar = f7_toolbar(),\n    title = \"shinyMobile\",\n    options = list(theme = \"ios\", version = \"1.0.0\", taphold = TRUE, color = \"#42f5a1\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)/* Invert navigation bars to fill style */\n:root,\n:root.theme-dark,\n:root .theme-dark {\n  --f7-bars-bg-color: var(--f7-theme-color);\n  --f7-bars-bg-color-rgb: var(--f7-theme-color-rgb);\n  --f7-bars-translucent-opacity: 0.9;\n  --f7-bars-text-color: #fff;\n  --f7-bars-link-color: #fff;\n  --f7-navbar-subtitle-text-color: rgba(255,255,255,0.85);\n  --f7-bars-border-color: transparent;\n  --f7-tabbar-link-active-color: #fff;\n  --f7-tabbar-link-inactive-color: rgba(255,255,255,0.54);\n  --f7-sheet-border-color: transparent;\n  --f7-tabbar-link-active-border-color: #fff;\n}\n.appbar,\n.navbar,\n.toolbar,\n.subnavbar,\n.calendar-header,\n.calendar-footer {\n  --f7-touch-ripple-color: var(--f7-touch-ripple-white);\n  --f7-link-highlight-color: var(--f7-link-highlight-white);\n  --f7-button-text-color: #fff;\n  --f7-button-pressed-bg-color: rgba(255,255,255,0.1);\n}\n.navbar-large-transparent,\n.navbar-large.navbar-transparent {\n  --f7-navbar-large-title-text-color: #000;\n\n  --r: 0;\n  --g: 122;\n  --b: 255;\n  --progress: var(--f7-navbar-large-collapse-progress);\n  --f7-bars-link-color: rgb(\n    calc(var(--r) + (255 - var(--r)) * var(--progress)),\n    calc(var(--g) + (255 - var(--g)) * var(--progress)),\n    calc(var(--b) + (255 - var(--b)) * var(--progress))\n  );\n}\n.theme-dark .navbar-large-transparent,\n.theme-dark .navbar-large.navbar-transparent {\n  --f7-navbar-large-title-text-color: #fff;\n}if (!config.hasOwnProperty('filled')) config.filled = false;\nif (config.filled) {\n  var filledCSS = `\n    :root,\n    :root.theme-dark,\n    :root .theme-dark {\n      --f7-bars-bg-color: var(--f7-theme-color);\n      --f7-bars-bg-color-rgb: var(--f7-theme-color-rgb);\n      --f7-bars-translucent-opacity: 0.9;\n      --f7-bars-text-color: #fff;\n      --f7-bars-link-color: #fff;\n      --f7-navbar-subtitle-text-color: rgba(255,255,255,0.85);\n      --f7-bars-border-color: transparent;\n      --f7-tabbar-link-active-color: #fff;\n      --f7-tabbar-link-inactive-color: rgba(255,255,255,0.54);\n      --f7-sheet-border-color: transparent;\n      --f7-tabbar-link-active-border-color: #fff;\n    }\n    .appbar,\n    .navbar,\n    .toolbar,\n    .subnavbar,\n    .calendar-header,\n    .calendar-footer {\n      --f7-touch-ripple-color: var(--f7-touch-ripple-white);\n      --f7-link-highlight-color: var(--f7-link-highlight-white);\n      --f7-button-text-color: #fff;\n      --f7-button-pressed-bg-color: rgba(255,255,255,0.1);\n    }\n    .navbar-large-transparent,\n    .navbar-large.navbar-transparent {\n      --f7-navbar-large-title-text-color: #000;\n    \n      --r: 0;\n      --g: 122;\n      --b: 255;\n      --progress: var(--f7-navbar-large-collapse-progress);\n      --f7-bars-link-color: rgb(\n        calc(var(--r) + (255 - var(--r)) * var(--progress)),\n        calc(var(--g) + (255 - var(--g)) * var(--progress)),\n        calc(var(--b) + (255 - var(--b)) * var(--progress))\n      );\n    }\n    .theme-dark .navbar-large-transparent,\n    .theme-dark .navbar-large.navbar-transparent {\n      --f7-navbar-large-title-text-color: #fff;\n  }`;\n  \n  $('<style>')\n    .prop('type', 'text/css')\n    .html(`${filledCSS}`)\n    .appendTo(\"head\");\n}config.methods = {\n  toggleDarkTheme: function () {\n    var self = this;\n    var $html = self.$('html');\n    $html.toggleClass('theme-dark');\n  }\n}\n\nif (!config.hasOwnProperty('dark')) config.dark = false;\n\nif (config.dark) {\n  app.methods.toggleDarkTheme();\n}$( document ).ready(function() {\n  // collect all data elements stored in body\n  var config = $(document).find(\"script[data-for='app']\");\n  config = JSON.parse(config.html());\n\n  // always erase existing root value just in case the user changes the root.\n  // This may be harmful\n  config.root = \"#app\";\n  \n  // store app methods\n  config.methods =  {\n      toggleDarkTheme: function() {\n        var self = this;\n        var $html = self.$(\"html\");\n        $html.toggleClass(\"theme-dark\");\n      }\n    };\n\n  // create app instance\n  app = new Framework7(config);\n\n  // init main view\n  mainView = app.views.create('.view-main');\n  \n  // tapHold custom css\n  if (config.hasOwnProperty(\"touch\")) {\n    if (config.touch.tapHold) {\n      $(\"<style>\")\n        .prop(\"type\", \"text/css\")\n        .html(\n          `\n          -moz-user-select: none;\n          -webkit-user-select: none;\n          user-select: none;`\n        )\n        .appendTo(\"head\");\n    }\n  }\n\n  var notification = app.notification.create({\n    text: 'Hello, how are you?',\n    on: {\n      opened: function () {\n        console.log('Notification opened');\n      }\n    }\n  }).open();\n\n  var otherMessage = app.notification.create({\n    text: 'You look great!'\n  });\n\n  // equivalent to setTimeout ...\n  app.utils.nextTick(function() {\n    otherMessage.open();\n  }, 1000);\n\n  // taphold test\n  $('#mybutton').on('taphold', function () {\n    app.dialog.alert('Tap hold fired!');\n  });\n\n  // Set color theme\n  if (config.hasOwnProperty('color')) {\n    var colorCSS = app.utils.colorThemeCSSProperties(config.color);\n    $('<style>')\n      .prop('type', 'text/css')\n      .html(`:root {\n        --f7-theme-color: ${colorCSS[\"--f7-theme-color\"]};\n        --f7-theme-color-rgb: ${colorCSS[\"--f7-theme-color-rgb\"]};\n        --f7-theme-color-shade: ${colorCSS[\"--f7-theme-color-shade\"]};\n        --f7-theme-color-tint: ${colorCSS[\"--f7-theme-color-tint\"]};\n      }`)\n      .appendTo(\"head\");\n  }\n\n  // Filled theme\n  if (!config.hasOwnProperty('filled')) config.filled = false;\n  if (config.filled) {\n    var filledCSS = `\n      :root,\n      :root.theme-dark,\n      :root .theme-dark {\n        --f7-bars-bg-color: var(--f7-theme-color);\n        --f7-bars-bg-color-rgb: var(--f7-theme-color-rgb);\n        --f7-bars-translucent-opacity: 0.9;\n        --f7-bars-text-color: #fff;\n        --f7-bars-link-color: #fff;\n        --f7-navbar-subtitle-text-color: rgba(255,255,255,0.85);\n        --f7-bars-border-color: transparent;\n        --f7-tabbar-link-active-color: #fff;\n        --f7-tabbar-link-inactive-color: rgba(255,255,255,0.54);\n        --f7-sheet-border-color: transparent;\n        --f7-tabbar-link-active-border-color: #fff;\n      }\n      .appbar,\n      .navbar,\n      .toolbar,\n      .subnavbar,\n      .calendar-header,\n      .calendar-footer {\n        --f7-touch-ripple-color: var(--f7-touch-ripple-white);\n        --f7-link-highlight-color: var(--f7-link-highlight-white);\n        --f7-button-text-color: #fff;\n        --f7-button-pressed-bg-color: rgba(255,255,255,0.1);\n      }\n      .navbar-large-transparent,\n      .navbar-large.navbar-transparent {\n        --f7-navbar-large-title-text-color: #000;\n      \n        --r: 0;\n        --g: 122;\n        --b: 255;\n        --progress: var(--f7-navbar-large-collapse-progress);\n        --f7-bars-link-color: rgb(\n          calc(var(--r) + (255 - var(--r)) * var(--progress)),\n          calc(var(--g) + (255 - var(--g)) * var(--progress)),\n          calc(var(--b) + (255 - var(--b)) * var(--progress))\n        );\n      }\n      .theme-dark .navbar-large-transparent,\n      .theme-dark .navbar-large.navbar-transparent {\n        --f7-navbar-large-title-text-color: #fff;\n    }`;\n    \n    $('<style>')\n      .prop('type', 'text/css')\n      .html(`${filledCSS}`)\n      .appendTo(\"head\");\n  }\n\n  // dark mode\n  if (!config.hasOwnProperty('dark')) config.dark = false;\n  if (config.dark) {\n    app.methods.toggleDarkTheme();\n  }\n});\nui <- f7_page(\n    tags$div(\n        class = \"list inset\",\n        tags$ul(\n            tags$li(\n                tags$a(\n                    href = \"#\",\n                    id = \"mybutton\",\n                    class = \"list-button\",\n                    \"Large Green Button\"\n                )\n            )\n        )\n    ),\n    navbar = f7_navbar(\"Title\"),\n    toolbar = f7_toolbar(),\n    title = \"shinyMobile\",\n    options = list(\n      theme = \"ios\", \n      version = \"1.0.0\", \n      taphold = TRUE, \n      color = \"#42f5a1\", \n      filled = TRUE, \n      dark = TRUE\n    )\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"mobile-pwa.html","id":"mobile-pwa","chapter":"24 {shinyMobile} and PWA","heading":"24 {shinyMobile} and PWA","text":"Transforming classic Shiny app PWA game changer end users.\nfirst step setup valid web manifest icons favicon.","code":""},{"path":"mobile-pwa.html","id":"disclaimers","chapter":"24 {shinyMobile} and PWA","heading":"24.1 Disclaimers","text":"PWA features won’t work iOS, like \ninstall prompt.","code":""},{"path":"mobile-pwa.html","id":"introduction-5","chapter":"24 {shinyMobile} and PWA","heading":"24.2 Introduction","text":", review one one steps necessary convert shiny app PWA.\nget goo idea exactly miss, leverage Application tab \ndeveloper tools.overall expected result shown Figure 24.1. Alternatively, one\nmay use Google Lighthouse utility provide general diagnosis app.\nmany categories like performance, accessibility. case, let’s just select\nPWA category, select mobile device radio click generate report.\nFIGURE 24.1: Application tab developers tools\nAccording diagnostic result displayed Figure 24.2, miss many elements:manifest.service worker.icons.\nFIGURE 24.2: Lighthouse audit result\n","code":""},{"path":"mobile-pwa.html","id":"charpente-and-pwa-tools","chapter":"24 {shinyMobile} and PWA","heading":"24.3 {charpente} and PWA tools","text":"charpente tools help designing PWA. set_pwa function wrapper\npreviously mentioned step one line code. however \nprerequisites:app must belong package.function must target app directory.reminder, demonstration apps located within inst/examples folder.\ncreate pwa-app sub-folder app.R file:set PWA configuration:function generates manifest.webmanifest file, downloads Google PWA compatibility\nscript, adds custom dependency pointing manifest.webmanifest file 144x144 icon file,\ncopies boilerplate service-worker.js offline.html page optionally registers \nservice worker (code borrowed web.dev:shinyMobile case, Framework7 already registers linked service\nworker, don’t need initialization script. Therefore, actually call:Importantly, functions handle icon creation. tools \nappsco \napp-manifest, create\ncustom icons splash screens, need .give detail","code":"\nlibrary(shiny)\nlibrary(shinyMobile)\n\nui <- f7_page(\n  \"Test\",\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\"\n)\n\nserver <- function(input, output, session) {}\nshinyApp(ui, server)\nset_pwa(\"inst/examples/pwa-app\")window.addEventListener('load', () => {\n  if ('serviceWorker' in navigator) {\n    var pathname = window.location.pathname;\n    navigator.serviceWorker\n      .register(pathname + 'service-worker.js', { scope: pathname})\n      .then(function() { console.log('Service Worker Registered'); });\n  };\n});\nset_pwa(\"inst/examples/pwa-app\", register_service_worker = FALSE)"},{"path":"mobile-pwa.html","id":"create-the-manifest","chapter":"24 {shinyMobile} and PWA","heading":"24.3.1 Create the manifest","text":"want create JSON configuration file like :file accessible app best practice put /www folder.\nimages hosted sub-directory /www/icons.create_manifest function basically writing JSON file provided location:web manifest icons included head Google PWA compatibility\nscript:set_pwa includes create_pwa_dependency function creates HTML dependency\ncontaining necessary resources:Importantly, provided icons must follow convention icon-<size_in_px>.png like\nicon-144.png, default.","code":"{\n  \"short_name\": \"My App\",\n  \"name\": \"Super amazing app\",\n  \"description\": \"This app is just mind blowing\",\n  \"icons\": [\n    {\n      \"src\": \"icons/icon.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    }\n    // ...\n  ],\n  \"start_url\": \"https://whatever-url.com/\",\n  \"background_color\": \"#3367D6\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"theme_color\": \"#3367D6\"\n}\ncreate_manifest <- function(path, name = \"My Progressive Web App\", shortName = \"My App\",\n                            description = \"What it does!\", lang = \"en-US\",\n                            startUrl = \"/\", display = c(\"minimal-ui\", \"standalone\", \"fullscreen\", \"browser\"),\n                            background_color = \"#ffffff\", theme_color = \"#ffffff\") {\n\n  display <- match.arg(display)\n\n  manifest <- list(\n    name = name,\n    short_name = shortName,\n    description = description,\n    lang = lang,\n    start_url = startUrl,\n    display = display,\n    background_color = background_color,\n    theme_color = theme_color,\n    icons = data.frame(\n      src = \"icons/icon-144.png\",\n      sizes = \"144x144\"\n    )\n  )\n\n  # create /www folder if does not exist yet\n  if (!dir.exists(paste0(path, \"/www\"))) {\n    dir.create(paste0(path, \"/www/icons\"), recursive = TRUE)\n  }\n  jsonlite::write_json(\n    manifest, \n    path = paste0(path, \"/www/manifest.webmanifest\"),\n    pretty = TRUE,\n    auto_unbox = TRUE\n  )\n  \n  ui_done(\"Web manifest successfully created!\")\n}<link rel=\"manifest\" href=\"manifest.webmanifest\" />\n<!-- include icon also from manifest -->\n<link rel=\"icon\" type=\"image/png\" href=\"icons/logo-144.png\" sizes=\"144x144\" />\n#' PWA dependencies utils\n#'\n#' @description This function attaches PWA manifest and icons to the given tag\n#'\n#' @param tag Element to attach the dependencies.\n#'\n#' @importFrom utils packageVersion\n#' @importFrom htmltools tagList htmlDependency\n#' @export\nadd_pwa_deps <- function(tag) {\n pwa_deps <- htmlDependency(\n  name = \"pwa-utils\",\n  version = packageVersion(\"shinyMobile\"),\n  src = c(file = \"shinyMobile-0.0.0.9000\"),\n  head = \"<link rel=\\\"manifest\\\" href=\\\"manifest.webmanifest\\\"  />\n<link rel=\\\"icon\\\" type=\\\"image/png\\\" href=\\\"icons/icon-144.png\\\" sizes=\\\"144x144\\\" />\",\n  package = \"mypkg2\",\n )\n tagList(tag, pwa_deps)\n}"},{"path":"mobile-pwa.html","id":"google-pwa-compatibility","chapter":"24 {shinyMobile} and PWA","heading":"24.3.2 Google PWA compatibility","text":"use google PWA compatibility script, include least one icon\nlike <link rel=\"icon\" type=\"image/png\" href=\"res/icon-128.png\" sizes=\"128x128\" />.\nHowever, found discrepancies developer tools recommendations \nPWA compatibility script. recommend follow developer tools prescriptions, \ninclude least one icon size 144x144. elements generated script ,\nextremely convenient. Indeed, handle possible screen sizes different OS particularly\ntricky, repetitive interesting.HTML dependency downloaded create_dependency(\"pwacompat\", options = charpente_options(bundle = FALSE)).\nDon’t forget update add_dependencies list including two new dependencies:devtools::load_all() run app , see new dependencies\nhead (Figure 24.3).\nFIGURE 24.3: New PWA dependencies head tag.\nYet, according Figure 24.4, still miss service worker,\nshown manifest diagnostic. shows powerful developer tools \nend user always guided step step.\nFIGURE 24.4: Missing service worker registration.\n","code":"\nf7_page <- function(..., navbar, toolbar, title = NULL, options = NULL) {\n\n  config_tag <- tags$script(\n    type = \"application/json\",\n    `data-for` = \"app\",\n    jsonlite::toJSON(\n      x = options,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n\n  # create body_tag\n  body_tag <- tags$body(\n    tags$div(\n      id = \"app\",\n      tags$div(\n        class = \"view view-main\",\n        tags$div(\n          class = \"page\",\n          navbar,\n          toolbar,\n          tags$div(\n            class = \"page-content\",\n            ...\n          )\n        )\n      )\n    ),\n    config_tag\n  )\n\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover\"\n      ),\n      tags$meta(\n        name = \"apple-mobile-web-app-capable\",\n        content = \"yes\"\n      ),\n      tags$meta(\n        name = \"theme-color\",\n        content = \"#2196f3\"\n      ),\n      tags$title(title)\n    ),\n    add_dependencies(\n      body_tag,\n      deps = c(\"framework7\", \"shinyMobile\", \"pwa\", \"pwacompat\")\n    )\n  )\n}"},{"path":"mobile-pwa.html","id":"service-worker-and-offline-page","chapter":"24 {shinyMobile} and PWA","heading":"24.3.3 Service worker and offline page","text":"second mandatory step make app installable service worker.\nborrowed code web.dev. set_pwa copies\ncode www folder provided app:service worker redirects end user offline cached page whenever\napp offline, thereby offering better user experience. explicitly\ntargets offline.html page. Therefore, strongly advise keep file names.next step mention register service worker. Framework7 dedicated module \napp configuration. modify init.js run build_js() update minified file:process successful, get result shown Figure 24.5.\nFIGURE 24.5: Registered service worker.\nnew standard imposes return valid response app offline. offline page \nalso copied charpente:Now, let’s audit app : congrats! app installable, reliable, although\nPWA optimization may provided.\nFIGURE 24.6: Installable shinyMobile app.\n","code":"/*\nCopyright 2015, 2019, 2020 Google LLC. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\n// Incrementing OFFLINE_VERSION will kick off the install event and force\n// previously cached resources to be updated from the network.\nconst OFFLINE_VERSION = 1;\nconst CACHE_NAME = \"offline\";\n// Customize this with a different URL if needed.\nconst OFFLINE_URL = \"offline.html\";\n\nself.addEventListener(\"install\", (event) => {\n  event.waitUntil(\n    (async () => {\n      const cache = await caches.open(CACHE_NAME);\n      // Setting {cache: 'reload'} in the new request will ensure that the\n      // response isn't fulfilled from the HTTP cache; i.e., it will be from\n      // the network.\n      await cache.add(new Request(OFFLINE_URL, { cache: \"reload\" }));\n    })()\n  );\n  // Force the waiting service worker to become the active service worker.\n  self.skipWaiting();\n});\n\nself.addEventListener(\"activate\", (event) => {\n  event.waitUntil(\n    (async () => {\n      // Enable navigation preload if it's supported.\n      // See https://developers.google.com/web/updates/2017/02/navigation-preload\n      if (\"navigationPreload\" in self.registration) {\n        await self.registration.navigationPreload.enable();\n      }\n    })()\n  );\n\n  // Tell the active service worker to take control of the page immediately.\n  self.clients.claim();\n});\n\nself.addEventListener(\"fetch\", (event) => {\n  // We only want to call event.respondWith() if this is a navigation request\n  // for an HTML page.\n  if (event.request.mode === \"navigate\") {\n    event.respondWith(\n      (async () => {\n        try {\n          // First, try to use the navigation preload response if it's supported.\n          const preloadResponse = await event.preloadResponse;\n          if (preloadResponse) {\n            return preloadResponse;\n          }\n\n          // Always try the network first.\n          const networkResponse = await fetch(event.request);\n          return networkResponse;\n        } catch (error) {\n          // catch is only triggered if an exception is thrown, which is likely\n          // due to a network error.\n          // If fetch() returns a valid HTTP response with a response code in\n          // the 4xx or 5xx range, the catch() will NOT be called.\n          console.log(\"Fetch failed; returning offline page instead.\", error);\n\n          const cache = await caches.open(CACHE_NAME);\n          const cachedResponse = await cache.match(OFFLINE_URL);\n          return cachedResponse;\n        }\n      })()\n    );\n  }\n\n  // If our if() condition is false, then this fetch handler won't intercept the\n  // request. If there are any other fetch handlers registered, they will get a\n  // chance to call event.respondWith(). If no fetch handlers call\n  // event.respondWith(), the request will be handled by the browser as if there\n  // were no service worker involvement.\n});serviceWorker: {\n  path: window.location.pathname + 'service-worker.js',\n  scope: window.location.pathname\n}<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n    <title>You are offline<\/title>\n\n    <!-- inline the webpage's stylesheet -->\n    <style>\n      body {\n        font-family: helvetica, arial, sans-serif;\n        margin: 2em;\n      }\n\n      h1 {\n        font-style: italic;\n        color: #373fff;\n      }\n\n      p {\n        margin-block: 1rem;\n      }\n\n      button {\n        display: block;\n      }\n    <\/style>\n  <\/head>\n  <body>\n    <h1>You are offline<\/h1>\n\n    <p>Click the button below to try reloading.<\/p>\n    <button type=\"button\">⤾ Reload<\/button>\n\n    <!-- inline the webpage's javascript file -->\n    <script>\n      document.querySelector(\"button\").addEventListener(\"click\", () => {\n        window.location.reload();\n      });\n    <\/script>\n  <\/body>\n<\/html>"},{"path":"mobile-pwa.html","id":"disable-pwa-for-the-end-user","chapter":"24 {shinyMobile} and PWA","heading":"24.3.4 Disable PWA for the end user","text":"approach, shinyMobile always look service worker register.\nParticularly, raises error case service worker found server.\nuser don’t want always create PWA, let’s say less important applications?\nmay add parameter f7Page, instance allowPWA either TRUE FALSE,\nstore value body data-pwa attribute recover JS side init.js:create config.serviceWorker user specified allowPWA = TRUE.","code":"// check if the app is intended to be a PWA\nvar isPWA = $('body').attr('data-pwa') === \"true\";\n\nif (isPWA) {\n  config.serviceWorker = {\n    path: window.location.pathname + \"service-worker.js\",\n    scope: window.location.pathname\n  };\n}"},{"path":"mobile-pwa.html","id":"handle-the-installation","chapter":"24 {shinyMobile} and PWA","heading":"24.4 Handle the installation","text":"great opportunity propose custom\ninstallation experience.Note: able install app, make sure replace start_url url\napp deployed like https://dgranjon.shinyapps.io/installable-pwa-app/ instance.\nMissing step cause issue service worker registration.\ninstallation criteria met, web browser raises beforeinstallprompt event, except\niOS platform, yet compatible. check , edit init.js script add:code adds event listener window, prevents showing start e.preventDefault \ncaptures external variable called deferredPrompt. , create custom piece UI \ntrigger prompt install. can benefit rich Framework7 interface display\ntoast containing install button. instantiation\nfairly simple follows pattern app.<COMPONENT>.create(parameters):give id call later. edit beforeinstallprompt event listener show\ntoast:Note: jQuery like $(window).('beforeinstallprompt', ...),\ncapture event e.originalEvent!register second event listener, fires toast button click.\nwait bit time toast exists app.utils.nextTick,\n, reminder, internal equivalent setTimeout. first close \ntoast, call prompt method deferred event log result:run build_js() deploy app shinyapps.io. Figure 24.7\nillustrates install prompt window appears install app. installed, beforeinstallprompt\nevent fire anymore app may launched standalone app, instance macOSX (Figure 24.8)\nFIGURE 24.7: Install prompt window.\n\nFIGURE 24.8: Installed PWA macOSX.\nFigure 24.8, blue window color corresponds tags$meta(name = \"theme-color\", content = \"#2196f3\"),\nf7_page layout element. Whenever connection lost, redirection occurs \noffline.html page, shown Figure 24.9.\nFIGURE 24.9: Offline HTML template.\ninstallable-pwa-test repository\ncontains final code reproduce previous steps.","code":"let deferredPrompt;\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  // Prevent the mini-infobar from appearing on mobile\n  e.preventDefault();\n  // Stash the event so it can be triggered later.\n  deferredPrompt = e;\n});// Create custom install UI\nvar installToast = app.toast.create({\n  position: 'center',\n  text: '<button id=\"install-button\" class=\"toast-button button color-green\">Install<\/button>',\n});let deferredPrompt;\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  // Prevent the mini-infobar from appearing on mobile\n  e.preventDefault();\n  // Stash the event so it can be triggered later.\n  deferredPrompt = e;\n  // Show install trigger\n  installToast.open();\n});app.utils.nextTick(function() {\n  $('#install-button').on('click', function() {\n    // close install toast\n    installToast.close();\n    if (!deferredPrompt) {\n      // The deferred prompt isn't available.\n      return;\n    }\n    // Show the install prompt.\n    deferredPrompt.prompt();\n    // Log the result\n    deferredPrompt.userChoice.then((result) => {\n      console.log('👍', 'userChoice', result);\n      // Reset the deferred prompt variable, since\n      // prompt() can only be called once.\n      deferredPrompt = null;\n    });\n  });\n}, 500);"},{"path":"mobile-pwa.html","id":"workbox","chapter":"24 {shinyMobile} and PWA","heading":"24.5 Workbox","text":"Workbox robust alternative\napproach described . Interestingly, Framework7\nuses Workbox service worker generator default. :pre-caching dependencies like CSS JS also images Google fonts\nimprove performances.Improve offline experience.…","code":""},{"path":"mobile-pwa.html","id":"other-resources","chapter":"24 {shinyMobile} and PWA","heading":"24.6 Other resources","text":"process described works perfectly Shiny template. packages like\n{shiny.pwa} create PWA compatible structure\nfly.","code":""},{"path":"mobile-widgets.html","id":"mobile-widgets","chapter":"25 Design widgets","heading":"25 Design widgets","text":"Framework7 brings dozen different widgets like photo browser, virtual lists (high performance lists),\nmessages, notifications, toasts, …Looking documentation, API time\nalways , create widget:update, open close later:must admit, deviations like navbar (app.navbar.show()) dialog enough common points \ndesign main wrapper creates widget update/open/close .significantly simplify R/JS API price slightly reduce \ncustomization.","code":"app.widget.create(parameters);app.widget.update(newParameters);\napp.widget.open();\napp.widget.close();"},{"path":"mobile-widgets.html","id":"build-the-ui","chapter":"25 Design widgets","heading":"25.1 Build the UI","text":"know JavaScript must receive configuration object create widget instance.\nshown earlier book, simple way achieve . Let’s consider gauge example.UI side, expect :Upon instantiating, Framework7 populates container relevant tags.\nf7_gauge function creates div tag gauge class well configuration\ntag:provide default valueText option display current\nvalue followed % symbol. Note class crucial target relevant tag JS side.\nwidgets moreless follow scheme. careful partial matching\n$ operator. reason used [[ instead: $, valueText \nmatched valueTextColor, leading misleading behavior.","code":"<div class=\"gauge\"><\/div>\nf7_gauge <- function(id, value, options = NULL) {\n\n  if (is.null(options[[\"valueText\"]])) options[[\"valueText\"]] <- paste(value * 100, \"%\")\n\n  gaugeProps <- c(list(value = value), options)\n\n  gaugeConfig <- shiny::tags$script(\n    type = \"application/json\",\n    `data-for` = id,\n    jsonlite::toJSON(\n      x = gaugeProps,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n\n  shiny::tags$div(\n    class = \"gauge\",\n    id = id,\n    gaugeConfig\n  )\n}"},{"path":"mobile-widgets.html","id":"widgets-without-preexisting-ui","chapter":"25 Design widgets","heading":"25.2 Widgets without preexisting UI","text":"widgets like toasts, notifications don’t predefined UI\nelement app starts. case, simply send configuration JS, \nsession:Pay attention icon element: can’t convert shiny tags JSON, \nmust converted character first. multiple parameters contain tags,\nmust treat accordingly!","code":"\nf7_notif <- function(id = NULL, text, options = NULL, session = shiny::getDefaultReactiveDomain()) {\n\n  if (!is.null(options$icon)) options$icon <- as.character(options$icon)\n\n  message <- c(dropNulls(list(id = id, text = text)), options)\n  # see my-app.js function\n  sendCustomMessage(\"notification\", message, session)\n\n}"},{"path":"mobile-widgets.html","id":"initialize-the-widget","chapter":"25 Design widgets","heading":"25.3 Initialize the widget","text":"JS side, create new script, widgets.jsWe set array containing compatible widget names two categories concatenate\nwidgets element:define activateWidget function, considering UI widgets.\nSince two widgets categories, function first checks whether widget part uiWidgets array:may multiple widgets time initialize, must loop \npossible elements. class important must match widget name.\ninstance, gauge gauge class methods always app.gauge..\nloop multiple widgets? use jQuery method:see $(\".\" + widget) gives $(\".gauge) widget gauge, \ntarget gauges one one. gauge, extract configuration containing\noptions passed end user. Remember element unique id.\nextract current element $() $el variable search \nscript tag pointing unique tag $el.attr(\"id\") id. configuration parsed\nconvert object. Note time, Framework7 expects el\nattributes simply contains CSS selector current element,\nwords unique id '#' + $el.attr(\"id\"):final step initialize widget, quite straightforward notice \napp.gauge app[\"gauge\"]. obtain general code:server widgets, even simpler. recover message Shiny.addCustomMessageHandler(\"type\", callback) \ninitialize . possible source problem custom message type must \none specified R function session$sendCustomMessage(\"type\", message). create\nelse statement following condition put code inside:shown code, can also immediately open widget chaining methods. Moreover, \nalways good practice let Shiny know widget state, whether currently\nopened. reason added property message. widgets trigger events,\ninstance notifications notification:opened notification:closed. event,\nset input value fly, Shiny.setInputValue. way, template users \nable know exactly widget closed opened trigger subsequent action.\nobviously requires widget pass optional id attribute ensure uniqueness!full JavaScript code may found .final step activate widgets. proceed loop:Let’s try notification example, capture state notification\ninput element:","code":"\nlibrary(charpente)\ncreate_js(\"widgets\")const uiWidgets = [\"gauge\", \"swiper\", \"searchbar\"];\nconst serverWidgets = [\"toast\", \"photoBrowser\", \"notification\"];\nconst widgets = uiWidgets.concat(serverWidgets);if (uiWidgets.indexOf(widget) > -1) {\n  // Do things\n}if (uiWidgets.indexOf(widget) > -1) {\n  $(\".\" + widget).each(function() {\n    // Do things\n  }\n}if (uiWidgets.indexOf(widget) > -1) {\n  $(\".\" + widget).each(function() {\n    var $el = $(this);\n    var config = $(document).find(\n      \"script[data-for='\" + $el.attr(\"id\") + \"']\"\n    );\n    config = JSON.parse(config.html());\n    // add the id\n    config.el = '#' + $el.attr(\"id\");\n  }\n}app[widget].create(config);Shiny.addCustomMessageHandler(widget, function(message) {\n  if (message.id !== undefined) {\n    message.on = {\n      opened: function() {\n        Shiny.setInputValue(message.id, true);\n      },\n      closed: function() {\n        Shiny.setInputValue(message.id, false);\n        app.data[widget][message.id].destroy();\n      }\n    }; \n  }\n\n  app[widget].create(message).open();\n});// Instantiate a widget\nactivateWidget = function(widget) {\n  // Handle ui side widgets\n  if (uiWidgets.indexOf(widget) > -1) {\n    $(\".\" + widget).each(function() {\n      var $el = $(this);\n      var config = $(document).find(\n        \"script[data-for='\" + $el.attr(\"id\") + \"']\"\n      );\n      config = JSON.parse(config.html());\n      // add the id\n      config.el = '#' + $el.attr(\"id\");\n\n      // feed the create method\n      app[widget].create(config);\n    });\n  } else {\n    // This concerns toasts, notifications, photoBrowser, ...\n    // that don't have any UI element in the DOM before creating\n    // the widget instance.\n    Shiny.addCustomMessageHandler(widget, function(message) {\n      if (message.id !== undefined) {\n        message.on = {\n          opened: function() {\n            Shiny.setInputValue(message.id, true);\n          },\n          closed: function() {\n            Shiny.setInputValue(message.id, false);\n            app.data[widget][message.id].destroy();\n          }\n        }; \n      }\n      app[widget].create(message).open();\n    });\n  }\n};// Loop over all widgets to activate them\nwidgets.forEach(function(w) {\n  activateWidget(w);\n});\nlibrary(shiny)\nui <- f7_page(\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\",\n  options = list(\n    theme = \"ios\",\n    version = \"1.0.0\",\n    taphold = TRUE,\n    color = \"#42f5a1\",\n    filled = TRUE,\n    dark = TRUE\n  )\n)\n\nserver <- function(input, output, session) {\n  observe({\n    f7_notif(id = \"welcome\", \"Helloooooo\", options = list(closeTimeout = 2000))\n  })\n  \n  observeEvent(input$welcome, {\n    shiny::showNotification(sprintf(\"Notification is %s\", input$welcome))\n  })\n}\n\nshinyApp(ui, server)"},{"path":"mobile-widgets.html","id":"update-widgets","chapter":"25 Design widgets","heading":"25.4 Update widgets","text":"like develop similar generalized interface update element DOM.\nInstead update_f7_gauge, update_f7_swiper, … want update_f7_instance function.leverage app.data element stores instances widget type. previous part,\nalready created cache tooltips, let’s gauges:step, array name must app method. instance,\napp.gauge, means create config.data.gauge config.data.gauges,\nlead errors later.cache available, modify JavaScript creates widget instance,\nstore new instance cache. add following code, w refers widget instance:manipulation make sense server widgets!activateWidget function :done, time design update_f7_instance. R code sends message \ncurrent session containing:id element update.new configuration.Since send JSON, hardest part correctly process shiny tags. \ntrack shiny tags. reminder, let’s run code :configuration element, must check whether class contains shiny.tag shiny.tag.list convert character. Moreover, may contain nested list like :case, function must recursive call whenever item list class\nfound. element simple text, numeric, return .finally get:JS side, receive message (still widget.js script):widgets stored type app data, instance, element unique id\nmygauge located app.data[\"gauge\"][\"mygauge\"]. easy way recover widget type\ngiven id, first step message handler find instance located. design \nnested loop. outer loop scans app.data properties (ie widget categories) inner loop\nscans existing instances category. Whenever, message.id matches instance\nname, store corresponding widget category variable:access old instance using newly defined variable message.id.\ncapture parameters located oldInstance.params. , multiple options available:extend old configuration new one.entirely overwrite existing options., decided merge old new configurations using app.utils.extend:next step destroy old instance, initialize new instance refresh\napp.data cache:whole code located :example showing update gauge server. may notice, \napproach perfect user explicitly update valueText field \nreflects new value. Similarly, may ask gauge value 0 1,\ninstead 0 100. reason comes Framework7 API. One might tempted convert value inside f7_gauge (user provides number 0 100), \nalso mean manually convert value update_f7_instance function later. stated previous chapters, always compromise simple API easy maintain (developer) user experience. issue may/solved comprehensive documentation.","code":"config.data = function() {\n  return {\n    // any other widget type to cache ...\n    gauge: []\n  };\n};// ui widgets\napp.data[widget][$el.attr(\"id\")] = w;// Instantiate a widget\nactivateWidget = function(widget) {\n  // Handle ui side widgets\n  if (uiWidgets.indexOf(widget) > -1) {\n    $(\".\" + widget).each(function() {\n      var $el = $(this);\n      var config = $(document).find(\n        \"script[data-for='\" + $el.attr(\"id\") + \"']\"\n      );\n      config = JSON.parse(config.html());\n      // add the id\n      config.el = '#' + $el.attr(\"id\");\n\n      // feed the create method\n      var w = app[widget].create(config);\n      // Store the widget instance in the app data cache\n      app.data[widget][$el.attr(\"id\")] = w;\n    });\n  } else {\n    // This concerns toasts, notifications, photoBrowser, ...\n    // that don't have any UI element in the DOM before creating\n    // the widget instance.\n    Shiny.addCustomMessageHandler(widget, function(message) {\n      if (message.id !== undefined) {\n        message.on = {\n          opened: function() {\n            Shiny.setInputValue(message.id, true);\n          },\n          closed: function() {\n            Shiny.setInputValue(message.id, false);\n            app.data[widget][message.id].destroy();\n          }\n        }; \n      }\n      var w = app[widget].create(message);\n      w.open();\n    });\n  }\n};\nclass(shiny::div())## [1] \"shiny.tag\"\nclass(shiny::tagList(shiny::div(), shiny::h1()))## [1] \"shiny.tag.list\" \"list\"\noptions = list(\n  buttons = list(\n   list(\n     text = \"Some text\",\n     icon = f7Icon(\"info\"),\n     color = \"pink\"\n   )\n  )\n)\nupdate_f7_instance <- function(id, options, session = shiny::getDefaultReactiveDomain()) {\n\n  # Convert any shiny tag into character so that toJSON does not cry\n  listRenderTags <- function(l) {\n    lapply(\n      X = l,\n      function(x) {\n        if (inherits(x, c(\"shiny.tag\", \"shiny.tag.list\"))) {\n          as.character(x)\n        } else if (inherits(x, \"list\")) {\n          # Recursive part\n          listRenderTags(x)\n        } else {\n          x\n        }\n      }\n    )\n  }\n  options <- listRenderTags(options)\n\n  message <- list(id = id, options = options)\n  sendCustomMessage(\"update-instance\", message, session)\n}Shiny.addCustomMessageHandler('update-instance', function(message) {\n  // Treat message ...\n});var instanceFamily;\nfor (const property in app.data) {\n  for (const e in app.data[property]) {\n    if (e === message.id) {\n      instanceFamily = property;\n    }\n  }\n}var oldInstance = app.data[instanceFamily][message.id];\nvar oldConfig = oldInstance.params;\nvar newConfig = app.utils.extend(oldConfig,  message.options);// Destroy old instance\noldInstance.destroy();\n// Create new config\nvar newInstance = app[instanceFamily].create(newConfig);\n// Update app data\napp.data[instanceFamily][message.id] = newInstance;Shiny.addCustomMessageHandler('update-instance', function(message) {\n  // Recover in which array is stored the given instance.\n  // Uniqueness is ensured since HTML id are supposed to be unique.\n  var instanceFamily;\n  for (const property in app.data) {\n    for (const e in app.data[property]) {\n      if (e === message.id) {\n        instanceFamily = property;\n      }\n    }\n  }\n\n  var oldInstance = app.data[instanceFamily][message.id];\n  var oldConfig = oldInstance.params;\n  var newConfig = app.utils.extend(oldConfig,  message.options);\n\n  // Destroy old instance\n  oldInstance.destroy();\n  // Create new config\n  var newInstance = app[instanceFamily].create(newConfig);\n  // Update app data\n  app.data[instanceFamily][message.id] = newInstance;\n});\nui <- f7_page(\n  f7_gauge(\n    \"mygauge\", \n    value = 0.1,\n    options = list(\n      type  = \"semicircle\",\n      borderColor = \"#2196f3\",\n      borderWidth = 10,\n      valueFontSize = 41,\n      valueTextColor = \"#2196f3\",\n      labelText = \"amount of something\"\n    )\n  ),\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\",\n  options = list(\n    theme = \"ios\",\n    version = \"1.0.0\",\n    taphold = TRUE,\n    color = \"#42f5a1\",\n    filled = TRUE,\n    dark = TRUE\n  )\n)\n\nserver <- function(input, output, session) {\n  observe({\n    Sys.sleep(2)\n    update_f7_instance(\n      \"mygauge\", \n      options = list(\n        value = 0.75, \n        valueText = \"75 %\", \n        labelText = \"New label!\"\n      )\n    )\n  })\n}\n\nshinyApp(ui, server)"},{"path":"mobile-going-further.html","id":"mobile-going-further","chapter":"26 Going further","heading":"26 Going further","text":"","code":""},{"path":"mobile-going-further.html","id":"improved-disconnect-screen","chapter":"26 Going further","heading":"26.1 Improved disconnect screen","text":"depicted Figure 26.1, classic Shiny disconnect\nscreen mobile device beautiful, especially knowing Framework7\ncapabilities.\nFIGURE 26.1: Vanilla Shiny disconnect screen.\nLet’s better. Upon disconnection, want display toast 2 buttons:\n- reload button reloads window re-initialize app. button\ncalls location.reload() upon click.\n- reconnect button, tries reconnect server websocket, \ndon’t lose input, output elements. button calls Shiny.shinyapp.reconnect() upon click.First thing first, know shiny disconnected? described Chapter 10,\nwhenever client socket connection closed, reason, shiny:disconnected event triggered:allows us listen event JS side:next step remove default shiny reconnect elements. added \nonDisconnected method, adds disconnect overlay (gray-screen) optionally \nreconnect notification:remove , multiple alternatives. easiest way wait\nclient connected, listening shiny:connected, set Shiny.shinyapp.onDisconnected method\nadd gray overlay.Note: modifying vanilla shiny elements, make sure check possible\nside effects!edit previous disconnected event listener add custom Framework7 toast, closes\nupon click:Result shown Figure 26.2.\nFIGURE 26.2: Vanilla Shiny disconnect screen.\nJS code ignores user reconnect setup proposes\nreconnect regardless session$allowReconnect configuration. want keep \noriginal behavior, may add following condition showing toast:","code":"socket.onclose = function() {\n  // These things are needed only if we've successfully opened the\n  // websocket.\n  if (hasOpened) {\n    $(document).trigger({\n      type: 'shiny:disconnected',\n      socket: socket\n    });\n\n    self.$notifyDisconnected();\n  }\n\n  self.onDisconnected(); // Must be run before self.$removeSocket()\n  self.$removeSocket();\n}$(document).on(\"shiny:disconnected\", function(event) {\n  // Do things\n});this.onDisconnected = function() {\n  // Add gray-out overlay, if not already present\n  var $overlay = $('#shiny-disconnected-overlay');\n  if ($overlay.length === 0) {\n    $(document.body).append('<div id=\"shiny-disconnected-overlay\"><\/div>');\n  }\n\n  // To try a reconnect, both the app (this.$allowReconnect) and the\n  // server (this.$socket.allowReconnect) must allow reconnections, or\n  // session$allowReconnect(\"force\") was called. The \"force\" option should\n  // only be used for testing.\n  if ((this.$allowReconnect === true && this.$socket.allowReconnect === true) ||\n      this.$allowReconnect === \"force\")\n  {\n    var delay = reconnectDelay.next();\n    exports.showReconnectDialog(delay);\n    this.$scheduleReconnect(delay);\n  }\n}// remove shiny reconnect stuff;\n$(document).on(\"shiny:connected\", function(event) {\n  Shiny.shinyapp.onDisconnected = function() {\n    // Add gray-out overlay, if not already present\n    var $overlay = $('#shiny-disconnected-overlay');\n    if ($overlay.length === 0) {\n      $(document.body).append('<div id=\"shiny-disconnected-overlay\"><\/div>');\n    }\n  };\n});$(document).on(\"shiny:disconnected\", function(event) {    \n  var reconnectToast = app.toast\n    .create({\n      icon: '<i class=\"icon f7-icons\">bolt_fill<\/i>',\n      position: \"center\",\n      text:\n        'Oups... disconnected <\/br> <\/br> <div class=\"row\"><button onclick=\"Shiny.shinyapp.reconnect();\" class=\"toast-button button color-green col\">Reconnect<\/button><button onclick=\"location.reload();\" class=\"toast-button button color-red col\">Reload<\/button><\/div>'\n    })\n    .open();\n\n    // close toast whenever a choice is made ...\n    $(\".toast-button\").on(\"click\", function() {\n      reconnectToast.close();\n    });\n});if ((Shiny.shinyapp.$allowReconnect === true && Shiny.shinyapp.$socket.allowReconnect === true) ||\n      Shiny.shinyapp.$allowReconnect === \"force\") {\n  // Toast logic\n}"},{"path":"going-further-reactR.html","id":"going-further-reactR","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27 R + Shiny + React: welcome {reactR}","text":"React open source library designed quickly develop user interfaces UI components, front end.\ndeveloped Facebook community (1500 contributors)\nmade public May 29 2013. currently used worldwide around 163k stars \nGithub ranking widely impacts mobile market, React Native library.\nReact also really convenient develop attractive documentations docusaurus.\never built user interfaces pure JS, might like React!, give short introduction React ecosystem see can benefit \nR Shiny side.","code":""},{"path":"going-further-reactR.html","id":"quick-introduction-to-react","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.1 Quick introduction to React","text":"understand React prerequisites notably basic HTML/CSS/JS knowledge, especially JS modules (see\nsection 9.4.6.1). However, managed reach chapter, worry much.","code":""},{"path":"going-further-reactR.html","id":"setup-1","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.1.1 Setup","text":"Node npm required. sure, run:stage also good yarn ’ll need reactR.nothing returned, please refer section 9.3.1. initiate React project,\nleverage npx command:Replace <PROJECT_NAME> real name project. seems intimidating,\nkeep mind concept using golem package\ninitiate creation robust shiny projects, except work terminal.done (package initialization takes time),\nmove project folder launch demo app:yarn, yarn start also works.see something similar Figure 27.1.\nFIGURE 27.1: npm start opens react app\n","code":"node -v\nnpm -vnpx create-react-app <PROJECT_NAME>cd <PROJECT_NAME> && npm start"},{"path":"going-further-reactR.html","id":"basics-1","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.1.2 Basics","text":"now set start learning basics React. Among created files,\nnotice /src/app.js file. Inside App function, remove content inside\nreturn statement put simple <h1>Hello, world!<\/h1> HTML title. also clean imports\ndon’t need CSS logo anymore. obtain:done, run npm build (yarn build), rebuild JS code npm start \nrestart server preview app. practice, server launched, \nneed restart whenever code updated. simple save refresh interface!code see React component. definition rather simple: function returns\nmoreless complex piece UI. components rendered React?far, didn’t look /src/index.js script. Inside find:Note: recent version npx create-react-app <React.StrictMode><App /><\/React.StrictMode> instead\nApp, thing. may also find <App />. practice, rarely modify part.short, inserts App component inside element root id main\nHTML page. HTML skeleton may found public/index.html folder. may guess end\nday, app composed multiple bricks called ReactDOM.render top level component.","code":"function App() {\n  return (\n    <h1>Hello, world!<\/h1>\n  );\n}\n\nexport default App; // don't remove, this is needed by index.jsReactDOM.render(\n  App,\n  document.getElementById('root')\n);"},{"path":"going-further-reactR.html","id":"about-jsx","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.1.2.1 About JSX","text":"just wrote first React component. Didn’t notice something weird code?\nJS HTML mixed, called JSX, syntax extension JS. JSX makes code\nless verbose, instance:exactly thing code becomes complex, nearly\nimpossible read.Let’s see pass variables JSX. want show Hello, <Name>, store\nname variable modify app.js code accordingly:Expressions passed within curly brackets {expression} may even call functions inside.Tag attributes also require curly brackets. Let’s modify title tag give color \nsize.Try save. fail? can’t pass multiple object properties inside single {}.\nneed either double brackets like {{object properties: values, ...}} store object \nvariable :Notice write CSS properties following camelCase syntax, font-size equivalent fontSize.","code":"React.createElement(\n  'h1',\n  'Hello, world!'\n);function App() {\n  const name = \"David\";\n  return (\n    <h1>Hello, {name}<\/h1>\n  );\n}function App() {\n  const name = \"David\";\n  return (\n    <h1 style={color: \"red\", fontSize: 40}>Hello, {name}<\/h1>\n  );\n}function App() {\n  const name = \"David\";\n  return (\n    <h1 style={{color: \"red\", fontSize: 40}}>Hello, {name}<\/h1>\n  );\n}\n\n// OR\n\nfunction App() {\n  const name = \"David\";\n  const myStyle = {\n    color: \"red\", \n    fontSize: 40\n  }\n  return (\n    <h1 style={myStyle}>Hello, {name}<\/h1>\n  );\n}"},{"path":"going-further-reactR.html","id":"combining-components","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.1.2.2 Combining components","text":"whole interest combine multiple components create reusable pieces. edit code\ncreate SayHello component. Notice props parameter. way pass configuration \nparent component. case, want display person name, props.name. meantime,\nedit App parent component call SayHello three times, passing different name like <SayHello name=\"David\" /> (reason recover props.name lower level component):Notice enclosing <>...<\/>. called React fragment useful don’t want \ninsert extra <div> DOM.even efficient leveraging lists capabilities. create array\nnames apply map method return corresponding <SayHello /> sub-component:convention, elements inside map require keys.Props read-must modified withing component.\nupdate components?","code":"function SayHello(props) {\n  return (\n    <h1>Hello, {props.name}<\/h1>\n  );\n}\n\n\nfunction App() {\n  return(\n  <>\n    <SayHello name=\"David\" />\n    <SayHello name=\"Lisa\" />\n    <SayHello name=\"Simon\" />\n  <\/>\n  );\n}const names = [\"David\", \"Lisa\", \"Simon\"];\nfunction App() {\n  const sayHelloToAll = names.map((name) => <SayHello key={name} name={name} />); \n  return(sayHelloToAll);\n}"},{"path":"going-further-reactR.html","id":"component-state","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.1.2.3 Component state","text":"component state private controlled component. Since React 16.8 introduction hooks, necessary convert component function class.\neasiest example illustrate hooks capabilities button. time, click button,\nwant keep current number clicks state, like shiny::actionButton. start \nimporting useState function react create new ActionButton component.\nInside, set state useState create state variable count well function \nupdate , namely setCount. way create 2 variables called array destructuring.\nset initial number counts 0:Next step create button skeleton. provide onClick property updates\nbutton state.Inside, write anonymous function calls setCount increment\ncount value 1. point, may replace app.js content :may improve previous app add reset button within ActionButton component \nsets count back 0:make sense show reset button button clicked,\nleast . define isResetVisible variable true whenever \ncount higher 0 false count 0. store reset button variable\nreturn something isResetVisible true:Now get better understanding React works, let’s see use \nShiny.","code":"import {useState} from 'react';\n\nfunction ActionButton() {\n  const [count, setCount] = useState(0);\n}import {useState} from 'react';\n\nfunction ActionButton() {\n  const [count, setCount] = useState(0);\n  return(\n    <button onClick={() => setCount(count + 1)}>\n      Number of clicks: {count}\n    <\/button >\n  );\n}\n\nfunction App() {\n  return (\n    <ActionButton />\n  );\n}\n\nexport default App;function ActionButton() {\n  const [count, setCount] = useState(0);\n  return(\n    <>\n    <button onClick={() => setCount(count + 1)}>\n      Number of clicks: {count}\n    <\/button >\n    <button onClick={() => setCount(0)}>\n      Reset\n    <\/button >\n    <\/>\n  );\n}function ActionButton() {\n  const [count, setCount] = useState(0);\n  const isResetVisible = count > 0 ? true : false;\n  let resetButton;\n  if (isResetVisible) {\n    resetButton = <button onClick={() => setCount(0)}>\n      Reset\n    <\/button >\n  }\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>\n        Number of clicks: {count}\n      <\/button >\n      {resetButton}\n    <\/>\n  );\n}"},{"path":"going-further-reactR.html","id":"introduction-to-reactr","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.2 Introduction to {reactR}","text":"React ecosystem rich provides many plug play boilerplate. instance,\n{reactable} HTML widget developed top react-table library. modern React Argon design system, shown Figure 27.2.\nFIGURE 27.2: Argon design template React\npart, see leverage reactR bring Argon design React Shiny.install reactR:","code":"\ninstall.packages(\"reactR\")\nremotes::install_github(\"react-R/reactR\")"},{"path":"going-further-reactR.html","id":"scaffold-inputs","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.2.1 Scaffold inputs","text":"","code":""},{"path":"going-further-reactR.html","id":"setup-2","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.2.1.1 Setup","text":"reactR exposes scaffoldReactShinyInput creates necessary pieces code\nget started input development (see Figure 27.3):<input_name>.R file containing input skeleton well related update function.\nalso creates custom HTML dependency pointing input JS logic.jsx file boilerplate start developing input JS logic.package.json file containing dependencies.Besides, providing optional dependency name version taken npm installs\nnecessary dependencies package.json file.case, want build top Argon :\nFIGURE 27.3: Package initialization {reactR}\nNote reactR provides webpack JS manager. build JS code go RStudio\nterminal tab (terminal) run package root:installs dependencies listed package.json file create package-lock.json file. ever used renv, similar guarantees isolation package. dependencies stored node_modules folder.Note: encountered cases yarn install failed. case, may\ntry npm argon-design-system-react also check VPN settings.run webpack command triggers compiles JS production ready code. need customize build pipeline, webpack configuration located webpack.config.js. R side, generated JS file referenced HTML dependencies, located <input_name>.R file.","code":"\npath <- file.path(tempdir(), \"mypkg\")\nusethis::create_package(path, rstudio = TRUE)\nreactR::scaffoldReactShinyInput(\"argon_action_button\", list(name = \"argon-design-system-react\", version = \"1.1.0\"))yarn install\nyarn run webpack"},{"path":"going-further-reactR.html","id":"implement-the-input-js-logic","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.2.1.2 Implement the input JS logic","text":"’s time develop logic. Argon documentation provides boilerplate, slightly simplified, show :Notice first two lines import reactShinyInput function reactR JS core reactstrap, React powered Bootstrap 4 library. reactShinyInput provides\nwrapper automatically bind input element. extremely convenient allows solely focus component logic rather binding shiny system. takes three parameters:element class obtained R side createReactShinyInput.input binding name useful store reference Shiny.InputBindings registry.React component function.optional fourth parameter allowing pass custom options like\nrate policies.Overall, reactShinyInput extends Shiny.InputBinding class providing extra methods like:getInputConfiguration setInputConfiguration, respectively get set user provided configuration,\npassed createReactShinyInput R side function. hood, addition ship reactR, React, ReactTools HTML dependencies (user defined custom dependency), createReactShinyInput generate\nthree tag elements:first tag element placeholder containing unique id. React insert\ncomponent inside target ReactDOM.render.second tag script containing value passed JSON.second tag script containing configuration, also passed JSON.configuration values processed initialize method, great place since \ncalled input bound:stored corresponding data attributes. important part render method \ncreates React element , based upon configuration, value renders DOM:render method called inside subscribe also time element updated\nreceiveMessage.Interestingly, setValue made available React component. action button case, called time onClick event triggered, time user clicks button. way update value since accessible user update_argon_action_button. inputs like textInput onChange event, triggered time text field updated. value may also updated\nuser updateTextInput. Consequently, general rule situation may\nvary input another!now, let’s just erase {creatR} boilerplate (argon_action_button.jsx) code recompile yarn run webpack. also tell Shiny want \nuse Bootstrap 4 instead Bootstrap 3, bslib::bs_theme function:button looking good really like Argon design system. Indeed, forgot import\nargon CSS assets. Add code argon_action_button.jsx:tell webpack load CSS adding missing rule provided\nwebpack.config.js:possible don’t corresponding node modules. case,\ncan install :also update package.json file.updated, recompile code. next part tutorial consists making button interactive.\nedit argon_action_button.jsx code add three input parameters \nArgonButton component:value button count. initial value provided default slot R side (see ).configuration contains various user provided properties like color status, outline style, …setValue way increment button value. Letting setValue(value + 1),\nensures increment button value 1 unit click.R side, remove default parameter external API keep internally \nset initial value 0, like shiny::actionButton. Status label stored\nconfiguration named list. careful! Names matter since recovered JS side\nconfiguration.prop_name:everything date, rebuild JS, reload/document package run app demo:may also modify update input boilerplate since don’t change button value:","code":"import { reactShinyInput } from 'reactR';\n// reactstrap components\nimport { Button } from \"reactstrap\";\n\nfunction ArgonButton() {\n  return (\n    <Button color=\"primary\" type=\"button\">\n      Button\n    <\/Button>\n  );\n}\n\nreactShinyInput('.argon_action_button', 'mypkg.argon_action_button', ArgonButton);getInputConfiguration(el) {\n  return $(el).data('configuration');\n}\nsetInputConfiguration(el, configuration) {\n  $(el).data('configuration', configuration);\n}\nreactR::createReactShinyInput(\n  inputId = \"plop\", \n  class = \"myinput\", \n  dependencies = htmltools::findDependencies(icon(\"bicycle\")), \n  default = 0, \n  configuration = list(a = 1, b = \"test\"), \n  container = div\n)$(el).data('value', JSON.parse($(el).next().text()));\n$(el).data('configuration', JSON.parse($(el).next().next().text()));render(el) {\n  const element = React.createElement(component, {\n    configuration: this.getInputConfiguration(el),\n    value: this.getValue(el),\n    setValue: this.setValue.bind(this, el),\n    el: el\n  });\n  ReactDOM.render(element, el);\n}\ndevtools::document()\ndevtools::load_all()\nlibrary(shiny)\nlibrary(mypkg)\n\nui <- fluidPage(\n  theme = bslib::bs_theme(version = \"4\"),\n  argon_action_button(\"plop\")\n)\n\nserver <- function(input, output, session) {\n  \n}\n\nshinyApp(ui, server)import \"argon-design-system-react/src/assets/css/argon-design-system-react.min.css\";rules: [\n  {\n      test: /\\.jsx?$/,\n      loader: 'babel-loader',\n      options: {\n          presets: ['@babel/preset-env', '@babel/preset-react']\n      }\n  },\n  // For CSS so that import \"path/style.css\"; works\n  {\n      test: /\\.css$/,\n      use: ['style-loader', 'css-loader']\n  }\n]npm install style-loader css-loader --save-devimport { reactShinyInput } from 'reactR';\n// reactstrap components\nimport { Button } from \"reactstrap\";\n// Import argon CSS\nimport \"argon-design-system-react/src/assets/css/argon-design-system-react.min.css\";\n\nfunction ArgonButton({configuration, value, setValue}) {\n  return (\n    <Button color={configuration.status} type=\"button\" onClick={() => setValue(value + 1)}>\n      {configuration.label}\n    <\/Button>\n  );\n}\n\nreactShinyInput('.argon_action_button', 'mypkg.argon_action_button', ArgonButton);\nargon_action_button <- function(inputId, label, status = \"primary\") {\n  reactR::createReactShinyInput(\n    inputId,\n    \"argon_action_button\",\n    htmltools::htmlDependency(\n      name = \"argon_action_button-input\",\n      version = \"1.0.0\",\n      src = \"www/mypkg/argon_action_button\",\n      package = \"mypkg\",\n      script = \"argon_action_button.js\"\n    ),\n    default = 0,\n    configuration = list(\n      label = label,\n      status = status\n    ),\n    htmltools::tags$div\n  )\n}\nui <- fluidPage(\n  theme = bslib::bs_theme(version = \"4\"),\n  argon_action_button(\"plop\", \"Click me!\")\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$plop))\n}\n\nshinyApp(ui, server)\nupdate_argon_action_button <- function(session, inputId, configuration = NULL) {\n  message <- list()\n  if (!is.null(configuration)) message$configuration <- configuration\n  session$sendInputMessage(inputId, message);\n}\n\ndevtools::document()\ndevtools::load_all()\nui <- fluidPage(\n  theme = bslib::bs_theme(version = \"4\"),\n  fluidRow(\n    argon_action_button(\"plop\", \"Click me!\"),\n    argon_action_button(\"update\", \"Update button 1\")\n  )\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$plop))\n  observeEvent(input$update, {\n    update_argon_action_button(\n      session, \"plop\", \n      configuration = list(\n        label = \"New text\", \n        status = \"success\"\n      )\n    )\n  }, ignoreInit = TRUE)\n}\n\nshinyApp(ui, server)"},{"path":"going-further-reactR.html","id":"exercise-1","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.2.1.3 Exercise","text":"Add size, outline icon (fontawesome) parameters ArgonButton component corresponding R script.\nHint: icon parameter trickiest one. might find helpful capture HTML dependency htmltools::htmlDependencies(iconTag) properly render . HTML icon(\"bicycle\") produces <class=\"fa fa-bicycle\" role=\"presentation\" aria-label=\"bicycle icon\"><\/>. However, React want <className=\"fa fa-bicycle />. Therefore, extract icon class send JS configuration list.Implement logic JS side. Hint: may use code:Try code :get result shown Figure 27.4.\nFIGURE 27.4: Argon Action button React\n","code":"import { reactShinyInput } from 'reactR';\n// reactstrap components\nimport { Button } from \"reactstrap\";\n// import argon CSS\nimport \"argon-design-system-react/src/assets/css/argon-design-system-react.min.css\";\n\nfunction ArgonButton({configuration, value, setValue}) {\n  let iconTag, btnCl, innerTag;\n  if (...) {\n    btnCl = \"btn-icon\";\n    innerTag = <>\n      <span className=\"btn-inner--icon\">\n        <i className=... />\n      <\/span>\n      <span className=\"btn-inner--text\">...<\/span>\n    <\/>;\n  } else {\n    innerTag = configuration.label;\n  }\n\n  let outlined;\n  if (...) {\n    outlined = true;\n  }\n\n  return (\n    <Button\n      color={configuration.status}\n      type=\"button\"\n      className=...\n      outline=...\n      size=...\n      onClick={() => setValue(value + 1)}>\n      {innerTag}\n    <\/Button>\n  );\n}\n\nreactShinyInput('.argon_action_button', 'mypkg.argon_action_button', ArgonButton);\nlibrary(shiny)\nlibrary(mypkg)\n\nui <- fluidPage(\n  theme = bslib::bs_theme(version = \"4\"),\n  fluidRow(\n    argon_action_button(\"plop\", \"Click me!\", size = \"lg\", outline = TRUE),\n    argon_action_button(\"update\", \"Update button 1\", icon = icon(\"bicycle\"))\n  )\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$plop))\n  observeEvent(input$update, {\n    update_argon_action_button(\n      session, \"plop\", \n      configuration = list(\n        label = \"New text\", \n        status = \"success\"\n      )\n    )\n  }, ignoreInit = TRUE)\n}\n\nshinyApp(ui, server)"},{"path":"going-further-reactR.html","id":"example-2-a-slider-input","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.2.1.4 Example 2: a slider input","text":"propose preliminary implementation Argon slider input. documentation provides JSX skeleton:slider JS API actually taken well known noUiSlider library already available package node modules. Still package action button input, can call:creates new srcjs/argon_slider.jsx script. Argon uses pure JS API noUIslider,\nmuch work us mainly provided reactShinyInput JS helper proper initialization method create slider instance. change per :well updating methods like setInputValue, setInputConfiguration. Fortunately,\nalready nouislider-react API, \nmakes job much easier shown . add new dependency run:replace import statement inside JSX file rely nouislider-react.\nNouislider component markup fairly intuitive. set min max well current value:connect property makes slider bar background filled theme color. Figure 27.5 shows happens parameter disabled.stage, modified webpack.config.js file multiple entry\npoints (compile action button slider) combined output generic name:means update HTML dependency R side, instance \nargon_slider_input.R:can run app :shown Figure 27.5, slider properly displayed value\nrecovered server. However, nothing happens range dragged.\nreason quite simple: set setValue inside JSX code yet.\nFIGURE 27.5: Slider input Argon React\nslider API provides many events \nsuitable us. Ideally, like update:time range released dragging.time range moved arrow key (keyboard).seems like perfect shot onChange prop. Let’s add ArgonSlider component:value pass setValue? quite easy recover slider value\ndirectly within React component. pass parameter function, recover \nlatest value:trick convert value number since recover string default. may\nuse parseInt parseFloat, depending whether want integer exact value.\nRight now, slider moved keyboard. Adding keyboardSupport prop\nmake possible. may correspond parameter provided argon_slider_input configuration.\ntooltips parameter enhances user experience showing current value, top slider, \npips add simple grid. mentioned documentation, add CSS properties (top bottom margins) improve display. Importantly, update slider function passes named list JS, \nmissing property dropped, can lead undefined values JS side unexpected behavior.\nTherefore, good put default values whenever necessary avoid kind issue. instance,\nassume passed orientation = \"horizontal\" upon slider creation forgot \nput parameter update list, can following JSX code:whole component code may found :argon_slider_input given :many parameters can added following API. leave \nexercise reader.Finally, let’s see update_argon_slider_input works:keyboardSupport option seem changed, neither tooltips option. Actually,\nlist may modified. Let’s address .\nnouiSlider React API provides internal access slider instance within \ncomponent. make work, leverage React Hook feature:Create Hook hosting component reference method update React.useState.Update instance option time component re-rendered Shiny.must specify instanceRef property capture slider reference available update\nlocal ref:recompile code run previous example. tooltip gone,\nkeyboard interaction still . surprising updateOptions \nhandle settings. final result displayed Figure 27.6.\nFIGURE 27.6: Slider input Argon React options\n","code":"{/* Simple slider */}\n<div className=\"input-slider-container\">\n  <div className=\"slider\" ref=\"slider1\" />\n  <Row className=\"mt-3 d-none\">\n    <Col xs=\"6\">\n      <span className=\"range-slider-value\">\n        {this.state.simpleValue}\n      <\/span>\n    <\/Col>\n  <\/Row>\n<\/div>\nreactR::scaffoldReactShinyInput(\"argon_slider\", edit = FALSE)initialize(el) {\n  // Unchanged compared to reactR\n  $(el).data('value', JSON.parse($(el).next().text()));\n  $(el).data('configuration', JSON.parse($(el).next().next().text()));\n  \n  // Create the slider instance \n  self = this;\n  Slider.create($(el).attr(id), {\n    start: self.getInputValue(el),\n    connect: [true, false],\n    step: self.getInputConfiguration(el).step,\n    range: { \n      min: self.getInputConfiguration(el).min, \n      max: self.getInputConfiguration(el).max \n    }\n  });\n}yarn add nouislider-reactimport { reactShinyInput } from 'reactR';\nimport Nouislider from \"nouislider-react\";\n\nfunction ArgonSlider({configuration, value, setValue}) {\n  const rangeOpts = {\n    min: configuration.min,\n    max: configuration.max\n  };\n  return(\n    <Nouislider\n      range={rangeOpts}\n      start={value}\n      connect={[true, false]}\n    />\n  );\n}\n\nreactShinyInput('.argon_slider', 'mypkg.argon_slider', ArgonSlider);entry: [\n  path.join(__dirname, 'srcjs', 'argon_action_button.jsx'),\n  path.join(__dirname, 'srcjs', 'argon_slider.jsx')\n],\noutput: {\n  path: path.join(__dirname, 'inst/www/mypkg/argon'),\n  filename: 'argon.js'\n}\nargon_slider_input <- function(inputId, value, default = value, min, max) {\n  reactR::createReactShinyInput(\n    inputId,\n    \"argon_slider\",\n    htmltools::htmlDependency(\n      name = \"argon\",\n      version = \"1.0.0\",\n      src = \"www/mypkg/argon\",\n      package = \"mypkg\",\n      script = \"argon.js\"\n    ),\n    default,\n    list(\n      min = min,\n      max = max\n    ),\n    htmltools::tags$div\n  )\n}\nui <- fluidPage(\n  theme = bslib::bs_theme(version = \"4\"),\n  argon_slider_input(\"plop\", 10, min = 0, max = 100)\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$plop))\n}\n\nshinyApp(ui, server)function ArgonSlider({configuration, value, setValue, el}) {\n  const rangeOpts = {\n    min: configuration.min,\n    max: configuration.max\n  };\n\n  return(\n    <Nouislider\n      range={rangeOpts}\n      start={[value]}\n      connect={[true, false]}\n      onChange={() => setValue()}\n    />\n  );\n}value => setValue(parseFloat(value))if (configuration.orientation === undefined) {\n  configuration.orientation = \"horizontal\";\n}function ArgonSlider({configuration, value, setValue, el}) {\n  const rangeOpts = {\n    min: configuration.min,\n    max: configuration.max\n  };\n  \n  // Better margins\n  const sliderStyle = {marginTop: \"50px\", marginBottom: \"50px\"};\n  \n  // Grid\n  const pipOpts = {\n    mode: 'range',\n    density: 3\n  };\n  \n  return(\n    <Nouislider\n      style={sliderStyle}\n      range={rangeOpts}\n      start={[value]}\n      connect={[true, false]}\n      onChange={value => setValue(parseFloat(value))}\n      keyboardSupport={configuration.keyboard}\n      tooltips={configuration.tooltips}\n      pips={pipOpts}\n    />\n  );\n}\nargon_slider_input <- function(inputId, value, default = value, min, max, keyboard = TRUE,\n                               tooltips = TRUE) {\n  reactR::createReactShinyInput(\n    inputId,\n    \"argon_slider\",\n    htmltools::htmlDependency(\n      name = \"argon\",\n      version = \"1.0.0\",\n      src = \"www/mypkg/argon\",\n      package = \"mypkg\",\n      script = \"argon.js\"\n    ),\n    default,\n    list(\n      min = min,\n      max = max,\n      keyboardSupport = keyboard,\n      tooltips = tooltips\n    ),\n    htmltools::tags$div\n  )\n}\nui <- fluidPage(\n  theme = bslib::bs_theme(version = \"4\"),\n  argon_slider_input(\"plop\", 10, min = 0, max = 100),\n  br(),\n  argon_action_button(\"update\", \"Update button 1\")\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$plop))\n  observeEvent(input$update, {\n    update_argon_slider_input(\n      session, \"plop\",\n      value = 100,\n      configuration = list(\n        min = 0,\n        max = 200,\n        tooltips = FALSE,\n        keyboardSupport = FALSE\n      )\n    )\n  }, ignoreInit = TRUE)\n}\n\nshinyApp(ui, server)const [ref, setRef] = React.useState(null);\n\nconst setConfiguration = () => {\n  if (ref && ref.noUiSlider) {\n    ref.noUiSlider.updateOptions(configuration);\n  }\n};\n\nsetConfiguration();<Nouislider\n  style={sliderStyle}\n  keyboardSupport={configuration.keyboard}\n  connect={[true, false]}\n  range={rangeOpts}\n  start={[value]}\n  onChange={value => setValue(parseFloat(value))}\n  tooltips={configuration.tooltips}\n  pips={pipOpts}\n  instanceRef={\n    instance => {\n      if (instance && !ref) {\n        setRef(instance);\n      }\n    }\n  }\n/>"},{"path":"going-further-reactR.html","id":"exercise-2-a-range-slider","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.2.1.5 Exercise 2: a range slider","text":"Based example, improve previous slider widget handle\nrange slider case, enable user pass vector initial values.","code":""},{"path":"going-further-reactR.html","id":"toward-custom-components","chapter":"27 R + Shiny + React: welcome {reactR}","heading":"27.2.2 Toward custom components","text":"Creating custom components Shiny easy. assume want create\ncustom text container color, size many CSS properties can change dynamically.\nbit different approach shown Chapter 8 since\nbslib gives access Bootstrap variables basic CSS properties like color span element.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"Allaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, Richard Iannone. 2021. Rmarkdown: Dynamic Documents R. https://github.com/rstudio/rmarkdown.Attali, Dean. 2020. Shinyjs: Easily Improve User Experience Shiny Apps Seconds. https://deanattali.com/shinyjs/.Bache, Stefan Milton, Hadley Wickham. 2020. Magrittr: Forward-Pipe Operator R. https://CRAN.R-project.org/package=magrittr.Chang, Winston, Barbara Borges Ribeiro. 2018. Shinydashboard: Create Dashboards Shiny. http://rstudio.github.io/shinydashboard/.Chang, Winston, Joe Cheng, JJ Allaire, Carson Sievert, Barret Schloerke, Yihui Xie, Jeff Allen, Jonathan McPherson, Alan Dipert, Barbara Borges. 2021. Shiny: Web Application Framework R. https://shiny.rstudio.com/.Chang, Winston, Joe Cheng, Alan Dipert, Barbara Borges. 2020. Websocket: WebSocket Client Library. https://CRAN.R-project.org/package=websocket.Cheng, Joe, Winston Chang. 2021. Httpuv: HTTP Websocket Server Library. https://github.com/rstudio/httpuv.Cheng, Joe, Carson Sievert, Winston Chang, Yihui Xie, Jeff Allen. 2021. Htmltools: Tools Html. https://github.com/rstudio/htmltools.Coene, John, David Granjon. 2020. Shinybulma: Bulma Shiny. https://github.com/JohnCoene/shinybulma.Devaux, Gabrielle, David Granjon. 2020. DeminR: DeminR.Fay, Colin, Vincent Guyader, Sébastien Rochette, Cervan Girard. 2020. Golem: Framework Robust Shiny Applications. https://github.com/ThinkR-open/golem.Granjon, David. 2020a. CaPO4Sim: Virtual Patient Simulator Context Calcium Phosphate Homeostasis.———. 2020b. ShinydashboardPlus: Add Adminlte2 Components Shinydashboard.———. 2020c. TablerDash: Tabler Api Shiny.———. 2021. Bs4Dash: Bootstrap 4 Version Shinydashboard.Granjon, David, John Coene. 2021. Charpente: Seamlessly Design Robust Shiny Extensions. https://github.com/RinteRface/charpente.Granjon, David, Victor Perrier, Isabelle Rudolf. 2020. ShinyMobile: Mobile Ready Shiny Apps Standalone Capabilities.Henry, Lionel, Hadley Wickham. 2020. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.Inc, Facebook, Michel Weststrate, Kent Russell, Alan Dipert. 2020. ReactR: React Helpers. https://github.com/react-R/reactR.Perrier, Victor, Fanny Meyer. 2020a. Apexcharter: Create Interactive Chart Javascript Apexcharts Library. https://CRAN.R-project.org/package=apexcharter.———. 2020b. Fresh: Create Custom Bootstrap Themes Use Shiny. https://github.com/dreamRs/fresh.———. 2020c. Jstools: Tools Work Javascript Css. https://github.com/dreamRs/jstools.Perrier, Victor, Fanny Meyer, David Granjon. 2021. ShinyWidgets: Custom Inputs Widgets Shiny. https://github.com/dreamRs/shinyWidgets.R Core Team. 2019. R: Language Environment Statistical Computing. Vienna, Austria: R Foundation Statistical Computing. https://www.R-project.org/.Sievert, Carson, Joe Cheng. 2021. Bslib: Custom Bootstrap ’Sass’ Themes Shiny Rmarkdown. https://CRAN.R-project.org/package=bslib.Sievert, Carson, Barret Schloerke, Joe Cheng. 2021. Thematic: Unified Automatic Theming Ggplot2, Lattice, Base R Graphics.Wickham, Hadley. 2011. “Testthat: Get Started Testing.” R Journal 3: 5–10. https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf.———. 2016. Ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.———. 2020. Testthat: Unit Testing R. https://CRAN.R-project.org/package=testthat.Wickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, Dewey Dunnington. 2020. Ggplot2: Create Elegant Data Visualisations Using Grammar Graphics. https://CRAN.R-project.org/package=ggplot2.Wickham, Hadley, Romain François, Lionel Henry, Kirill Müller. 2021. Dplyr: Grammar Data Manipulation. https://CRAN.R-project.org/package=dplyr.Wickham, Hadley, Dana Seidel. 2020. Scales: Scale Functions Visualization. https://CRAN.R-project.org/package=scales.Xie, Yihui. 2014. “Knitr: Comprehensive Tool Reproducible Research R.” Implementing Reproducible Computational Research, edited Victoria Stodden, Friedrich Leisch, Roger D. Peng. Chapman; Hall/CRC. http://www.crcpress.com/product/isbn/9781466561595.———. 2015a. Dynamic Documents R Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/.———. 2015b. Dynamic Documents R Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.org/knitr/.———. 2016. Bookdown: Authoring Books Technical Documents R Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://github.com/rstudio/bookdown.———. 2020. Knitr: General-Purpose Package Dynamic Report Generation R. https://yihui.org/knitr/.———. 2021. Bookdown: Authoring Books Technical Documents R Markdown. https://github.com/rstudio/bookdown.Xie, Yihui, J. J. Allaire, Garrett Grolemund. 2018. R Markdown: Definitive Guide. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown.Xie, Yihui, Christophe Dervieux, Alison Presmanes Hill. 2021. Blogdown: Create Blogs Websites R Markdown. https://github.com/rstudio/blogdown.Xie, Yihui, Christophe Dervieux, Emily Riederer. 2020. R Markdown Cookbook. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown-cookbook.Xie, Yihui, Alison Presmanes Hill, Amber Thomas. 2017. Blogdown: Creating Websites R Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://github.com/rstudio/blogdown.","code":""}]
